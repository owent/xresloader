// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_5fheader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_5fheader_2eproto;
namespace org {
namespace xresloader {
namespace pb {
class xresloader_data_source;
struct xresloader_data_sourceDefaultTypeInternal;
extern xresloader_data_sourceDefaultTypeInternal _xresloader_data_source_default_instance_;
class xresloader_datablocks;
struct xresloader_datablocksDefaultTypeInternal;
extern xresloader_datablocksDefaultTypeInternal _xresloader_datablocks_default_instance_;
class xresloader_header;
struct xresloader_headerDefaultTypeInternal;
extern xresloader_headerDefaultTypeInternal _xresloader_header_default_instance_;
}  // namespace pb
}  // namespace xresloader
}  // namespace org
PROTOBUF_NAMESPACE_OPEN
template<> ::org::xresloader::pb::xresloader_data_source* Arena::CreateMaybeMessage<::org::xresloader::pb::xresloader_data_source>(Arena*);
template<> ::org::xresloader::pb::xresloader_datablocks* Arena::CreateMaybeMessage<::org::xresloader::pb::xresloader_datablocks>(Arena*);
template<> ::org::xresloader::pb::xresloader_header* Arena::CreateMaybeMessage<::org::xresloader::pb::xresloader_header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace org {
namespace xresloader {
namespace pb {

// ===================================================================

class xresloader_data_source final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xresloader.pb.xresloader_data_source) */ {
 public:
  inline xresloader_data_source() : xresloader_data_source(nullptr) {}
  ~xresloader_data_source() override;
  explicit PROTOBUF_CONSTEXPR xresloader_data_source(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  xresloader_data_source(const xresloader_data_source& from);
  xresloader_data_source(xresloader_data_source&& from) noexcept
    : xresloader_data_source() {
    *this = ::std::move(from);
  }

  inline xresloader_data_source& operator=(const xresloader_data_source& from) {
    CopyFrom(from);
    return *this;
  }
  inline xresloader_data_source& operator=(xresloader_data_source&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const xresloader_data_source& default_instance() {
    return *internal_default_instance();
  }
  static inline const xresloader_data_source* internal_default_instance() {
    return reinterpret_cast<const xresloader_data_source*>(
               &_xresloader_data_source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(xresloader_data_source& a, xresloader_data_source& b) {
    a.Swap(&b);
  }
  inline void Swap(xresloader_data_source* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(xresloader_data_source* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  xresloader_data_source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<xresloader_data_source>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const xresloader_data_source& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const xresloader_data_source& from) {
    xresloader_data_source::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(xresloader_data_source* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xresloader.pb.xresloader_data_source";
  }
  protected:
  explicit xresloader_data_source(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kSheetFieldNumber = 2,
  };
  // optional string file = 1;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const std::string& file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file();
  PROTOBUF_NODISCARD std::string* release_file();
  void set_allocated_file(std::string* file);
  private:
  const std::string& _internal_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file(const std::string& value);
  std::string* _internal_mutable_file();
  public:

  // optional string sheet = 2;
  bool has_sheet() const;
  private:
  bool _internal_has_sheet() const;
  public:
  void clear_sheet();
  const std::string& sheet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sheet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sheet();
  PROTOBUF_NODISCARD std::string* release_sheet();
  void set_allocated_sheet(std::string* sheet);
  private:
  const std::string& _internal_sheet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sheet(const std::string& value);
  std::string* _internal_mutable_sheet();
  public:

  // @@protoc_insertion_point(class_scope:org.xresloader.pb.xresloader_data_source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sheet_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_5fheader_2eproto;
};
// -------------------------------------------------------------------

class xresloader_header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xresloader.pb.xresloader_header) */ {
 public:
  inline xresloader_header() : xresloader_header(nullptr) {}
  ~xresloader_header() override;
  explicit PROTOBUF_CONSTEXPR xresloader_header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  xresloader_header(const xresloader_header& from);
  xresloader_header(xresloader_header&& from) noexcept
    : xresloader_header() {
    *this = ::std::move(from);
  }

  inline xresloader_header& operator=(const xresloader_header& from) {
    CopyFrom(from);
    return *this;
  }
  inline xresloader_header& operator=(xresloader_header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const xresloader_header& default_instance() {
    return *internal_default_instance();
  }
  static inline const xresloader_header* internal_default_instance() {
    return reinterpret_cast<const xresloader_header*>(
               &_xresloader_header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(xresloader_header& a, xresloader_header& b) {
    a.Swap(&b);
  }
  inline void Swap(xresloader_header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(xresloader_header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  xresloader_header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<xresloader_header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const xresloader_header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const xresloader_header& from) {
    xresloader_header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(xresloader_header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xresloader.pb.xresloader_header";
  }
  protected:
  explicit xresloader_header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSourceFieldNumber = 11,
    kXresVerFieldNumber = 1,
    kDataVerFieldNumber = 2,
    kHashCodeFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kCountFieldNumber = 3,
  };
  // repeated .org.xresloader.pb.xresloader_data_source data_source = 11;
  int data_source_size() const;
  private:
  int _internal_data_source_size() const;
  public:
  void clear_data_source();
  ::org::xresloader::pb::xresloader_data_source* mutable_data_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xresloader::pb::xresloader_data_source >*
      mutable_data_source();
  private:
  const ::org::xresloader::pb::xresloader_data_source& _internal_data_source(int index) const;
  ::org::xresloader::pb::xresloader_data_source* _internal_add_data_source();
  public:
  const ::org::xresloader::pb::xresloader_data_source& data_source(int index) const;
  ::org::xresloader::pb::xresloader_data_source* add_data_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xresloader::pb::xresloader_data_source >&
      data_source() const;

  // optional string xres_ver = 1;
  bool has_xres_ver() const;
  private:
  bool _internal_has_xres_ver() const;
  public:
  void clear_xres_ver();
  const std::string& xres_ver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xres_ver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xres_ver();
  PROTOBUF_NODISCARD std::string* release_xres_ver();
  void set_allocated_xres_ver(std::string* xres_ver);
  private:
  const std::string& _internal_xres_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xres_ver(const std::string& value);
  std::string* _internal_mutable_xres_ver();
  public:

  // optional string data_ver = 2;
  bool has_data_ver() const;
  private:
  bool _internal_has_data_ver() const;
  public:
  void clear_data_ver();
  const std::string& data_ver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_ver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_ver();
  PROTOBUF_NODISCARD std::string* release_data_ver();
  void set_allocated_data_ver(std::string* data_ver);
  private:
  const std::string& _internal_data_ver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_ver(const std::string& value);
  std::string* _internal_mutable_data_ver();
  public:

  // required string hash_code = 4;
  bool has_hash_code() const;
  private:
  bool _internal_has_hash_code() const;
  public:
  void clear_hash_code();
  const std::string& hash_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hash_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hash_code();
  PROTOBUF_NODISCARD std::string* release_hash_code();
  void set_allocated_hash_code(std::string* hash_code);
  private:
  const std::string& _internal_hash_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash_code(const std::string& value);
  std::string* _internal_mutable_hash_code();
  public:

  // optional string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // required uint32 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:org.xresloader.pb.xresloader_header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xresloader::pb::xresloader_data_source > data_source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xres_ver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_ver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_5fheader_2eproto;
};
// -------------------------------------------------------------------

class xresloader_datablocks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:org.xresloader.pb.xresloader_datablocks) */ {
 public:
  inline xresloader_datablocks() : xresloader_datablocks(nullptr) {}
  ~xresloader_datablocks() override;
  explicit PROTOBUF_CONSTEXPR xresloader_datablocks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  xresloader_datablocks(const xresloader_datablocks& from);
  xresloader_datablocks(xresloader_datablocks&& from) noexcept
    : xresloader_datablocks() {
    *this = ::std::move(from);
  }

  inline xresloader_datablocks& operator=(const xresloader_datablocks& from) {
    CopyFrom(from);
    return *this;
  }
  inline xresloader_datablocks& operator=(xresloader_datablocks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const xresloader_datablocks& default_instance() {
    return *internal_default_instance();
  }
  static inline const xresloader_datablocks* internal_default_instance() {
    return reinterpret_cast<const xresloader_datablocks*>(
               &_xresloader_datablocks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(xresloader_datablocks& a, xresloader_datablocks& b) {
    a.Swap(&b);
  }
  inline void Swap(xresloader_datablocks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(xresloader_datablocks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  xresloader_datablocks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<xresloader_datablocks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const xresloader_datablocks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const xresloader_datablocks& from) {
    xresloader_datablocks::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(xresloader_datablocks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "org.xresloader.pb.xresloader_datablocks";
  }
  protected:
  explicit xresloader_datablocks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataBlockFieldNumber = 2,
    kDataMessageTypeFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated bytes data_block = 2;
  int data_block_size() const;
  private:
  int _internal_data_block_size() const;
  public:
  void clear_data_block();
  const std::string& data_block(int index) const;
  std::string* mutable_data_block(int index);
  void set_data_block(int index, const std::string& value);
  void set_data_block(int index, std::string&& value);
  void set_data_block(int index, const char* value);
  void set_data_block(int index, const void* value, size_t size);
  std::string* add_data_block();
  void add_data_block(const std::string& value);
  void add_data_block(std::string&& value);
  void add_data_block(const char* value);
  void add_data_block(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_block() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_block();
  private:
  const std::string& _internal_data_block(int index) const;
  std::string* _internal_add_data_block();
  public:

  // optional string data_message_type = 3;
  bool has_data_message_type() const;
  private:
  bool _internal_has_data_message_type() const;
  public:
  void clear_data_message_type();
  const std::string& data_message_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_message_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_message_type();
  PROTOBUF_NODISCARD std::string* release_data_message_type();
  void set_allocated_data_message_type(std::string* data_message_type);
  private:
  const std::string& _internal_data_message_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_message_type(const std::string& value);
  std::string* _internal_mutable_data_message_type();
  public:

  // optional .org.xresloader.pb.xresloader_header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::org::xresloader::pb::xresloader_header& header() const;
  PROTOBUF_NODISCARD ::org::xresloader::pb::xresloader_header* release_header();
  ::org::xresloader::pb::xresloader_header* mutable_header();
  void set_allocated_header(::org::xresloader::pb::xresloader_header* header);
  private:
  const ::org::xresloader::pb::xresloader_header& _internal_header() const;
  ::org::xresloader::pb::xresloader_header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::org::xresloader::pb::xresloader_header* header);
  ::org::xresloader::pb::xresloader_header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:org.xresloader.pb.xresloader_datablocks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_block_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_message_type_;
    ::org::xresloader::pb::xresloader_header* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_pb_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// xresloader_data_source

// optional string file = 1;
inline bool xresloader_data_source::_internal_has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool xresloader_data_source::has_file() const {
  return _internal_has_file();
}
inline void xresloader_data_source::clear_file() {
  _impl_.file_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& xresloader_data_source::file() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_data_source.file)
  return _internal_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void xresloader_data_source::set_file(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_data_source.file)
}
inline std::string* xresloader_data_source::mutable_file() {
  std::string* _s = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_data_source.file)
  return _s;
}
inline const std::string& xresloader_data_source::_internal_file() const {
  return _impl_.file_.Get();
}
inline void xresloader_data_source::_internal_set_file(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_.Set(value, GetArenaForAllocation());
}
inline std::string* xresloader_data_source::_internal_mutable_file() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_.Mutable(GetArenaForAllocation());
}
inline std::string* xresloader_data_source::release_file() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_data_source.file)
  if (!_internal_has_file()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void xresloader_data_source::set_allocated_file(std::string* file) {
  if (file != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_.SetAllocated(file, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_.IsDefault()) {
    _impl_.file_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_data_source.file)
}

// optional string sheet = 2;
inline bool xresloader_data_source::_internal_has_sheet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool xresloader_data_source::has_sheet() const {
  return _internal_has_sheet();
}
inline void xresloader_data_source::clear_sheet() {
  _impl_.sheet_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& xresloader_data_source::sheet() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_data_source.sheet)
  return _internal_sheet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void xresloader_data_source::set_sheet(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.sheet_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_data_source.sheet)
}
inline std::string* xresloader_data_source::mutable_sheet() {
  std::string* _s = _internal_mutable_sheet();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_data_source.sheet)
  return _s;
}
inline const std::string& xresloader_data_source::_internal_sheet() const {
  return _impl_.sheet_.Get();
}
inline void xresloader_data_source::_internal_set_sheet(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sheet_.Set(value, GetArenaForAllocation());
}
inline std::string* xresloader_data_source::_internal_mutable_sheet() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sheet_.Mutable(GetArenaForAllocation());
}
inline std::string* xresloader_data_source::release_sheet() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_data_source.sheet)
  if (!_internal_has_sheet()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.sheet_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sheet_.IsDefault()) {
    _impl_.sheet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void xresloader_data_source::set_allocated_sheet(std::string* sheet) {
  if (sheet != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sheet_.SetAllocated(sheet, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sheet_.IsDefault()) {
    _impl_.sheet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_data_source.sheet)
}

// -------------------------------------------------------------------

// xresloader_header

// optional string xres_ver = 1;
inline bool xresloader_header::_internal_has_xres_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool xresloader_header::has_xres_ver() const {
  return _internal_has_xres_ver();
}
inline void xresloader_header::clear_xres_ver() {
  _impl_.xres_ver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& xresloader_header::xres_ver() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_header.xres_ver)
  return _internal_xres_ver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void xresloader_header::set_xres_ver(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.xres_ver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_header.xres_ver)
}
inline std::string* xresloader_header::mutable_xres_ver() {
  std::string* _s = _internal_mutable_xres_ver();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_header.xres_ver)
  return _s;
}
inline const std::string& xresloader_header::_internal_xres_ver() const {
  return _impl_.xres_ver_.Get();
}
inline void xresloader_header::_internal_set_xres_ver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.xres_ver_.Set(value, GetArenaForAllocation());
}
inline std::string* xresloader_header::_internal_mutable_xres_ver() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.xres_ver_.Mutable(GetArenaForAllocation());
}
inline std::string* xresloader_header::release_xres_ver() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_header.xres_ver)
  if (!_internal_has_xres_ver()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.xres_ver_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.xres_ver_.IsDefault()) {
    _impl_.xres_ver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void xresloader_header::set_allocated_xres_ver(std::string* xres_ver) {
  if (xres_ver != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.xres_ver_.SetAllocated(xres_ver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.xres_ver_.IsDefault()) {
    _impl_.xres_ver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_header.xres_ver)
}

// optional string data_ver = 2;
inline bool xresloader_header::_internal_has_data_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool xresloader_header::has_data_ver() const {
  return _internal_has_data_ver();
}
inline void xresloader_header::clear_data_ver() {
  _impl_.data_ver_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& xresloader_header::data_ver() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_header.data_ver)
  return _internal_data_ver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void xresloader_header::set_data_ver(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.data_ver_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_header.data_ver)
}
inline std::string* xresloader_header::mutable_data_ver() {
  std::string* _s = _internal_mutable_data_ver();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_header.data_ver)
  return _s;
}
inline const std::string& xresloader_header::_internal_data_ver() const {
  return _impl_.data_ver_.Get();
}
inline void xresloader_header::_internal_set_data_ver(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_ver_.Set(value, GetArenaForAllocation());
}
inline std::string* xresloader_header::_internal_mutable_data_ver() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.data_ver_.Mutable(GetArenaForAllocation());
}
inline std::string* xresloader_header::release_data_ver() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_header.data_ver)
  if (!_internal_has_data_ver()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.data_ver_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_ver_.IsDefault()) {
    _impl_.data_ver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void xresloader_header::set_allocated_data_ver(std::string* data_ver) {
  if (data_ver != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_ver_.SetAllocated(data_ver, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_ver_.IsDefault()) {
    _impl_.data_ver_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_header.data_ver)
}

// required uint32 count = 3;
inline bool xresloader_header::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool xresloader_header::has_count() const {
  return _internal_has_count();
}
inline void xresloader_header::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t xresloader_header::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t xresloader_header::count() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_header.count)
  return _internal_count();
}
inline void xresloader_header::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.count_ = value;
}
inline void xresloader_header::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_header.count)
}

// required string hash_code = 4;
inline bool xresloader_header::_internal_has_hash_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool xresloader_header::has_hash_code() const {
  return _internal_has_hash_code();
}
inline void xresloader_header::clear_hash_code() {
  _impl_.hash_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& xresloader_header::hash_code() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_header.hash_code)
  return _internal_hash_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void xresloader_header::set_hash_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.hash_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_header.hash_code)
}
inline std::string* xresloader_header::mutable_hash_code() {
  std::string* _s = _internal_mutable_hash_code();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_header.hash_code)
  return _s;
}
inline const std::string& xresloader_header::_internal_hash_code() const {
  return _impl_.hash_code_.Get();
}
inline void xresloader_header::_internal_set_hash_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hash_code_.Set(value, GetArenaForAllocation());
}
inline std::string* xresloader_header::_internal_mutable_hash_code() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.hash_code_.Mutable(GetArenaForAllocation());
}
inline std::string* xresloader_header::release_hash_code() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_header.hash_code)
  if (!_internal_has_hash_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.hash_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_code_.IsDefault()) {
    _impl_.hash_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void xresloader_header::set_allocated_hash_code(std::string* hash_code) {
  if (hash_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.hash_code_.SetAllocated(hash_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hash_code_.IsDefault()) {
    _impl_.hash_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_header.hash_code)
}

// optional string description = 5;
inline bool xresloader_header::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool xresloader_header::has_description() const {
  return _internal_has_description();
}
inline void xresloader_header::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& xresloader_header::description() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_header.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void xresloader_header::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_header.description)
}
inline std::string* xresloader_header::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_header.description)
  return _s;
}
inline const std::string& xresloader_header::_internal_description() const {
  return _impl_.description_.Get();
}
inline void xresloader_header::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* xresloader_header::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* xresloader_header::release_description() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_header.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void xresloader_header::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_header.description)
}

// repeated .org.xresloader.pb.xresloader_data_source data_source = 11;
inline int xresloader_header::_internal_data_source_size() const {
  return _impl_.data_source_.size();
}
inline int xresloader_header::data_source_size() const {
  return _internal_data_source_size();
}
inline void xresloader_header::clear_data_source() {
  _impl_.data_source_.Clear();
}
inline ::org::xresloader::pb::xresloader_data_source* xresloader_header::mutable_data_source(int index) {
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_header.data_source)
  return _impl_.data_source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xresloader::pb::xresloader_data_source >*
xresloader_header::mutable_data_source() {
  // @@protoc_insertion_point(field_mutable_list:org.xresloader.pb.xresloader_header.data_source)
  return &_impl_.data_source_;
}
inline const ::org::xresloader::pb::xresloader_data_source& xresloader_header::_internal_data_source(int index) const {
  return _impl_.data_source_.Get(index);
}
inline const ::org::xresloader::pb::xresloader_data_source& xresloader_header::data_source(int index) const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_header.data_source)
  return _internal_data_source(index);
}
inline ::org::xresloader::pb::xresloader_data_source* xresloader_header::_internal_add_data_source() {
  return _impl_.data_source_.Add();
}
inline ::org::xresloader::pb::xresloader_data_source* xresloader_header::add_data_source() {
  ::org::xresloader::pb::xresloader_data_source* _add = _internal_add_data_source();
  // @@protoc_insertion_point(field_add:org.xresloader.pb.xresloader_header.data_source)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::org::xresloader::pb::xresloader_data_source >&
xresloader_header::data_source() const {
  // @@protoc_insertion_point(field_list:org.xresloader.pb.xresloader_header.data_source)
  return _impl_.data_source_;
}

// -------------------------------------------------------------------

// xresloader_datablocks

// optional .org.xresloader.pb.xresloader_header header = 1;
inline bool xresloader_datablocks::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool xresloader_datablocks::has_header() const {
  return _internal_has_header();
}
inline void xresloader_datablocks::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::org::xresloader::pb::xresloader_header& xresloader_datablocks::_internal_header() const {
  const ::org::xresloader::pb::xresloader_header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::org::xresloader::pb::xresloader_header&>(
      ::org::xresloader::pb::_xresloader_header_default_instance_);
}
inline const ::org::xresloader::pb::xresloader_header& xresloader_datablocks::header() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_datablocks.header)
  return _internal_header();
}
inline void xresloader_datablocks::unsafe_arena_set_allocated_header(
    ::org::xresloader::pb::xresloader_header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:org.xresloader.pb.xresloader_datablocks.header)
}
inline ::org::xresloader::pb::xresloader_header* xresloader_datablocks::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::org::xresloader::pb::xresloader_header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::org::xresloader::pb::xresloader_header* xresloader_datablocks::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_datablocks.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::org::xresloader::pb::xresloader_header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::org::xresloader::pb::xresloader_header* xresloader_datablocks::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::org::xresloader::pb::xresloader_header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::org::xresloader::pb::xresloader_header* xresloader_datablocks::mutable_header() {
  ::org::xresloader::pb::xresloader_header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_datablocks.header)
  return _msg;
}
inline void xresloader_datablocks::set_allocated_header(::org::xresloader::pb::xresloader_header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_datablocks.header)
}

// repeated bytes data_block = 2;
inline int xresloader_datablocks::_internal_data_block_size() const {
  return _impl_.data_block_.size();
}
inline int xresloader_datablocks::data_block_size() const {
  return _internal_data_block_size();
}
inline void xresloader_datablocks::clear_data_block() {
  _impl_.data_block_.Clear();
}
inline std::string* xresloader_datablocks::add_data_block() {
  std::string* _s = _internal_add_data_block();
  // @@protoc_insertion_point(field_add_mutable:org.xresloader.pb.xresloader_datablocks.data_block)
  return _s;
}
inline const std::string& xresloader_datablocks::_internal_data_block(int index) const {
  return _impl_.data_block_.Get(index);
}
inline const std::string& xresloader_datablocks::data_block(int index) const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_datablocks.data_block)
  return _internal_data_block(index);
}
inline std::string* xresloader_datablocks::mutable_data_block(int index) {
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_datablocks.data_block)
  return _impl_.data_block_.Mutable(index);
}
inline void xresloader_datablocks::set_data_block(int index, const std::string& value) {
  _impl_.data_block_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline void xresloader_datablocks::set_data_block(int index, std::string&& value) {
  _impl_.data_block_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline void xresloader_datablocks::set_data_block(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_block_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline void xresloader_datablocks::set_data_block(int index, const void* value, size_t size) {
  _impl_.data_block_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline std::string* xresloader_datablocks::_internal_add_data_block() {
  return _impl_.data_block_.Add();
}
inline void xresloader_datablocks::add_data_block(const std::string& value) {
  _impl_.data_block_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline void xresloader_datablocks::add_data_block(std::string&& value) {
  _impl_.data_block_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline void xresloader_datablocks::add_data_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_block_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline void xresloader_datablocks::add_data_block(const void* value, size_t size) {
  _impl_.data_block_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.xresloader.pb.xresloader_datablocks.data_block)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
xresloader_datablocks::data_block() const {
  // @@protoc_insertion_point(field_list:org.xresloader.pb.xresloader_datablocks.data_block)
  return _impl_.data_block_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
xresloader_datablocks::mutable_data_block() {
  // @@protoc_insertion_point(field_mutable_list:org.xresloader.pb.xresloader_datablocks.data_block)
  return &_impl_.data_block_;
}

// optional string data_message_type = 3;
inline bool xresloader_datablocks::_internal_has_data_message_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool xresloader_datablocks::has_data_message_type() const {
  return _internal_has_data_message_type();
}
inline void xresloader_datablocks::clear_data_message_type() {
  _impl_.data_message_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& xresloader_datablocks::data_message_type() const {
  // @@protoc_insertion_point(field_get:org.xresloader.pb.xresloader_datablocks.data_message_type)
  return _internal_data_message_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void xresloader_datablocks::set_data_message_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_message_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:org.xresloader.pb.xresloader_datablocks.data_message_type)
}
inline std::string* xresloader_datablocks::mutable_data_message_type() {
  std::string* _s = _internal_mutable_data_message_type();
  // @@protoc_insertion_point(field_mutable:org.xresloader.pb.xresloader_datablocks.data_message_type)
  return _s;
}
inline const std::string& xresloader_datablocks::_internal_data_message_type() const {
  return _impl_.data_message_type_.Get();
}
inline void xresloader_datablocks::_internal_set_data_message_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_message_type_.Set(value, GetArenaForAllocation());
}
inline std::string* xresloader_datablocks::_internal_mutable_data_message_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_message_type_.Mutable(GetArenaForAllocation());
}
inline std::string* xresloader_datablocks::release_data_message_type() {
  // @@protoc_insertion_point(field_release:org.xresloader.pb.xresloader_datablocks.data_message_type)
  if (!_internal_has_data_message_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_message_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_message_type_.IsDefault()) {
    _impl_.data_message_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void xresloader_datablocks::set_allocated_data_message_type(std::string* data_message_type) {
  if (data_message_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_message_type_.SetAllocated(data_message_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_message_type_.IsDefault()) {
    _impl_.data_message_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:org.xresloader.pb.xresloader_datablocks.data_message_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace xresloader
}  // namespace org

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_5fheader_2eproto
