// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kind.proto
// Protobuf C++ Version: 5.27.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_kind_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_kind_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "xresloader.pb.h"
#include "xresloader_ue.pb.h"
#include "dep_level2.pb.h"
#include "dependency.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kind_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kind_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kind_2eproto;
class arr_in_arr;
struct arr_in_arrDefaultTypeInternal;
extern arr_in_arrDefaultTypeInternal _arr_in_arr_default_instance_;
class arr_in_arr_cfg;
struct arr_in_arr_cfgDefaultTypeInternal;
extern arr_in_arr_cfgDefaultTypeInternal _arr_in_arr_cfg_default_instance_;
class arr_in_arr_cfg_TestMapIsEntry_DoNotUse;
struct arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal;
extern arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_;
class arr_in_arr_cfg_TestMapSmEntry_DoNotUse;
struct arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal;
extern arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_;
class combine_id;
struct combine_idDefaultTypeInternal;
extern combine_idDefaultTypeInternal _combine_id_default_instance_;
class event_cfg;
struct event_cfgDefaultTypeInternal;
extern event_cfgDefaultTypeInternal _event_cfg_default_instance_;
class event_reward_item;
struct event_reward_itemDefaultTypeInternal;
extern event_reward_itemDefaultTypeInternal _event_reward_item_default_instance_;
class event_rule_item;
struct event_rule_itemDefaultTypeInternal;
extern event_rule_itemDefaultTypeInternal _event_rule_item_default_instance_;
class keep_or_strip_empty_list_cfg;
struct keep_or_strip_empty_list_cfgDefaultTypeInternal;
extern keep_or_strip_empty_list_cfgDefaultTypeInternal _keep_or_strip_empty_list_cfg_default_instance_;
class large_file_test;
struct large_file_testDefaultTypeInternal;
extern large_file_testDefaultTypeInternal _large_file_test_default_instance_;
class process_by_script;
struct process_by_scriptDefaultTypeInternal;
extern process_by_scriptDefaultTypeInternal _process_by_script_default_instance_;
class process_by_script_MapU32StringEntry_DoNotUse;
struct process_by_script_MapU32StringEntry_DoNotUseDefaultTypeInternal;
extern process_by_script_MapU32StringEntry_DoNotUseDefaultTypeInternal _process_by_script_MapU32StringEntry_DoNotUse_default_instance_;
class process_by_script_TestMapIsEntry_DoNotUse;
struct process_by_script_TestMapIsEntry_DoNotUseDefaultTypeInternal;
extern process_by_script_TestMapIsEntry_DoNotUseDefaultTypeInternal _process_by_script_TestMapIsEntry_DoNotUse_default_instance_;
class process_by_script_TestMapSmEntry_DoNotUse;
struct process_by_script_TestMapSmEntry_DoNotUseDefaultTypeInternal;
extern process_by_script_TestMapSmEntry_DoNotUseDefaultTypeInternal _process_by_script_TestMapSmEntry_DoNotUse_default_instance_;
class role_cfg;
struct role_cfgDefaultTypeInternal;
extern role_cfgDefaultTypeInternal _role_cfg_default_instance_;
class role_upgrade_cfg;
struct role_upgrade_cfgDefaultTypeInternal;
extern role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
class test_msg_verifier;
struct test_msg_verifierDefaultTypeInternal;
extern test_msg_verifierDefaultTypeInternal _test_msg_verifier_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class test_msg_verifier final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test_msg_verifier) */ {
 public:
  inline test_msg_verifier() : test_msg_verifier(nullptr) {}
  ~test_msg_verifier() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR test_msg_verifier(
      ::google::protobuf::internal::ConstantInitialized);

  inline test_msg_verifier(const test_msg_verifier& from) : test_msg_verifier(nullptr, from) {}
  inline test_msg_verifier(test_msg_verifier&& from) noexcept
      : test_msg_verifier(nullptr, std::move(from)) {}
  inline test_msg_verifier& operator=(const test_msg_verifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline test_msg_verifier& operator=(test_msg_verifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const test_msg_verifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const test_msg_verifier* internal_default_instance() {
    return reinterpret_cast<const test_msg_verifier*>(
        &_test_msg_verifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(test_msg_verifier& a, test_msg_verifier& b) { a.Swap(&b); }
  inline void Swap(test_msg_verifier* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(test_msg_verifier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  test_msg_verifier* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<test_msg_verifier>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const test_msg_verifier& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const test_msg_verifier& from) { test_msg_verifier::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(test_msg_verifier* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "test_msg_verifier"; }

 protected:
  explicit test_msg_verifier(::google::protobuf::Arena* arena);
  test_msg_verifier(::google::protobuf::Arena* arena, const test_msg_verifier& from);
  test_msg_verifier(::google::protobuf::Arena* arena, test_msg_verifier&& from) noexcept
      : test_msg_verifier(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestId1FieldNumber = 10001,
    kTestId2FieldNumber = 10002,
    kTestId3FieldNumber = 10003,
  };
  // optional uint32 test_id_1 = 10001;
  bool has_test_id_1() const;
  void clear_test_id_1() ;
  ::uint32_t test_id_1() const;
  void set_test_id_1(::uint32_t value);

  private:
  ::uint32_t _internal_test_id_1() const;
  void _internal_set_test_id_1(::uint32_t value);

  public:
  // optional uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
  bool has_test_id_2() const;
  void clear_test_id_2() ;
  ::uint32_t test_id_2() const;
  void set_test_id_2(::uint32_t value);

  private:
  ::uint32_t _internal_test_id_2() const;
  void _internal_set_test_id_2(::uint32_t value);

  public:
  // optional uint32 test_id_3 = 10003 [(.org.xresloader.field_allow_missing_in_plain_mode) = true];
  bool has_test_id_3() const;
  void clear_test_id_3() ;
  ::uint32_t test_id_3() const;
  void set_test_id_3(::uint32_t value);

  private:
  ::uint32_t _internal_test_id_3() const;
  void _internal_set_test_id_3(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test_msg_verifier)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      0, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_test_msg_verifier_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const test_msg_verifier& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t test_id_1_;
    ::uint32_t test_id_2_;
    ::uint32_t test_id_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class role_upgrade_cfg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:role_upgrade_cfg) */ {
 public:
  inline role_upgrade_cfg() : role_upgrade_cfg(nullptr) {}
  ~role_upgrade_cfg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR role_upgrade_cfg(
      ::google::protobuf::internal::ConstantInitialized);

  inline role_upgrade_cfg(const role_upgrade_cfg& from) : role_upgrade_cfg(nullptr, from) {}
  inline role_upgrade_cfg(role_upgrade_cfg&& from) noexcept
      : role_upgrade_cfg(nullptr, std::move(from)) {}
  inline role_upgrade_cfg& operator=(const role_upgrade_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_upgrade_cfg& operator=(role_upgrade_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const role_upgrade_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const role_upgrade_cfg* internal_default_instance() {
    return reinterpret_cast<const role_upgrade_cfg*>(
        &_role_upgrade_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(role_upgrade_cfg& a, role_upgrade_cfg& b) { a.Swap(&b); }
  inline void Swap(role_upgrade_cfg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(role_upgrade_cfg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  role_upgrade_cfg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<role_upgrade_cfg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const role_upgrade_cfg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const role_upgrade_cfg& from) { role_upgrade_cfg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(role_upgrade_cfg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "role_upgrade_cfg"; }

 protected:
  explicit role_upgrade_cfg(::google::protobuf::Arena* arena);
  role_upgrade_cfg(::google::protobuf::Arena* arena, const role_upgrade_cfg& from);
  role_upgrade_cfg(::google::protobuf::Arena* arena, role_upgrade_cfg&& from) noexcept
      : role_upgrade_cfg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kCostValueFieldNumber = 4,
    kCostTypeFieldNumber = 3,
    kScoreAddFieldNumber = 5,
  };
  // optional uint32 Id = 1 [(.org.xresloader.validator) = "custom_rule3", (.org.xresloader.ue.key_tag) = 1000];
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
  bool has_level() const;
  void clear_level() ;
  ::uint32_t level() const;
  void set_level(::uint32_t value);

  private:
  ::uint32_t _internal_level() const;
  void _internal_set_level(::uint32_t value);

  public:
  // optional int64 CostValue = 4;
  bool has_costvalue() const;
  void clear_costvalue() ;
  ::int64_t costvalue() const;
  void set_costvalue(::int64_t value);

  private:
  ::int64_t _internal_costvalue() const;
  void _internal_set_costvalue(::int64_t value);

  public:
  // optional int32 CostType = 3 [(.org.xresloader.validator) = "custom_rule1", (.org.xresloader.field_description) = "Refer to cost_type"];
  bool has_costtype() const;
  void clear_costtype() ;
  ::int32_t costtype() const;
  void set_costtype(::int32_t value);

  private:
  ::int32_t _internal_costtype() const;
  void _internal_set_costtype(::int32_t value);

  public:
  // optional int32 ScoreAdd = 5;
  bool has_scoreadd() const;
  void clear_scoreadd() ;
  ::int32_t scoreadd() const;
  void set_scoreadd(::int32_t value);

  private:
  ::int32_t _internal_scoreadd() const;
  void _internal_set_scoreadd(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:role_upgrade_cfg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_role_upgrade_cfg_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const role_upgrade_cfg& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t id_;
    ::uint32_t level_;
    ::int64_t costvalue_;
    ::int32_t costtype_;
    ::int32_t scoreadd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class process_by_script_TestMapIsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          process_by_script_TestMapIsEntry_DoNotUse, ::int32_t, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      process_by_script_TestMapIsEntry_DoNotUse, ::int32_t, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  process_by_script_TestMapIsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR process_by_script_TestMapIsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit process_by_script_TestMapIsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const process_by_script_TestMapIsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const process_by_script_TestMapIsEntry_DoNotUse*>(
        &_process_by_script_TestMapIsEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class process_by_script_MapU32StringEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          process_by_script_MapU32StringEntry_DoNotUse, ::uint32_t, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      process_by_script_MapU32StringEntry_DoNotUse, ::uint32_t, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  process_by_script_MapU32StringEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR process_by_script_MapU32StringEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit process_by_script_MapU32StringEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const process_by_script_MapU32StringEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const process_by_script_MapU32StringEntry_DoNotUse*>(
        &_process_by_script_MapU32StringEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class event_rule_item final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:event_rule_item) */ {
 public:
  inline event_rule_item() : event_rule_item(nullptr) {}
  ~event_rule_item() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR event_rule_item(
      ::google::protobuf::internal::ConstantInitialized);

  inline event_rule_item(const event_rule_item& from) : event_rule_item(nullptr, from) {}
  inline event_rule_item(event_rule_item&& from) noexcept
      : event_rule_item(nullptr, std::move(from)) {}
  inline event_rule_item& operator=(const event_rule_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_rule_item& operator=(event_rule_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const event_rule_item& default_instance() {
    return *internal_default_instance();
  }
  enum NestedCase {
    kNestedNote = 11,
    kNestedEnumType = 12,
    NESTED_NOT_SET = 0,
  };
  static inline const event_rule_item* internal_default_instance() {
    return reinterpret_cast<const event_rule_item*>(
        &_event_rule_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(event_rule_item& a, event_rule_item& b) { a.Swap(&b); }
  inline void Swap(event_rule_item* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event_rule_item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  event_rule_item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<event_rule_item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const event_rule_item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const event_rule_item& from) { event_rule_item::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(event_rule_item* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "event_rule_item"; }

 protected:
  explicit event_rule_item(::google::protobuf::Arena* arena);
  event_rule_item(::google::protobuf::Arena* arena, const event_rule_item& from);
  event_rule_item(::google::protobuf::Arena* arena, event_rule_item&& from) noexcept
      : event_rule_item(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRuleIdFieldNumber = 1,
    kRuleParamFieldNumber = 2,
    kNestedNoteFieldNumber = 11,
    kNestedEnumTypeFieldNumber = 12,
  };
  // optional uint32 rule_id = 1;
  bool has_rule_id() const;
  void clear_rule_id() ;
  ::uint32_t rule_id() const;
  void set_rule_id(::uint32_t value);

  private:
  ::uint32_t _internal_rule_id() const;
  void _internal_set_rule_id(::uint32_t value);

  public:
  // optional uint32 rule_param = 2;
  bool has_rule_param() const;
  void clear_rule_param() ;
  ::uint32_t rule_param() const;
  void set_rule_param(::uint32_t value);

  private:
  ::uint32_t _internal_rule_param() const;
  void _internal_set_rule_param(::uint32_t value);

  public:
  // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  bool has_nested_note() const;
  void clear_nested_note() ;
  const std::string& nested_note() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nested_note(Arg_&& arg, Args_... args);
  std::string* mutable_nested_note();
  PROTOBUF_NODISCARD std::string* release_nested_note();
  void set_allocated_nested_note(std::string* value);

  private:
  const std::string& _internal_nested_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nested_note(
      const std::string& value);
  std::string* _internal_mutable_nested_note();

  public:
  // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  bool has_nested_enum_type() const;
  void clear_nested_enum_type() ;
  ::cost_type nested_enum_type() const;
  void set_nested_enum_type(::cost_type value);

  private:
  ::cost_type _internal_nested_enum_type() const;
  void _internal_set_nested_enum_type(::cost_type value);

  public:
  void clear_nested();
  NestedCase nested_case() const;
  // @@protoc_insertion_point(class_scope:event_rule_item)
 private:
  class _Internal;
  void set_has_nested_note();
  void set_has_nested_enum_type();
  inline bool has_nested() const;
  inline void clear_has_nested();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 1,
      35, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_event_rule_item_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const event_rule_item& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t rule_id_;
    ::uint32_t rule_param_;
    union NestedUnion {
      constexpr NestedUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr nested_note_;
      int nested_enum_type_;
    } nested_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class event_reward_item final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:event_reward_item) */ {
 public:
  inline event_reward_item() : event_reward_item(nullptr) {}
  ~event_reward_item() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR event_reward_item(
      ::google::protobuf::internal::ConstantInitialized);

  inline event_reward_item(const event_reward_item& from) : event_reward_item(nullptr, from) {}
  inline event_reward_item(event_reward_item&& from) noexcept
      : event_reward_item(nullptr, std::move(from)) {}
  inline event_reward_item& operator=(const event_reward_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_reward_item& operator=(event_reward_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const event_reward_item& default_instance() {
    return *internal_default_instance();
  }
  enum NestedCase {
    kNestedNote = 11,
    kNestedEnumType = 12,
    NESTED_NOT_SET = 0,
  };
  static inline const event_reward_item* internal_default_instance() {
    return reinterpret_cast<const event_reward_item*>(
        &_event_reward_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(event_reward_item& a, event_reward_item& b) { a.Swap(&b); }
  inline void Swap(event_reward_item* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event_reward_item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  event_reward_item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<event_reward_item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const event_reward_item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const event_reward_item& from) { event_reward_item::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(event_reward_item* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "event_reward_item"; }

 protected:
  explicit event_reward_item(::google::protobuf::Arena* arena);
  event_reward_item(::google::protobuf::Arena* arena, const event_reward_item& from);
  event_reward_item(::google::protobuf::Arena* arena, event_reward_item&& from) noexcept
      : event_reward_item(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kItemIdFieldNumber = 1,
    kItemCountFieldNumber = 2,
    kNestedNoteFieldNumber = 11,
    kNestedEnumTypeFieldNumber = 12,
  };
  // optional uint32 item_id = 1;
  bool has_item_id() const;
  void clear_item_id() ;
  ::uint32_t item_id() const;
  void set_item_id(::uint32_t value);

  private:
  ::uint32_t _internal_item_id() const;
  void _internal_set_item_id(::uint32_t value);

  public:
  // optional uint32 item_count = 2;
  bool has_item_count() const;
  void clear_item_count() ;
  ::uint32_t item_count() const;
  void set_item_count(::uint32_t value);

  private:
  ::uint32_t _internal_item_count() const;
  void _internal_set_item_count(::uint32_t value);

  public:
  // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  bool has_nested_note() const;
  void clear_nested_note() ;
  const std::string& nested_note() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nested_note(Arg_&& arg, Args_... args);
  std::string* mutable_nested_note();
  PROTOBUF_NODISCARD std::string* release_nested_note();
  void set_allocated_nested_note(std::string* value);

  private:
  const std::string& _internal_nested_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nested_note(
      const std::string& value);
  std::string* _internal_mutable_nested_note();

  public:
  // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  bool has_nested_enum_type() const;
  void clear_nested_enum_type() ;
  ::cost_type nested_enum_type() const;
  void set_nested_enum_type(::cost_type value);

  private:
  ::cost_type _internal_nested_enum_type() const;
  void _internal_set_nested_enum_type(::cost_type value);

  public:
  void clear_nested();
  NestedCase nested_case() const;
  // @@protoc_insertion_point(class_scope:event_reward_item)
 private:
  class _Internal;
  void set_has_nested_note();
  void set_has_nested_enum_type();
  inline bool has_nested() const;
  inline void clear_has_nested();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 4, 1,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_event_reward_item_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const event_reward_item& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t item_id_;
    ::uint32_t item_count_;
    union NestedUnion {
      constexpr NestedUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr nested_note_;
      int nested_enum_type_;
    } nested_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class combine_id final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:combine_id) */ {
 public:
  inline combine_id() : combine_id(nullptr) {}
  ~combine_id() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR combine_id(
      ::google::protobuf::internal::ConstantInitialized);

  inline combine_id(const combine_id& from) : combine_id(nullptr, from) {}
  inline combine_id(combine_id&& from) noexcept
      : combine_id(nullptr, std::move(from)) {}
  inline combine_id& operator=(const combine_id& from) {
    CopyFrom(from);
    return *this;
  }
  inline combine_id& operator=(combine_id&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const combine_id& default_instance() {
    return *internal_default_instance();
  }
  static inline const combine_id* internal_default_instance() {
    return reinterpret_cast<const combine_id*>(
        &_combine_id_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(combine_id& a, combine_id& b) { a.Swap(&b); }
  inline void Swap(combine_id* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(combine_id* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  combine_id* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<combine_id>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const combine_id& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const combine_id& from) { combine_id::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(combine_id* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "combine_id"; }

 protected:
  explicit combine_id(::google::protobuf::Arena* arena);
  combine_id(::google::protobuf::Arena* arena, const combine_id& from);
  combine_id(::google::protobuf::Arena* arena, combine_id&& from) noexcept
      : combine_id(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPrefixFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional uint32 prefix = 1;
  bool has_prefix() const;
  void clear_prefix() ;
  ::uint32_t prefix() const;
  void set_prefix(::uint32_t value);

  private:
  ::uint32_t _internal_prefix() const;
  void _internal_set_prefix(::uint32_t value);

  public:
  // optional uint32 id = 2 [(.org.xresloader.validator) = "0-99999"];
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:combine_id)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_combine_id_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const combine_id& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t prefix_;
    ::uint32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr_cfg_TestMapIsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          arr_in_arr_cfg_TestMapIsEntry_DoNotUse, ::int32_t, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      arr_in_arr_cfg_TestMapIsEntry_DoNotUse, ::int32_t, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  arr_in_arr_cfg_TestMapIsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapIsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit arr_in_arr_cfg_TestMapIsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const arr_in_arr_cfg_TestMapIsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr_cfg_TestMapIsEntry_DoNotUse*>(
        &_arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:arr_in_arr) */ {
 public:
  inline arr_in_arr() : arr_in_arr(nullptr) {}
  ~arr_in_arr() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR arr_in_arr(
      ::google::protobuf::internal::ConstantInitialized);

  inline arr_in_arr(const arr_in_arr& from) : arr_in_arr(nullptr, from) {}
  inline arr_in_arr(arr_in_arr&& from) noexcept
      : arr_in_arr(nullptr, std::move(from)) {}
  inline arr_in_arr& operator=(const arr_in_arr& from) {
    CopyFrom(from);
    return *this;
  }
  inline arr_in_arr& operator=(arr_in_arr&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const arr_in_arr& default_instance() {
    return *internal_default_instance();
  }
  static inline const arr_in_arr* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr*>(
        &_arr_in_arr_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(arr_in_arr& a, arr_in_arr& b) { a.Swap(&b); }
  inline void Swap(arr_in_arr* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(arr_in_arr* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  arr_in_arr* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<arr_in_arr>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const arr_in_arr& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const arr_in_arr& from) { arr_in_arr::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(arr_in_arr* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "arr_in_arr"; }

 protected:
  explicit arr_in_arr(::google::protobuf::Arena* arena);
  arr_in_arr(::google::protobuf::Arena* arena, const arr_in_arr& from);
  arr_in_arr(::google::protobuf::Arena* arena, arr_in_arr&& from) noexcept
      : arr_in_arr(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIntArrFieldNumber = 2,
    kStrArrFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated int32 int_arr = 2 [packed = true, (.org.xresloader.field_list_strip_option) = LIST_STRIP_NOTHING, (.org.xresloader.field_list_min_size) = "game_const_config.EN_GCC_UNKNOWN", (.org.xresloader.field_list_max_size) = "3"];
  int int_arr_size() const;
  private:
  int _internal_int_arr_size() const;

  public:
  void clear_int_arr() ;
  ::int32_t int_arr(int index) const;
  void set_int_arr(int index, ::int32_t value);
  void add_int_arr(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& int_arr() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_int_arr();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_int_arr() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_int_arr();

  public:
  // repeated string str_arr = 3;
  int str_arr_size() const;
  private:
  int _internal_str_arr_size() const;

  public:
  void clear_str_arr() ;
  const std::string& str_arr(int index) const;
  std::string* mutable_str_arr(int index);
  void set_str_arr(int index, const std::string& value);
  void set_str_arr(int index, std::string&& value);
  void set_str_arr(int index, const char* value);
  void set_str_arr(int index, const char* value, std::size_t size);
  void set_str_arr(int index, absl::string_view value);
  std::string* add_str_arr();
  void add_str_arr(const std::string& value);
  void add_str_arr(std::string&& value);
  void add_str_arr(const char* value);
  void add_str_arr(const char* value, std::size_t size);
  void add_str_arr(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& str_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_str_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_str_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_str_arr();

  public:
  // optional string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:arr_in_arr)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      30, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_arr_in_arr_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const arr_in_arr& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> int_arr_;
    mutable ::google::protobuf::internal::CachedSize _int_arr_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> str_arr_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class process_by_script_TestMapSmEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          process_by_script_TestMapSmEntry_DoNotUse, std::string, ::dep2_cfg,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      process_by_script_TestMapSmEntry_DoNotUse, std::string, ::dep2_cfg,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  process_by_script_TestMapSmEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR process_by_script_TestMapSmEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit process_by_script_TestMapSmEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const process_by_script_TestMapSmEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const process_by_script_TestMapSmEntry_DoNotUse*>(
        &_process_by_script_TestMapSmEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class large_file_test final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:large_file_test) */ {
 public:
  inline large_file_test() : large_file_test(nullptr) {}
  ~large_file_test() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR large_file_test(
      ::google::protobuf::internal::ConstantInitialized);

  inline large_file_test(const large_file_test& from) : large_file_test(nullptr, from) {}
  inline large_file_test(large_file_test&& from) noexcept
      : large_file_test(nullptr, std::move(from)) {}
  inline large_file_test& operator=(const large_file_test& from) {
    CopyFrom(from);
    return *this;
  }
  inline large_file_test& operator=(large_file_test&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const large_file_test& default_instance() {
    return *internal_default_instance();
  }
  static inline const large_file_test* internal_default_instance() {
    return reinterpret_cast<const large_file_test*>(
        &_large_file_test_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(large_file_test& a, large_file_test& b) { a.Swap(&b); }
  inline void Swap(large_file_test* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(large_file_test* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  large_file_test* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<large_file_test>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const large_file_test& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const large_file_test& from) { large_file_test::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(large_file_test* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "large_file_test"; }

 protected:
  explicit large_file_test(::google::protobuf::Arena* arena);
  large_file_test(::google::protobuf::Arena* arena, const large_file_test& from);
  large_file_test(::google::protobuf::Arena* arena, large_file_test&& from) noexcept
      : large_file_test(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSzvalueFieldNumber = 6,
    kIdIdFieldNumber = 7,
    kIdFieldNumber = 1,
    kI32ValueFieldNumber = 2,
    kU64ValueFieldNumber = 3,
    kF64ValueFieldNumber = 4,
    kF32ValueFieldNumber = 5,
  };
  // optional string szvalue = 6;
  bool has_szvalue() const;
  void clear_szvalue() ;
  const std::string& szvalue() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_szvalue(Arg_&& arg, Args_... args);
  std::string* mutable_szvalue();
  PROTOBUF_NODISCARD std::string* release_szvalue();
  void set_allocated_szvalue(std::string* value);

  private:
  const std::string& _internal_szvalue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_szvalue(
      const std::string& value);
  std::string* _internal_mutable_szvalue();

  public:
  // optional .combine_id id_id = 7;
  bool has_id_id() const;
  void clear_id_id() ;
  const ::combine_id& id_id() const;
  PROTOBUF_NODISCARD ::combine_id* release_id_id();
  ::combine_id* mutable_id_id();
  void set_allocated_id_id(::combine_id* value);
  void unsafe_arena_set_allocated_id_id(::combine_id* value);
  ::combine_id* unsafe_arena_release_id_id();

  private:
  const ::combine_id& _internal_id_id() const;
  ::combine_id* _internal_mutable_id_id();

  public:
  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional int32 i32value = 2;
  bool has_i32value() const;
  void clear_i32value() ;
  ::int32_t i32value() const;
  void set_i32value(::int32_t value);

  private:
  ::int32_t _internal_i32value() const;
  void _internal_set_i32value(::int32_t value);

  public:
  // optional uint64 u64value = 3;
  bool has_u64value() const;
  void clear_u64value() ;
  ::uint64_t u64value() const;
  void set_u64value(::uint64_t value);

  private:
  ::uint64_t _internal_u64value() const;
  void _internal_set_u64value(::uint64_t value);

  public:
  // optional double f64value = 4;
  bool has_f64value() const;
  void clear_f64value() ;
  double f64value() const;
  void set_f64value(double value);

  private:
  double _internal_f64value() const;
  void _internal_set_f64value(double value);

  public:
  // optional float f32value = 5;
  bool has_f32value() const;
  void clear_f32value() ;
  float f32value() const;
  void set_f32value(float value);

  private:
  float _internal_f32value() const;
  void _internal_set_f32value(float value);

  public:
  // @@protoc_insertion_point(class_scope:large_file_test)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      31, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_large_file_test_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const large_file_test& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr szvalue_;
    ::combine_id* id_id_;
    ::uint32_t id_;
    ::int32_t i32value_;
    ::uint64_t u64value_;
    double f64value_;
    float f32value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class keep_or_strip_empty_list_cfg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:keep_or_strip_empty_list_cfg) */ {
 public:
  inline keep_or_strip_empty_list_cfg() : keep_or_strip_empty_list_cfg(nullptr) {}
  ~keep_or_strip_empty_list_cfg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR keep_or_strip_empty_list_cfg(
      ::google::protobuf::internal::ConstantInitialized);

  inline keep_or_strip_empty_list_cfg(const keep_or_strip_empty_list_cfg& from) : keep_or_strip_empty_list_cfg(nullptr, from) {}
  inline keep_or_strip_empty_list_cfg(keep_or_strip_empty_list_cfg&& from) noexcept
      : keep_or_strip_empty_list_cfg(nullptr, std::move(from)) {}
  inline keep_or_strip_empty_list_cfg& operator=(const keep_or_strip_empty_list_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline keep_or_strip_empty_list_cfg& operator=(keep_or_strip_empty_list_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const keep_or_strip_empty_list_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const keep_or_strip_empty_list_cfg* internal_default_instance() {
    return reinterpret_cast<const keep_or_strip_empty_list_cfg*>(
        &_keep_or_strip_empty_list_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(keep_or_strip_empty_list_cfg& a, keep_or_strip_empty_list_cfg& b) { a.Swap(&b); }
  inline void Swap(keep_or_strip_empty_list_cfg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keep_or_strip_empty_list_cfg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  keep_or_strip_empty_list_cfg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<keep_or_strip_empty_list_cfg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const keep_or_strip_empty_list_cfg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const keep_or_strip_empty_list_cfg& from) { keep_or_strip_empty_list_cfg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(keep_or_strip_empty_list_cfg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "keep_or_strip_empty_list_cfg"; }

 protected:
  explicit keep_or_strip_empty_list_cfg(::google::protobuf::Arena* arena);
  keep_or_strip_empty_list_cfg(::google::protobuf::Arena* arena, const keep_or_strip_empty_list_cfg& from);
  keep_or_strip_empty_list_cfg(::google::protobuf::Arena* arena, keep_or_strip_empty_list_cfg&& from) noexcept
      : keep_or_strip_empty_list_cfg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kArrayMsgFieldNumber = 2,
    kArrayPlainMsgFieldNumber = 3,
    kArrayInt32FieldNumber = 4,
    kArrayInt64FieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated .dep2_cfg array_msg = 2;
  int array_msg_size() const;
  private:
  int _internal_array_msg_size() const;

  public:
  void clear_array_msg() ;
  ::dep2_cfg* mutable_array_msg(int index);
  ::google::protobuf::RepeatedPtrField<::dep2_cfg>* mutable_array_msg();

  private:
  const ::google::protobuf::RepeatedPtrField<::dep2_cfg>& _internal_array_msg() const;
  ::google::protobuf::RepeatedPtrField<::dep2_cfg>* _internal_mutable_array_msg();
  public:
  const ::dep2_cfg& array_msg(int index) const;
  ::dep2_cfg* add_array_msg();
  const ::google::protobuf::RepeatedPtrField<::dep2_cfg>& array_msg() const;
  // repeated .dep2_cfg array_plain_msg = 3;
  int array_plain_msg_size() const;
  private:
  int _internal_array_plain_msg_size() const;

  public:
  void clear_array_plain_msg() ;
  ::dep2_cfg* mutable_array_plain_msg(int index);
  ::google::protobuf::RepeatedPtrField<::dep2_cfg>* mutable_array_plain_msg();

  private:
  const ::google::protobuf::RepeatedPtrField<::dep2_cfg>& _internal_array_plain_msg() const;
  ::google::protobuf::RepeatedPtrField<::dep2_cfg>* _internal_mutable_array_plain_msg();
  public:
  const ::dep2_cfg& array_plain_msg(int index) const;
  ::dep2_cfg* add_array_plain_msg();
  const ::google::protobuf::RepeatedPtrField<::dep2_cfg>& array_plain_msg() const;
  // repeated int32 array_int32 = 4;
  int array_int32_size() const;
  private:
  int _internal_array_int32_size() const;

  public:
  void clear_array_int32() ;
  ::int32_t array_int32(int index) const;
  void set_array_int32(int index, ::int32_t value);
  void add_array_int32(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& array_int32() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_array_int32();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_array_int32() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_array_int32();

  public:
  // repeated int64 array_int64 = 5;
  int array_int64_size() const;
  private:
  int _internal_array_int64_size() const;

  public:
  void clear_array_int64() ;
  ::int64_t array_int64(int index) const;
  void set_array_int64(int index, ::int64_t value);
  void add_array_int64(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& array_int64() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_array_int64();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_array_int64() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_array_int64();

  public:
  // optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:keep_or_strip_empty_list_cfg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_keep_or_strip_empty_list_cfg_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const keep_or_strip_empty_list_cfg& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::dep2_cfg > array_msg_;
    ::google::protobuf::RepeatedPtrField< ::dep2_cfg > array_plain_msg_;
    ::google::protobuf::RepeatedField<::int32_t> array_int32_;
    ::google::protobuf::RepeatedField<::int64_t> array_int64_;
    ::uint32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class event_cfg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:event_cfg) */ {
 public:
  inline event_cfg() : event_cfg(nullptr) {}
  ~event_cfg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR event_cfg(
      ::google::protobuf::internal::ConstantInitialized);

  inline event_cfg(const event_cfg& from) : event_cfg(nullptr, from) {}
  inline event_cfg(event_cfg&& from) noexcept
      : event_cfg(nullptr, std::move(from)) {}
  inline event_cfg& operator=(const event_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_cfg& operator=(event_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const event_cfg& default_instance() {
    return *internal_default_instance();
  }
  enum RewardCase {
    kItem = 11,
    kUserExp = 12,
    kNote = 13,
    kEnumType = 14,
    REWARD_NOT_SET = 0,
  };
  enum UnlockTypeCase {
    kUserLevel = 51,
    UNLOCK_TYPE_NOT_SET = 0,
  };
  static inline const event_cfg* internal_default_instance() {
    return reinterpret_cast<const event_cfg*>(
        &_event_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(event_cfg& a, event_cfg& b) { a.Swap(&b); }
  inline void Swap(event_cfg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event_cfg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  event_cfg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<event_cfg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const event_cfg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const event_cfg& from) { event_cfg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(event_cfg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "event_cfg"; }

 protected:
  explicit event_cfg(::google::protobuf::Arena* arena);
  event_cfg(::google::protobuf::Arena* arena, const event_cfg& from);
  event_cfg(::google::protobuf::Arena* arena, event_cfg&& from) noexcept
      : event_cfg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestArrFieldNumber = 91,
    kTestEmptyArrFieldNumber = 92,
    kRuleFieldNumber = 6,
    kSpecifyFieldFieldNumber = 7,
    kIdFieldNumber = 1,
    kProcessFieldNumber = 2,
    kItemFieldNumber = 11,
    kUserExpFieldNumber = 12,
    kNoteFieldNumber = 13,
    kEnumTypeFieldNumber = 14,
    kUserLevelFieldNumber = 51,
  };
  // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
  int test_arr_size() const;
  private:
  int _internal_test_arr_size() const;

  public:
  void clear_test_arr() ;
  ::event_rule_item* mutable_test_arr(int index);
  ::google::protobuf::RepeatedPtrField<::event_rule_item>* mutable_test_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::event_rule_item>& _internal_test_arr() const;
  ::google::protobuf::RepeatedPtrField<::event_rule_item>* _internal_mutable_test_arr();
  public:
  const ::event_rule_item& test_arr(int index) const;
  ::event_rule_item* add_test_arr();
  const ::google::protobuf::RepeatedPtrField<::event_rule_item>& test_arr() const;
  // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
  int test_empty_arr_size() const;
  private:
  int _internal_test_empty_arr_size() const;

  public:
  void clear_test_empty_arr() ;
  ::event_rule_item* mutable_test_empty_arr(int index);
  ::google::protobuf::RepeatedPtrField<::event_rule_item>* mutable_test_empty_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::event_rule_item>& _internal_test_empty_arr() const;
  ::google::protobuf::RepeatedPtrField<::event_rule_item>* _internal_mutable_test_empty_arr();
  public:
  const ::event_rule_item& test_empty_arr(int index) const;
  ::event_rule_item* add_test_empty_arr();
  const ::google::protobuf::RepeatedPtrField<::event_rule_item>& test_empty_arr() const;
  // optional .event_rule_item rule = 6;
  bool has_rule() const;
  void clear_rule() ;
  const ::event_rule_item& rule() const;
  PROTOBUF_NODISCARD ::event_rule_item* release_rule();
  ::event_rule_item* mutable_rule();
  void set_allocated_rule(::event_rule_item* value);
  void unsafe_arena_set_allocated_rule(::event_rule_item* value);
  ::event_rule_item* unsafe_arena_release_rule();

  private:
  const ::event_rule_item& _internal_rule() const;
  ::event_rule_item* _internal_mutable_rule();

  public:
  // optional .event_rule_item specify_field = 7;
  bool has_specify_field() const;
  void clear_specify_field() ;
  const ::event_rule_item& specify_field() const;
  PROTOBUF_NODISCARD ::event_rule_item* release_specify_field();
  ::event_rule_item* mutable_specify_field();
  void set_allocated_specify_field(::event_rule_item* value);
  void unsafe_arena_set_allocated_specify_field(::event_rule_item* value);
  ::event_rule_item* unsafe_arena_release_specify_field();

  private:
  const ::event_rule_item& _internal_specify_field() const;
  ::event_rule_item* _internal_mutable_specify_field();

  public:
  // optional uint32 id = 1 [(.org.xresloader.validator) = "custom_rule4", (.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 100];
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 process = 2 [(.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 1];
  bool has_process() const;
  void clear_process() ;
  ::uint32_t process() const;
  void set_process(::uint32_t value);

  private:
  ::uint32_t _internal_process() const;
  void _internal_set_process(::uint32_t value);

  public:
  // .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
  bool has_item() const;
  private:
  bool _internal_has_item() const;

  public:
  void clear_item() ;
  const ::event_reward_item& item() const;
  PROTOBUF_NODISCARD ::event_reward_item* release_item();
  ::event_reward_item* mutable_item();
  void set_allocated_item(::event_reward_item* value);
  void unsafe_arena_set_allocated_item(::event_reward_item* value);
  ::event_reward_item* unsafe_arena_release_item();

  private:
  const ::event_reward_item& _internal_item() const;
  ::event_reward_item* _internal_mutable_item();

  public:
  // int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
  bool has_user_exp() const;
  void clear_user_exp() ;
  ::int64_t user_exp() const;
  void set_user_exp(::int64_t value);

  private:
  ::int64_t _internal_user_exp() const;
  void _internal_set_user_exp(::int64_t value);

  public:
  // string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  bool has_note() const;
  void clear_note() ;
  const std::string& note() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_note(Arg_&& arg, Args_... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* value);

  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(
      const std::string& value);
  std::string* _internal_mutable_note();

  public:
  // .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  bool has_enum_type() const;
  void clear_enum_type() ;
  ::cost_type enum_type() const;
  void set_enum_type(::cost_type value);

  private:
  ::cost_type _internal_enum_type() const;
  void _internal_set_enum_type(::cost_type value);

  public:
  // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
  bool has_user_level() const;
  void clear_user_level() ;
  ::uint32_t user_level() const;
  void set_user_level(::uint32_t value);

  private:
  ::uint32_t _internal_user_level() const;
  void _internal_set_user_level(::uint32_t value);

  public:
  void clear_reward();
  RewardCase reward_case() const;
  void clear_unlock_type();
  UnlockTypeCase unlock_type_case() const;
  // @@protoc_insertion_point(class_scope:event_cfg)
 private:
  class _Internal;
  void set_has_item();
  void set_has_user_exp();
  void set_has_note();
  void set_has_enum_type();
  void set_has_user_level();
  inline bool has_reward() const;
  inline void clear_has_reward();
  inline bool has_unlock_type() const;
  inline void clear_has_unlock_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 11, 6,
      30, 11>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_event_cfg_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const event_cfg& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::event_rule_item > test_arr_;
    ::google::protobuf::RepeatedPtrField< ::event_rule_item > test_empty_arr_;
    ::event_rule_item* rule_;
    ::event_rule_item* specify_field_;
    ::uint32_t id_;
    ::uint32_t process_;
    union RewardUnion {
      constexpr RewardUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::event_reward_item* item_;
      ::int64_t user_exp_;
      ::google::protobuf::internal::ArenaStringPtr note_;
      int enum_type_;
    } reward_;
    union UnlockTypeUnion {
      constexpr UnlockTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint32_t user_level_;
    } unlock_type_;
    ::uint32_t _oneof_case_[2];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr_cfg_TestMapSmEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          arr_in_arr_cfg_TestMapSmEntry_DoNotUse, std::string, ::dep2_cfg,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      arr_in_arr_cfg_TestMapSmEntry_DoNotUse, std::string, ::dep2_cfg,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  arr_in_arr_cfg_TestMapSmEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapSmEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit arr_in_arr_cfg_TestMapSmEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const arr_in_arr_cfg_TestMapSmEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr_cfg_TestMapSmEntry_DoNotUse*>(
        &_arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class role_cfg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:role_cfg) */ {
 public:
  inline role_cfg() : role_cfg(nullptr) {}
  ~role_cfg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR role_cfg(
      ::google::protobuf::internal::ConstantInitialized);

  inline role_cfg(const role_cfg& from) : role_cfg(nullptr, from) {}
  inline role_cfg(role_cfg&& from) noexcept
      : role_cfg(nullptr, std::move(from)) {}
  inline role_cfg& operator=(const role_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_cfg& operator=(role_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const role_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const role_cfg* internal_default_instance() {
    return reinterpret_cast<const role_cfg*>(
        &_role_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(role_cfg& a, role_cfg& b) { a.Swap(&b); }
  inline void Swap(role_cfg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(role_cfg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  role_cfg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<role_cfg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const role_cfg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const role_cfg& from) { role_cfg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(role_cfg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "role_cfg"; }

 protected:
  explicit role_cfg(::google::protobuf::Arena* arena);
  role_cfg(::google::protobuf::Arena* arena, const role_cfg& from);
  role_cfg(::google::protobuf::Arena* arena, role_cfg&& from) noexcept
      : role_cfg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestArrayFieldNumber = 11,
    kTestPlainEnumArrayFieldNumber = 13,
    kConvertTimepointArrFieldNumber = 25,
    kOriginTimepointArrFieldNumber = 26,
    kConvertDurationArrFieldNumber = 27,
    kOriginDurationArrFieldNumber = 28,
    kNameFieldNumber = 5,
    kIntAsStringFieldNumber = 12,
    kOriginTimepointOneFieldNumber = 22,
    kOriginDurationOneFieldNumber = 24,
    kDepTestFieldNumber = 10,
    kConvertTimepointOneFieldNumber = 21,
    kConvertDurationOneFieldNumber = 23,
    kIdFieldNumber = 1,
    kUnlockLevelFieldNumber = 2,
    kCostTypeFieldNumber = 3,
    kCostValueFieldNumber = 4,
  };
  // repeated string test_array = 11;
  int test_array_size() const;
  private:
  int _internal_test_array_size() const;

  public:
  void clear_test_array() ;
  const std::string& test_array(int index) const;
  std::string* mutable_test_array(int index);
  void set_test_array(int index, const std::string& value);
  void set_test_array(int index, std::string&& value);
  void set_test_array(int index, const char* value);
  void set_test_array(int index, const char* value, std::size_t size);
  void set_test_array(int index, absl::string_view value);
  std::string* add_test_array();
  void add_test_array(const std::string& value);
  void add_test_array(std::string&& value);
  void add_test_array(const char* value);
  void add_test_array(const char* value, std::size_t size);
  void add_test_array(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& test_array() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_test_array();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_test_array() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_test_array();

  public:
  // repeated .cost_type test_plain_enum_array = 13;
  int test_plain_enum_array_size() const;
  private:
  int _internal_test_plain_enum_array_size() const;

  public:
  void clear_test_plain_enum_array() ;
  public:
  ::cost_type test_plain_enum_array(int index) const;
  void set_test_plain_enum_array(int index, ::cost_type value);
  void add_test_plain_enum_array(::cost_type value);
  const ::google::protobuf::RepeatedField<int>& test_plain_enum_array() const;
  ::google::protobuf::RepeatedField<int>* mutable_test_plain_enum_array();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_test_plain_enum_array() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_test_plain_enum_array();

  public:
  // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
  int convert_timepoint_arr_size() const;
  private:
  int _internal_convert_timepoint_arr_size() const;

  public:
  void clear_convert_timepoint_arr() ;
  ::google::protobuf::Timestamp* mutable_convert_timepoint_arr(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* mutable_convert_timepoint_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& _internal_convert_timepoint_arr() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* _internal_mutable_convert_timepoint_arr();
  public:
  const ::google::protobuf::Timestamp& convert_timepoint_arr(int index) const;
  ::google::protobuf::Timestamp* add_convert_timepoint_arr();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& convert_timepoint_arr() const;
  // repeated string origin_timepoint_arr = 26;
  int origin_timepoint_arr_size() const;
  private:
  int _internal_origin_timepoint_arr_size() const;

  public:
  void clear_origin_timepoint_arr() ;
  const std::string& origin_timepoint_arr(int index) const;
  std::string* mutable_origin_timepoint_arr(int index);
  void set_origin_timepoint_arr(int index, const std::string& value);
  void set_origin_timepoint_arr(int index, std::string&& value);
  void set_origin_timepoint_arr(int index, const char* value);
  void set_origin_timepoint_arr(int index, const char* value, std::size_t size);
  void set_origin_timepoint_arr(int index, absl::string_view value);
  std::string* add_origin_timepoint_arr();
  void add_origin_timepoint_arr(const std::string& value);
  void add_origin_timepoint_arr(std::string&& value);
  void add_origin_timepoint_arr(const char* value);
  void add_origin_timepoint_arr(const char* value, std::size_t size);
  void add_origin_timepoint_arr(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& origin_timepoint_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_origin_timepoint_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_origin_timepoint_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_origin_timepoint_arr();

  public:
  // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
  int convert_duration_arr_size() const;
  private:
  int _internal_convert_duration_arr_size() const;

  public:
  void clear_convert_duration_arr() ;
  ::google::protobuf::Duration* mutable_convert_duration_arr(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>* mutable_convert_duration_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>& _internal_convert_duration_arr() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>* _internal_mutable_convert_duration_arr();
  public:
  const ::google::protobuf::Duration& convert_duration_arr(int index) const;
  ::google::protobuf::Duration* add_convert_duration_arr();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>& convert_duration_arr() const;
  // repeated string origin_duration_arr = 28;
  int origin_duration_arr_size() const;
  private:
  int _internal_origin_duration_arr_size() const;

  public:
  void clear_origin_duration_arr() ;
  const std::string& origin_duration_arr(int index) const;
  std::string* mutable_origin_duration_arr(int index);
  void set_origin_duration_arr(int index, const std::string& value);
  void set_origin_duration_arr(int index, std::string&& value);
  void set_origin_duration_arr(int index, const char* value);
  void set_origin_duration_arr(int index, const char* value, std::size_t size);
  void set_origin_duration_arr(int index, absl::string_view value);
  std::string* add_origin_duration_arr();
  void add_origin_duration_arr(const std::string& value);
  void add_origin_duration_arr(std::string&& value);
  void add_origin_duration_arr(const char* value);
  void add_origin_duration_arr(const char* value, std::size_t size);
  void add_origin_duration_arr(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& origin_duration_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_origin_duration_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_origin_duration_arr() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_origin_duration_arr();

  public:
  // optional string name = 5;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string int_as_string = 12;
  bool has_int_as_string() const;
  void clear_int_as_string() ;
  const std::string& int_as_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_int_as_string(Arg_&& arg, Args_... args);
  std::string* mutable_int_as_string();
  PROTOBUF_NODISCARD std::string* release_int_as_string();
  void set_allocated_int_as_string(std::string* value);

  private:
  const std::string& _internal_int_as_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_int_as_string(
      const std::string& value);
  std::string* _internal_mutable_int_as_string();

  public:
  // optional string origin_timepoint_one = 22;
  bool has_origin_timepoint_one() const;
  void clear_origin_timepoint_one() ;
  const std::string& origin_timepoint_one() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin_timepoint_one(Arg_&& arg, Args_... args);
  std::string* mutable_origin_timepoint_one();
  PROTOBUF_NODISCARD std::string* release_origin_timepoint_one();
  void set_allocated_origin_timepoint_one(std::string* value);

  private:
  const std::string& _internal_origin_timepoint_one() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_timepoint_one(
      const std::string& value);
  std::string* _internal_mutable_origin_timepoint_one();

  public:
  // optional string origin_duration_one = 24;
  bool has_origin_duration_one() const;
  void clear_origin_duration_one() ;
  const std::string& origin_duration_one() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_origin_duration_one(Arg_&& arg, Args_... args);
  std::string* mutable_origin_duration_one();
  PROTOBUF_NODISCARD std::string* release_origin_duration_one();
  void set_allocated_origin_duration_one(std::string* value);

  private:
  const std::string& _internal_origin_duration_one() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_duration_one(
      const std::string& value);
  std::string* _internal_mutable_origin_duration_one();

  public:
  // optional .dep_cfg dep_test = 10;
  bool has_dep_test() const;
  void clear_dep_test() ;
  const ::dep_cfg& dep_test() const;
  PROTOBUF_NODISCARD ::dep_cfg* release_dep_test();
  ::dep_cfg* mutable_dep_test();
  void set_allocated_dep_test(::dep_cfg* value);
  void unsafe_arena_set_allocated_dep_test(::dep_cfg* value);
  ::dep_cfg* unsafe_arena_release_dep_test();

  private:
  const ::dep_cfg& _internal_dep_test() const;
  ::dep_cfg* _internal_mutable_dep_test();

  public:
  // optional .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
  bool has_convert_timepoint_one() const;
  void clear_convert_timepoint_one() ;
  const ::google::protobuf::Timestamp& convert_timepoint_one() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_convert_timepoint_one();
  ::google::protobuf::Timestamp* mutable_convert_timepoint_one();
  void set_allocated_convert_timepoint_one(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_convert_timepoint_one(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_convert_timepoint_one();

  private:
  const ::google::protobuf::Timestamp& _internal_convert_timepoint_one() const;
  ::google::protobuf::Timestamp* _internal_mutable_convert_timepoint_one();

  public:
  // optional .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
  bool has_convert_duration_one() const;
  void clear_convert_duration_one() ;
  const ::google::protobuf::Duration& convert_duration_one() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_convert_duration_one();
  ::google::protobuf::Duration* mutable_convert_duration_one();
  void set_allocated_convert_duration_one(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_convert_duration_one(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_convert_duration_one();

  private:
  const ::google::protobuf::Duration& _internal_convert_duration_one() const;
  ::google::protobuf::Duration* _internal_mutable_convert_duration_one();

  public:
  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional uint32 unlock_level = 2;
  bool has_unlock_level() const;
  void clear_unlock_level() ;
  ::uint32_t unlock_level() const;
  void set_unlock_level(::uint32_t value);

  private:
  ::uint32_t _internal_unlock_level() const;
  void _internal_set_unlock_level(::uint32_t value);

  public:
  // optional int32 cost_type = 3;
  bool has_cost_type() const;
  void clear_cost_type() ;
  ::int32_t cost_type() const;
  void set_cost_type(::int32_t value);

  private:
  ::int32_t _internal_cost_type() const;
  void _internal_set_cost_type(::int32_t value);

  public:
  // optional int32 cost_value = 4;
  bool has_cost_value() const;
  void clear_cost_value() ;
  ::int32_t cost_value() const;
  void set_cost_value(::int32_t value);

  private:
  ::int32_t _internal_cost_value() const;
  void _internal_set_cost_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:role_cfg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 6,
      138, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_role_cfg_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const role_cfg& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> test_array_;
    ::google::protobuf::RepeatedField<int> test_plain_enum_array_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > convert_timepoint_arr_;
    ::google::protobuf::RepeatedPtrField<std::string> origin_timepoint_arr_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Duration > convert_duration_arr_;
    ::google::protobuf::RepeatedPtrField<std::string> origin_duration_arr_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr int_as_string_;
    ::google::protobuf::internal::ArenaStringPtr origin_timepoint_one_;
    ::google::protobuf::internal::ArenaStringPtr origin_duration_one_;
    ::dep_cfg* dep_test_;
    ::google::protobuf::Timestamp* convert_timepoint_one_;
    ::google::protobuf::Duration* convert_duration_one_;
    ::uint32_t id_;
    ::uint32_t unlock_level_;
    ::int32_t cost_type_;
    ::int32_t cost_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class process_by_script final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:process_by_script) */ {
 public:
  inline process_by_script() : process_by_script(nullptr) {}
  ~process_by_script() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR process_by_script(
      ::google::protobuf::internal::ConstantInitialized);

  inline process_by_script(const process_by_script& from) : process_by_script(nullptr, from) {}
  inline process_by_script(process_by_script&& from) noexcept
      : process_by_script(nullptr, std::move(from)) {}
  inline process_by_script& operator=(const process_by_script& from) {
    CopyFrom(from);
    return *this;
  }
  inline process_by_script& operator=(process_by_script&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const process_by_script& default_instance() {
    return *internal_default_instance();
  }
  static inline const process_by_script* internal_default_instance() {
    return reinterpret_cast<const process_by_script*>(
        &_process_by_script_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(process_by_script& a, process_by_script& b) { a.Swap(&b); }
  inline void Swap(process_by_script* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(process_by_script* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  process_by_script* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<process_by_script>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const process_by_script& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const process_by_script& from) { process_by_script::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(process_by_script* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "process_by_script"; }

 protected:
  explicit process_by_script(::google::protobuf::Arena* arena);
  process_by_script(::google::protobuf::Arena* arena, const process_by_script& from);
  process_by_script(::google::protobuf::Arena* arena, process_by_script&& from) noexcept
      : process_by_script(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMapU32StringFieldNumber = 2,
    kTestMapIsFieldNumber = 7,
    kTestMapSmFieldNumber = 8,
    kIdIdFieldNumber = 1001,
    kIdFieldNumber = 1,
  };
  // map<uint32, string> map_u32_string = 2;
  int map_u32_string_size() const;
  private:
  int _internal_map_u32_string_size() const;

  public:
  void clear_map_u32_string() ;
  const ::google::protobuf::Map<::uint32_t, std::string>& map_u32_string() const;
  ::google::protobuf::Map<::uint32_t, std::string>* mutable_map_u32_string();

  private:
  const ::google::protobuf::Map<::uint32_t, std::string>& _internal_map_u32_string() const;
  ::google::protobuf::Map<::uint32_t, std::string>* _internal_mutable_map_u32_string();

  public:
  // map<int32, string> test_map_is = 7;
  int test_map_is_size() const;
  private:
  int _internal_test_map_is_size() const;

  public:
  void clear_test_map_is() ;
  const ::google::protobuf::Map<::int32_t, std::string>& test_map_is() const;
  ::google::protobuf::Map<::int32_t, std::string>* mutable_test_map_is();

  private:
  const ::google::protobuf::Map<::int32_t, std::string>& _internal_test_map_is() const;
  ::google::protobuf::Map<::int32_t, std::string>* _internal_mutable_test_map_is();

  public:
  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  int test_map_sm_size() const;
  private:
  int _internal_test_map_sm_size() const;

  public:
  void clear_test_map_sm() ;
  const ::google::protobuf::Map<std::string, ::dep2_cfg>& test_map_sm() const;
  ::google::protobuf::Map<std::string, ::dep2_cfg>* mutable_test_map_sm();

  private:
  const ::google::protobuf::Map<std::string, ::dep2_cfg>& _internal_test_map_sm() const;
  ::google::protobuf::Map<std::string, ::dep2_cfg>* _internal_mutable_test_map_sm();

  public:
  // optional .combine_id id_id = 1001;
  bool has_id_id() const;
  void clear_id_id() ;
  const ::combine_id& id_id() const;
  PROTOBUF_NODISCARD ::combine_id* release_id_id();
  ::combine_id* mutable_id_id();
  void set_allocated_id_id(::combine_id* value);
  void unsafe_arena_set_allocated_id_id(::combine_id* value);
  ::combine_id* unsafe_arena_release_id_id();

  private:
  const ::combine_id& _internal_id_id() const;
  ::combine_id* _internal_mutable_id_id();

  public:
  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:process_by_script)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 5,
      62, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_process_by_script_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const process_by_script& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<process_by_script_MapU32StringEntry_DoNotUse, ::uint32_t, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        map_u32_string_;
    ::google::protobuf::internal::MapField<process_by_script_TestMapIsEntry_DoNotUse, ::int32_t, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        test_map_is_;
    ::google::protobuf::internal::MapField<process_by_script_TestMapSmEntry_DoNotUse, std::string, ::dep2_cfg,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        test_map_sm_;
    ::combine_id* id_id_;
    ::uint32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr_cfg final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:arr_in_arr_cfg) */ {
 public:
  inline arr_in_arr_cfg() : arr_in_arr_cfg(nullptr) {}
  ~arr_in_arr_cfg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR arr_in_arr_cfg(
      ::google::protobuf::internal::ConstantInitialized);

  inline arr_in_arr_cfg(const arr_in_arr_cfg& from) : arr_in_arr_cfg(nullptr, from) {}
  inline arr_in_arr_cfg(arr_in_arr_cfg&& from) noexcept
      : arr_in_arr_cfg(nullptr, std::move(from)) {}
  inline arr_in_arr_cfg& operator=(const arr_in_arr_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline arr_in_arr_cfg& operator=(arr_in_arr_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const arr_in_arr_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const arr_in_arr_cfg* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr_cfg*>(
        &_arr_in_arr_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(arr_in_arr_cfg& a, arr_in_arr_cfg& b) { a.Swap(&b); }
  inline void Swap(arr_in_arr_cfg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(arr_in_arr_cfg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  arr_in_arr_cfg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<arr_in_arr_cfg>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const arr_in_arr_cfg& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const arr_in_arr_cfg& from) { arr_in_arr_cfg::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(arr_in_arr_cfg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "arr_in_arr_cfg"; }

 protected:
  explicit arr_in_arr_cfg(::google::protobuf::Arena* arena);
  arr_in_arr_cfg(::google::protobuf::Arena* arena, const arr_in_arr_cfg& from);
  arr_in_arr_cfg(::google::protobuf::Arena* arena, arr_in_arr_cfg&& from) noexcept
      : arr_in_arr_cfg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kArrFieldNumber = 2,
    kTestPlainIntArrFieldNumber = 3,
    kTestPlainEnumArrFieldNumber = 4,
    kTestPlainMsgArrFieldNumber = 6,
    kTestMapIsFieldNumber = 7,
    kTestMapSmFieldNumber = 8,
    kTestPlainMsgFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated .arr_in_arr arr = 2;
  int arr_size() const;
  private:
  int _internal_arr_size() const;

  public:
  void clear_arr() ;
  ::arr_in_arr* mutable_arr(int index);
  ::google::protobuf::RepeatedPtrField<::arr_in_arr>* mutable_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::arr_in_arr>& _internal_arr() const;
  ::google::protobuf::RepeatedPtrField<::arr_in_arr>* _internal_mutable_arr();
  public:
  const ::arr_in_arr& arr(int index) const;
  ::arr_in_arr* add_arr();
  const ::google::protobuf::RepeatedPtrField<::arr_in_arr>& arr() const;
  // repeated int32 test_plain_int_arr = 3 [(.org.xresloader.field_list_min_size) = "1", (.org.xresloader.field_list_max_size) = "3"];
  int test_plain_int_arr_size() const;
  private:
  int _internal_test_plain_int_arr_size() const;

  public:
  void clear_test_plain_int_arr() ;
  ::int32_t test_plain_int_arr(int index) const;
  void set_test_plain_int_arr(int index, ::int32_t value);
  void add_test_plain_int_arr(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& test_plain_int_arr() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_test_plain_int_arr();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_test_plain_int_arr() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_test_plain_int_arr();

  public:
  // repeated .cost_type test_plain_enum_arr = 4;
  int test_plain_enum_arr_size() const;
  private:
  int _internal_test_plain_enum_arr_size() const;

  public:
  void clear_test_plain_enum_arr() ;
  public:
  ::cost_type test_plain_enum_arr(int index) const;
  void set_test_plain_enum_arr(int index, ::cost_type value);
  void add_test_plain_enum_arr(::cost_type value);
  const ::google::protobuf::RepeatedField<int>& test_plain_enum_arr() const;
  ::google::protobuf::RepeatedField<int>* mutable_test_plain_enum_arr();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_test_plain_enum_arr() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_test_plain_enum_arr();

  public:
  // repeated .test_msg_verifier test_plain_msg_arr = 6;
  int test_plain_msg_arr_size() const;
  private:
  int _internal_test_plain_msg_arr_size() const;

  public:
  void clear_test_plain_msg_arr() ;
  ::test_msg_verifier* mutable_test_plain_msg_arr(int index);
  ::google::protobuf::RepeatedPtrField<::test_msg_verifier>* mutable_test_plain_msg_arr();

  private:
  const ::google::protobuf::RepeatedPtrField<::test_msg_verifier>& _internal_test_plain_msg_arr() const;
  ::google::protobuf::RepeatedPtrField<::test_msg_verifier>* _internal_mutable_test_plain_msg_arr();
  public:
  const ::test_msg_verifier& test_plain_msg_arr(int index) const;
  ::test_msg_verifier* add_test_plain_msg_arr();
  const ::google::protobuf::RepeatedPtrField<::test_msg_verifier>& test_plain_msg_arr() const;
  // map<int32, string> test_map_is = 7;
  int test_map_is_size() const;
  private:
  int _internal_test_map_is_size() const;

  public:
  void clear_test_map_is() ;
  const ::google::protobuf::Map<::int32_t, std::string>& test_map_is() const;
  ::google::protobuf::Map<::int32_t, std::string>* mutable_test_map_is();

  private:
  const ::google::protobuf::Map<::int32_t, std::string>& _internal_test_map_is() const;
  ::google::protobuf::Map<::int32_t, std::string>* _internal_mutable_test_map_is();

  public:
  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  int test_map_sm_size() const;
  private:
  int _internal_test_map_sm_size() const;

  public:
  void clear_test_map_sm() ;
  const ::google::protobuf::Map<std::string, ::dep2_cfg>& test_map_sm() const;
  ::google::protobuf::Map<std::string, ::dep2_cfg>* mutable_test_map_sm();

  private:
  const ::google::protobuf::Map<std::string, ::dep2_cfg>& _internal_test_map_sm() const;
  ::google::protobuf::Map<std::string, ::dep2_cfg>* _internal_mutable_test_map_sm();

  public:
  // optional .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
  bool has_test_plain_msg() const;
  void clear_test_plain_msg() ;
  const ::test_msg_verifier& test_plain_msg() const;
  PROTOBUF_NODISCARD ::test_msg_verifier* release_test_plain_msg();
  ::test_msg_verifier* mutable_test_plain_msg();
  void set_allocated_test_plain_msg(::test_msg_verifier* value);
  void unsafe_arena_set_allocated_test_plain_msg(::test_msg_verifier* value);
  ::test_msg_verifier* unsafe_arena_release_test_plain_msg();

  private:
  const ::test_msg_verifier& _internal_test_plain_msg() const;
  ::test_msg_verifier* _internal_mutable_test_plain_msg();

  public:
  // optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:arr_in_arr_cfg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 7,
      53, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_arr_in_arr_cfg_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const arr_in_arr_cfg& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::arr_in_arr > arr_;
    ::google::protobuf::RepeatedField<::int32_t> test_plain_int_arr_;
    ::google::protobuf::RepeatedField<int> test_plain_enum_arr_;
    ::google::protobuf::RepeatedPtrField< ::test_msg_verifier > test_plain_msg_arr_;
    ::google::protobuf::internal::MapField<arr_in_arr_cfg_TestMapIsEntry_DoNotUse, ::int32_t, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        test_map_is_;
    ::google::protobuf::internal::MapField<arr_in_arr_cfg_TestMapSmEntry_DoNotUse, std::string, ::dep2_cfg,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        test_map_sm_;
    ::test_msg_verifier* test_plain_msg_;
    ::uint32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// role_cfg

// optional uint32 id = 1;
inline bool role_cfg::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void role_cfg::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t role_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_cfg.id)
  return _internal_id();
}
inline void role_cfg::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:role_cfg.id)
}
inline ::uint32_t role_cfg::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void role_cfg::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional uint32 unlock_level = 2;
inline bool role_cfg::has_unlock_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void role_cfg::clear_unlock_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unlock_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t role_cfg::unlock_level() const {
  // @@protoc_insertion_point(field_get:role_cfg.unlock_level)
  return _internal_unlock_level();
}
inline void role_cfg::set_unlock_level(::uint32_t value) {
  _internal_set_unlock_level(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:role_cfg.unlock_level)
}
inline ::uint32_t role_cfg::_internal_unlock_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unlock_level_;
}
inline void role_cfg::_internal_set_unlock_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unlock_level_ = value;
}

// optional int32 cost_type = 3;
inline bool role_cfg::has_cost_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void role_cfg::clear_cost_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t role_cfg::cost_type() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_type)
  return _internal_cost_type();
}
inline void role_cfg::set_cost_type(::int32_t value) {
  _internal_set_cost_type(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:role_cfg.cost_type)
}
inline ::int32_t role_cfg::_internal_cost_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cost_type_;
}
inline void role_cfg::_internal_set_cost_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_type_ = value;
}

// optional int32 cost_value = 4;
inline bool role_cfg::has_cost_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void role_cfg::clear_cost_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t role_cfg::cost_value() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_value)
  return _internal_cost_value();
}
inline void role_cfg::set_cost_value(::int32_t value) {
  _internal_set_cost_value(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:role_cfg.cost_value)
}
inline ::int32_t role_cfg::_internal_cost_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cost_value_;
}
inline void role_cfg::_internal_set_cost_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cost_value_ = value;
}

// optional string name = 5;
inline bool role_cfg::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void role_cfg::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& role_cfg::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void role_cfg::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:role_cfg.name)
}
inline std::string* role_cfg::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:role_cfg.name)
  return _s;
}
inline const std::string& role_cfg::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void role_cfg::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* role_cfg::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* role_cfg::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:role_cfg.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void role_cfg::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.name)
}

// optional .dep_cfg dep_test = 10;
inline bool role_cfg::has_dep_test() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dep_test_ != nullptr);
  return value;
}
inline const ::dep_cfg& role_cfg::_internal_dep_test() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::dep_cfg* p = _impl_.dep_test_;
  return p != nullptr ? *p : reinterpret_cast<const ::dep_cfg&>(::_dep_cfg_default_instance_);
}
inline const ::dep_cfg& role_cfg::dep_test() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.dep_test)
  return _internal_dep_test();
}
inline void role_cfg::unsafe_arena_set_allocated_dep_test(::dep_cfg* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dep_test_);
  }
  _impl_.dep_test_ = reinterpret_cast<::dep_cfg*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:role_cfg.dep_test)
}
inline ::dep_cfg* role_cfg::release_dep_test() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::dep_cfg* released = _impl_.dep_test_;
  _impl_.dep_test_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dep_cfg* role_cfg::unsafe_arena_release_dep_test() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:role_cfg.dep_test)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::dep_cfg* temp = _impl_.dep_test_;
  _impl_.dep_test_ = nullptr;
  return temp;
}
inline ::dep_cfg* role_cfg::_internal_mutable_dep_test() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dep_test_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::dep_cfg>(GetArena());
    _impl_.dep_test_ = reinterpret_cast<::dep_cfg*>(p);
  }
  return _impl_.dep_test_;
}
inline ::dep_cfg* role_cfg::mutable_dep_test() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::dep_cfg* _msg = _internal_mutable_dep_test();
  // @@protoc_insertion_point(field_mutable:role_cfg.dep_test)
  return _msg;
}
inline void role_cfg::set_allocated_dep_test(::dep_cfg* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dep_test_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.dep_test_ = reinterpret_cast<::dep_cfg*>(value);
  // @@protoc_insertion_point(field_set_allocated:role_cfg.dep_test)
}

// repeated string test_array = 11;
inline int role_cfg::_internal_test_array_size() const {
  return _internal_test_array().size();
}
inline int role_cfg::test_array_size() const {
  return _internal_test_array_size();
}
inline void role_cfg::clear_test_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_array_.Clear();
}
inline std::string* role_cfg::add_test_array()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_test_array()->Add();
  // @@protoc_insertion_point(field_add_mutable:role_cfg.test_array)
  return _s;
}
inline const std::string& role_cfg::test_array(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.test_array)
  return _internal_test_array().Get(index);
}
inline std::string* role_cfg::mutable_test_array(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:role_cfg.test_array)
  return _internal_mutable_test_array()->Mutable(index);
}
inline void role_cfg::set_test_array(int index, const std::string& value) {
  _internal_mutable_test_array()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, std::string&& value) {
  _internal_mutable_test_array()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_test_array()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_test_array()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, absl::string_view value) {
  _internal_mutable_test_array()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_array()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_array()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_array()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_array()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.test_array)
}
inline void role_cfg::add_test_array(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_array()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:role_cfg.test_array)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
role_cfg::test_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:role_cfg.test_array)
  return _internal_test_array();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
role_cfg::mutable_test_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.test_array)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test_array();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
role_cfg::_internal_test_array() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_array_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
role_cfg::_internal_mutable_test_array() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_array_;
}

// optional string int_as_string = 12;
inline bool role_cfg::has_int_as_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void role_cfg::clear_int_as_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_as_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& role_cfg::int_as_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.int_as_string)
  return _internal_int_as_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void role_cfg::set_int_as_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.int_as_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:role_cfg.int_as_string)
}
inline std::string* role_cfg::mutable_int_as_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_int_as_string();
  // @@protoc_insertion_point(field_mutable:role_cfg.int_as_string)
  return _s;
}
inline const std::string& role_cfg::_internal_int_as_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_as_string_.Get();
}
inline void role_cfg::_internal_set_int_as_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.int_as_string_.Set(value, GetArena());
}
inline std::string* role_cfg::_internal_mutable_int_as_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.int_as_string_.Mutable( GetArena());
}
inline std::string* role_cfg::release_int_as_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:role_cfg.int_as_string)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.int_as_string_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.int_as_string_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void role_cfg::set_allocated_int_as_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.int_as_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.int_as_string_.IsDefault()) {
          _impl_.int_as_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.int_as_string)
}

// repeated .cost_type test_plain_enum_array = 13;
inline int role_cfg::_internal_test_plain_enum_array_size() const {
  return _internal_test_plain_enum_array().size();
}
inline int role_cfg::test_plain_enum_array_size() const {
  return _internal_test_plain_enum_array_size();
}
inline void role_cfg::clear_test_plain_enum_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_plain_enum_array_.Clear();
}
inline ::cost_type role_cfg::test_plain_enum_array(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.test_plain_enum_array)
  return static_cast<::cost_type>(_internal_test_plain_enum_array().Get(index));
}
inline void role_cfg::set_test_plain_enum_array(int index, ::cost_type value) {
  assert(::cost_type_IsValid(value));
  _internal_mutable_test_plain_enum_array()->Set(index, value);
  // @@protoc_insertion_point(field_set:role_cfg.test_plain_enum_array)
}
inline void role_cfg::add_test_plain_enum_array(::cost_type value) {
  assert(::cost_type_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_plain_enum_array()->Add(value);
  // @@protoc_insertion_point(field_add:role_cfg.test_plain_enum_array)
}
inline const ::google::protobuf::RepeatedField<int>& role_cfg::test_plain_enum_array() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:role_cfg.test_plain_enum_array)
  return _internal_test_plain_enum_array();
}
inline ::google::protobuf::RepeatedField<int>* role_cfg::mutable_test_plain_enum_array()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.test_plain_enum_array)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test_plain_enum_array();
}
inline const ::google::protobuf::RepeatedField<int>& role_cfg::_internal_test_plain_enum_array()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_plain_enum_array_;
}
inline ::google::protobuf::RepeatedField<int>* role_cfg::_internal_mutable_test_plain_enum_array() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_plain_enum_array_;
}

// optional .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
inline bool role_cfg::has_convert_timepoint_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convert_timepoint_one_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& role_cfg::_internal_convert_timepoint_one() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.convert_timepoint_one_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& role_cfg::convert_timepoint_one() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.convert_timepoint_one)
  return _internal_convert_timepoint_one();
}
inline void role_cfg::unsafe_arena_set_allocated_convert_timepoint_one(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.convert_timepoint_one_);
  }
  _impl_.convert_timepoint_one_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:role_cfg.convert_timepoint_one)
}
inline ::google::protobuf::Timestamp* role_cfg::release_convert_timepoint_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.convert_timepoint_one_;
  _impl_.convert_timepoint_one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* role_cfg::unsafe_arena_release_convert_timepoint_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:role_cfg.convert_timepoint_one)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.convert_timepoint_one_;
  _impl_.convert_timepoint_one_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* role_cfg::_internal_mutable_convert_timepoint_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.convert_timepoint_one_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.convert_timepoint_one_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.convert_timepoint_one_;
}
inline ::google::protobuf::Timestamp* role_cfg::mutable_convert_timepoint_one() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_convert_timepoint_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_timepoint_one)
  return _msg;
}
inline void role_cfg::set_allocated_convert_timepoint_one(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.convert_timepoint_one_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.convert_timepoint_one_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:role_cfg.convert_timepoint_one)
}

// optional string origin_timepoint_one = 22;
inline bool role_cfg::has_origin_timepoint_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void role_cfg::clear_origin_timepoint_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_timepoint_one_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& role_cfg::origin_timepoint_one() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.origin_timepoint_one)
  return _internal_origin_timepoint_one();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void role_cfg::set_origin_timepoint_one(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.origin_timepoint_one_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:role_cfg.origin_timepoint_one)
}
inline std::string* role_cfg::mutable_origin_timepoint_one() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_origin_timepoint_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_timepoint_one)
  return _s;
}
inline const std::string& role_cfg::_internal_origin_timepoint_one() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_timepoint_one_.Get();
}
inline void role_cfg::_internal_set_origin_timepoint_one(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.origin_timepoint_one_.Set(value, GetArena());
}
inline std::string* role_cfg::_internal_mutable_origin_timepoint_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.origin_timepoint_one_.Mutable( GetArena());
}
inline std::string* role_cfg::release_origin_timepoint_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:role_cfg.origin_timepoint_one)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.origin_timepoint_one_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.origin_timepoint_one_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void role_cfg::set_allocated_origin_timepoint_one(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.origin_timepoint_one_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.origin_timepoint_one_.IsDefault()) {
          _impl_.origin_timepoint_one_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.origin_timepoint_one)
}

// optional .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
inline bool role_cfg::has_convert_duration_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convert_duration_one_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& role_cfg::_internal_convert_duration_one() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Duration* p = _impl_.convert_duration_one_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& role_cfg::convert_duration_one() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.convert_duration_one)
  return _internal_convert_duration_one();
}
inline void role_cfg::unsafe_arena_set_allocated_convert_duration_one(::google::protobuf::Duration* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.convert_duration_one_);
  }
  _impl_.convert_duration_one_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:role_cfg.convert_duration_one)
}
inline ::google::protobuf::Duration* role_cfg::release_convert_duration_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Duration* released = _impl_.convert_duration_one_;
  _impl_.convert_duration_one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* role_cfg::unsafe_arena_release_convert_duration_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:role_cfg.convert_duration_one)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Duration* temp = _impl_.convert_duration_one_;
  _impl_.convert_duration_one_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* role_cfg::_internal_mutable_convert_duration_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.convert_duration_one_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Duration>(GetArena());
    _impl_.convert_duration_one_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.convert_duration_one_;
}
inline ::google::protobuf::Duration* role_cfg::mutable_convert_duration_one() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::google::protobuf::Duration* _msg = _internal_mutable_convert_duration_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_duration_one)
  return _msg;
}
inline void role_cfg::set_allocated_convert_duration_one(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.convert_duration_one_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.convert_duration_one_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:role_cfg.convert_duration_one)
}

// optional string origin_duration_one = 24;
inline bool role_cfg::has_origin_duration_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void role_cfg::clear_origin_duration_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_duration_one_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& role_cfg::origin_duration_one() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.origin_duration_one)
  return _internal_origin_duration_one();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void role_cfg::set_origin_duration_one(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.origin_duration_one_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:role_cfg.origin_duration_one)
}
inline std::string* role_cfg::mutable_origin_duration_one() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_origin_duration_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_duration_one)
  return _s;
}
inline const std::string& role_cfg::_internal_origin_duration_one() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_duration_one_.Get();
}
inline void role_cfg::_internal_set_origin_duration_one(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.origin_duration_one_.Set(value, GetArena());
}
inline std::string* role_cfg::_internal_mutable_origin_duration_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.origin_duration_one_.Mutable( GetArena());
}
inline std::string* role_cfg::release_origin_duration_one() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:role_cfg.origin_duration_one)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.origin_duration_one_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.origin_duration_one_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void role_cfg::set_allocated_origin_duration_one(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.origin_duration_one_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.origin_duration_one_.IsDefault()) {
          _impl_.origin_duration_one_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.origin_duration_one)
}

// repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
inline int role_cfg::_internal_convert_timepoint_arr_size() const {
  return _internal_convert_timepoint_arr().size();
}
inline int role_cfg::convert_timepoint_arr_size() const {
  return _internal_convert_timepoint_arr_size();
}
inline ::google::protobuf::Timestamp* role_cfg::mutable_convert_timepoint_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_timepoint_arr)
  return _internal_mutable_convert_timepoint_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* role_cfg::mutable_convert_timepoint_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.convert_timepoint_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_convert_timepoint_arr();
}
inline const ::google::protobuf::Timestamp& role_cfg::convert_timepoint_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.convert_timepoint_arr)
  return _internal_convert_timepoint_arr().Get(index);
}
inline ::google::protobuf::Timestamp* role_cfg::add_convert_timepoint_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Timestamp* _add = _internal_mutable_convert_timepoint_arr()->Add();
  // @@protoc_insertion_point(field_add:role_cfg.convert_timepoint_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& role_cfg::convert_timepoint_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:role_cfg.convert_timepoint_arr)
  return _internal_convert_timepoint_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>&
role_cfg::_internal_convert_timepoint_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.convert_timepoint_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>*
role_cfg::_internal_mutable_convert_timepoint_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.convert_timepoint_arr_;
}

// repeated string origin_timepoint_arr = 26;
inline int role_cfg::_internal_origin_timepoint_arr_size() const {
  return _internal_origin_timepoint_arr().size();
}
inline int role_cfg::origin_timepoint_arr_size() const {
  return _internal_origin_timepoint_arr_size();
}
inline void role_cfg::clear_origin_timepoint_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_timepoint_arr_.Clear();
}
inline std::string* role_cfg::add_origin_timepoint_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_origin_timepoint_arr()->Add();
  // @@protoc_insertion_point(field_add_mutable:role_cfg.origin_timepoint_arr)
  return _s;
}
inline const std::string& role_cfg::origin_timepoint_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.origin_timepoint_arr)
  return _internal_origin_timepoint_arr().Get(index);
}
inline std::string* role_cfg::mutable_origin_timepoint_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_timepoint_arr)
  return _internal_mutable_origin_timepoint_arr()->Mutable(index);
}
inline void role_cfg::set_origin_timepoint_arr(int index, const std::string& value) {
  _internal_mutable_origin_timepoint_arr()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::set_origin_timepoint_arr(int index, std::string&& value) {
  _internal_mutable_origin_timepoint_arr()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::set_origin_timepoint_arr(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_origin_timepoint_arr()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::set_origin_timepoint_arr(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_origin_timepoint_arr()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::set_origin_timepoint_arr(int index, absl::string_view value) {
  _internal_mutable_origin_timepoint_arr()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_timepoint_arr()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_timepoint_arr()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_timepoint_arr()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_timepoint_arr()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_timepoint_arr()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:role_cfg.origin_timepoint_arr)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
role_cfg::origin_timepoint_arr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:role_cfg.origin_timepoint_arr)
  return _internal_origin_timepoint_arr();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
role_cfg::mutable_origin_timepoint_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.origin_timepoint_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_origin_timepoint_arr();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
role_cfg::_internal_origin_timepoint_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_timepoint_arr_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
role_cfg::_internal_mutable_origin_timepoint_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.origin_timepoint_arr_;
}

// repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
inline int role_cfg::_internal_convert_duration_arr_size() const {
  return _internal_convert_duration_arr().size();
}
inline int role_cfg::convert_duration_arr_size() const {
  return _internal_convert_duration_arr_size();
}
inline ::google::protobuf::Duration* role_cfg::mutable_convert_duration_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_duration_arr)
  return _internal_mutable_convert_duration_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>* role_cfg::mutable_convert_duration_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.convert_duration_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_convert_duration_arr();
}
inline const ::google::protobuf::Duration& role_cfg::convert_duration_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.convert_duration_arr)
  return _internal_convert_duration_arr().Get(index);
}
inline ::google::protobuf::Duration* role_cfg::add_convert_duration_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Duration* _add = _internal_mutable_convert_duration_arr()->Add();
  // @@protoc_insertion_point(field_add:role_cfg.convert_duration_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>& role_cfg::convert_duration_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:role_cfg.convert_duration_arr)
  return _internal_convert_duration_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>&
role_cfg::_internal_convert_duration_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.convert_duration_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Duration>*
role_cfg::_internal_mutable_convert_duration_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.convert_duration_arr_;
}

// repeated string origin_duration_arr = 28;
inline int role_cfg::_internal_origin_duration_arr_size() const {
  return _internal_origin_duration_arr().size();
}
inline int role_cfg::origin_duration_arr_size() const {
  return _internal_origin_duration_arr_size();
}
inline void role_cfg::clear_origin_duration_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.origin_duration_arr_.Clear();
}
inline std::string* role_cfg::add_origin_duration_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_origin_duration_arr()->Add();
  // @@protoc_insertion_point(field_add_mutable:role_cfg.origin_duration_arr)
  return _s;
}
inline const std::string& role_cfg::origin_duration_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:role_cfg.origin_duration_arr)
  return _internal_origin_duration_arr().Get(index);
}
inline std::string* role_cfg::mutable_origin_duration_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_duration_arr)
  return _internal_mutable_origin_duration_arr()->Mutable(index);
}
inline void role_cfg::set_origin_duration_arr(int index, const std::string& value) {
  _internal_mutable_origin_duration_arr()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.origin_duration_arr)
}
inline void role_cfg::set_origin_duration_arr(int index, std::string&& value) {
  _internal_mutable_origin_duration_arr()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:role_cfg.origin_duration_arr)
}
inline void role_cfg::set_origin_duration_arr(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_origin_duration_arr()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.origin_duration_arr)
}
inline void role_cfg::set_origin_duration_arr(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_origin_duration_arr()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.origin_duration_arr)
}
inline void role_cfg::set_origin_duration_arr(int index, absl::string_view value) {
  _internal_mutable_origin_duration_arr()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_duration_arr()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_duration_arr()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_duration_arr()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_duration_arr()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_origin_duration_arr()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:role_cfg.origin_duration_arr)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
role_cfg::origin_duration_arr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:role_cfg.origin_duration_arr)
  return _internal_origin_duration_arr();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
role_cfg::mutable_origin_duration_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.origin_duration_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_origin_duration_arr();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
role_cfg::_internal_origin_duration_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.origin_duration_arr_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
role_cfg::_internal_mutable_origin_duration_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.origin_duration_arr_;
}

// -------------------------------------------------------------------

// role_upgrade_cfg

// optional uint32 Id = 1 [(.org.xresloader.validator) = "custom_rule3", (.org.xresloader.ue.key_tag) = 1000];
inline bool role_upgrade_cfg::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void role_upgrade_cfg::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t role_upgrade_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Id)
  return _internal_id();
}
inline void role_upgrade_cfg::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Id)
}
inline ::uint32_t role_upgrade_cfg::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void role_upgrade_cfg::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
inline bool role_upgrade_cfg::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void role_upgrade_cfg::clear_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t role_upgrade_cfg::level() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Level)
  return _internal_level();
}
inline void role_upgrade_cfg::set_level(::uint32_t value) {
  _internal_set_level(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Level)
}
inline ::uint32_t role_upgrade_cfg::_internal_level() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.level_;
}
inline void role_upgrade_cfg::_internal_set_level(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.level_ = value;
}

// optional int32 CostType = 3 [(.org.xresloader.validator) = "custom_rule1", (.org.xresloader.field_description) = "Refer to cost_type"];
inline bool role_upgrade_cfg::has_costtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void role_upgrade_cfg::clear_costtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.costtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t role_upgrade_cfg::costtype() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostType)
  return _internal_costtype();
}
inline void role_upgrade_cfg::set_costtype(::int32_t value) {
  _internal_set_costtype(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostType)
}
inline ::int32_t role_upgrade_cfg::_internal_costtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.costtype_;
}
inline void role_upgrade_cfg::_internal_set_costtype(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.costtype_ = value;
}

// optional int64 CostValue = 4;
inline bool role_upgrade_cfg::has_costvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void role_upgrade_cfg::clear_costvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.costvalue_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t role_upgrade_cfg::costvalue() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostValue)
  return _internal_costvalue();
}
inline void role_upgrade_cfg::set_costvalue(::int64_t value) {
  _internal_set_costvalue(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostValue)
}
inline ::int64_t role_upgrade_cfg::_internal_costvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.costvalue_;
}
inline void role_upgrade_cfg::_internal_set_costvalue(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.costvalue_ = value;
}

// optional int32 ScoreAdd = 5;
inline bool role_upgrade_cfg::has_scoreadd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void role_upgrade_cfg::clear_scoreadd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scoreadd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t role_upgrade_cfg::scoreadd() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.ScoreAdd)
  return _internal_scoreadd();
}
inline void role_upgrade_cfg::set_scoreadd(::int32_t value) {
  _internal_set_scoreadd(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.ScoreAdd)
}
inline ::int32_t role_upgrade_cfg::_internal_scoreadd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scoreadd_;
}
inline void role_upgrade_cfg::_internal_set_scoreadd(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scoreadd_ = value;
}

// -------------------------------------------------------------------

// test_msg_verifier

// optional uint32 test_id_1 = 10001;
inline bool test_msg_verifier::has_test_id_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void test_msg_verifier::clear_test_id_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_id_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t test_msg_verifier::test_id_1() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_1)
  return _internal_test_id_1();
}
inline void test_msg_verifier::set_test_id_1(::uint32_t value) {
  _internal_set_test_id_1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_1)
}
inline ::uint32_t test_msg_verifier::_internal_test_id_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_id_1_;
}
inline void test_msg_verifier::_internal_set_test_id_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_id_1_ = value;
}

// optional uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
inline bool test_msg_verifier::has_test_id_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void test_msg_verifier::clear_test_id_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_id_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t test_msg_verifier::test_id_2() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_2)
  return _internal_test_id_2();
}
inline void test_msg_verifier::set_test_id_2(::uint32_t value) {
  _internal_set_test_id_2(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_2)
}
inline ::uint32_t test_msg_verifier::_internal_test_id_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_id_2_;
}
inline void test_msg_verifier::_internal_set_test_id_2(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_id_2_ = value;
}

// optional uint32 test_id_3 = 10003 [(.org.xresloader.field_allow_missing_in_plain_mode) = true];
inline bool test_msg_verifier::has_test_id_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void test_msg_verifier::clear_test_id_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_id_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t test_msg_verifier::test_id_3() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_3)
  return _internal_test_id_3();
}
inline void test_msg_verifier::set_test_id_3(::uint32_t value) {
  _internal_set_test_id_3(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_3)
}
inline ::uint32_t test_msg_verifier::_internal_test_id_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_id_3_;
}
inline void test_msg_verifier::_internal_set_test_id_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_id_3_ = value;
}

// -------------------------------------------------------------------

// arr_in_arr

// optional string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
inline bool arr_in_arr::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void arr_in_arr::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& arr_in_arr::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:arr_in_arr.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void arr_in_arr::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:arr_in_arr.name)
}
inline std::string* arr_in_arr::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:arr_in_arr.name)
  return _s;
}
inline const std::string& arr_in_arr::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void arr_in_arr::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* arr_in_arr::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* arr_in_arr::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:arr_in_arr.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void arr_in_arr::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.name)
}

// repeated int32 int_arr = 2 [packed = true, (.org.xresloader.field_list_strip_option) = LIST_STRIP_NOTHING, (.org.xresloader.field_list_min_size) = "game_const_config.EN_GCC_UNKNOWN", (.org.xresloader.field_list_max_size) = "3"];
inline int arr_in_arr::_internal_int_arr_size() const {
  return _internal_int_arr().size();
}
inline int arr_in_arr::int_arr_size() const {
  return _internal_int_arr_size();
}
inline void arr_in_arr::clear_int_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int_arr_.Clear();
}
inline ::int32_t arr_in_arr::int_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr.int_arr)
  return _internal_int_arr().Get(index);
}
inline void arr_in_arr::set_int_arr(int index, ::int32_t value) {
  _internal_mutable_int_arr()->Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr.int_arr)
}
inline void arr_in_arr::add_int_arr(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_int_arr()->Add(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.int_arr)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& arr_in_arr::int_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:arr_in_arr.int_arr)
  return _internal_int_arr();
}
inline ::google::protobuf::RepeatedField<::int32_t>* arr_in_arr::mutable_int_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.int_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_int_arr();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
arr_in_arr::_internal_int_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int_arr_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* arr_in_arr::_internal_mutable_int_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.int_arr_;
}

// repeated string str_arr = 3;
inline int arr_in_arr::_internal_str_arr_size() const {
  return _internal_str_arr().size();
}
inline int arr_in_arr::str_arr_size() const {
  return _internal_str_arr_size();
}
inline void arr_in_arr::clear_str_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.str_arr_.Clear();
}
inline std::string* arr_in_arr::add_str_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_str_arr()->Add();
  // @@protoc_insertion_point(field_add_mutable:arr_in_arr.str_arr)
  return _s;
}
inline const std::string& arr_in_arr::str_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:arr_in_arr.str_arr)
  return _internal_str_arr().Get(index);
}
inline std::string* arr_in_arr::mutable_str_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:arr_in_arr.str_arr)
  return _internal_mutable_str_arr()->Mutable(index);
}
inline void arr_in_arr::set_str_arr(int index, const std::string& value) {
  _internal_mutable_str_arr()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, std::string&& value) {
  _internal_mutable_str_arr()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_str_arr()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_str_arr()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, absl::string_view value) {
  _internal_mutable_str_arr()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_str_arr()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_str_arr()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_str_arr()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_str_arr()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_str_arr()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:arr_in_arr.str_arr)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
arr_in_arr::str_arr() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:arr_in_arr.str_arr)
  return _internal_str_arr();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
arr_in_arr::mutable_str_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.str_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_str_arr();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
arr_in_arr::_internal_str_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.str_arr_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
arr_in_arr::_internal_mutable_str_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.str_arr_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// arr_in_arr_cfg

// optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
inline bool arr_in_arr_cfg::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void arr_in_arr_cfg::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t arr_in_arr_cfg::id() const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.id)
  return _internal_id();
}
inline void arr_in_arr_cfg::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.id)
}
inline ::uint32_t arr_in_arr_cfg::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void arr_in_arr_cfg::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// repeated .arr_in_arr arr = 2;
inline int arr_in_arr_cfg::_internal_arr_size() const {
  return _internal_arr().size();
}
inline int arr_in_arr_cfg::arr_size() const {
  return _internal_arr_size();
}
inline void arr_in_arr_cfg::clear_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.arr_.Clear();
}
inline ::arr_in_arr* arr_in_arr_cfg::mutable_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.arr)
  return _internal_mutable_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::arr_in_arr>* arr_in_arr_cfg::mutable_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_arr();
}
inline const ::arr_in_arr& arr_in_arr_cfg::arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.arr)
  return _internal_arr().Get(index);
}
inline ::arr_in_arr* arr_in_arr_cfg::add_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::arr_in_arr* _add = _internal_mutable_arr()->Add();
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::arr_in_arr>& arr_in_arr_cfg::arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.arr)
  return _internal_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::arr_in_arr>&
arr_in_arr_cfg::_internal_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.arr_;
}
inline ::google::protobuf::RepeatedPtrField<::arr_in_arr>*
arr_in_arr_cfg::_internal_mutable_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.arr_;
}

// repeated int32 test_plain_int_arr = 3 [(.org.xresloader.field_list_min_size) = "1", (.org.xresloader.field_list_max_size) = "3"];
inline int arr_in_arr_cfg::_internal_test_plain_int_arr_size() const {
  return _internal_test_plain_int_arr().size();
}
inline int arr_in_arr_cfg::test_plain_int_arr_size() const {
  return _internal_test_plain_int_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_int_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_plain_int_arr_.Clear();
}
inline ::int32_t arr_in_arr_cfg::test_plain_int_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_test_plain_int_arr().Get(index);
}
inline void arr_in_arr_cfg::set_test_plain_int_arr(int index, ::int32_t value) {
  _internal_mutable_test_plain_int_arr()->Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.test_plain_int_arr)
}
inline void arr_in_arr_cfg::add_test_plain_int_arr(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_plain_int_arr()->Add(value);
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_int_arr)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& arr_in_arr_cfg::test_plain_int_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_test_plain_int_arr();
}
inline ::google::protobuf::RepeatedField<::int32_t>* arr_in_arr_cfg::mutable_test_plain_int_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_int_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test_plain_int_arr();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
arr_in_arr_cfg::_internal_test_plain_int_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_plain_int_arr_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* arr_in_arr_cfg::_internal_mutable_test_plain_int_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_plain_int_arr_;
}

// repeated .cost_type test_plain_enum_arr = 4;
inline int arr_in_arr_cfg::_internal_test_plain_enum_arr_size() const {
  return _internal_test_plain_enum_arr().size();
}
inline int arr_in_arr_cfg::test_plain_enum_arr_size() const {
  return _internal_test_plain_enum_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_enum_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_plain_enum_arr_.Clear();
}
inline ::cost_type arr_in_arr_cfg::test_plain_enum_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_enum_arr)
  return static_cast<::cost_type>(_internal_test_plain_enum_arr().Get(index));
}
inline void arr_in_arr_cfg::set_test_plain_enum_arr(int index, ::cost_type value) {
  assert(::cost_type_IsValid(value));
  _internal_mutable_test_plain_enum_arr()->Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.test_plain_enum_arr)
}
inline void arr_in_arr_cfg::add_test_plain_enum_arr(::cost_type value) {
  assert(::cost_type_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_test_plain_enum_arr()->Add(value);
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_enum_arr)
}
inline const ::google::protobuf::RepeatedField<int>& arr_in_arr_cfg::test_plain_enum_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_enum_arr)
  return _internal_test_plain_enum_arr();
}
inline ::google::protobuf::RepeatedField<int>* arr_in_arr_cfg::mutable_test_plain_enum_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_enum_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test_plain_enum_arr();
}
inline const ::google::protobuf::RepeatedField<int>& arr_in_arr_cfg::_internal_test_plain_enum_arr()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_plain_enum_arr_;
}
inline ::google::protobuf::RepeatedField<int>* arr_in_arr_cfg::_internal_mutable_test_plain_enum_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_plain_enum_arr_;
}

// optional .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
inline bool arr_in_arr_cfg::has_test_plain_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.test_plain_msg_ != nullptr);
  return value;
}
inline void arr_in_arr_cfg::clear_test_plain_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.test_plain_msg_ != nullptr) _impl_.test_plain_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::test_msg_verifier& arr_in_arr_cfg::_internal_test_plain_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::test_msg_verifier* p = _impl_.test_plain_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::test_msg_verifier&>(::_test_msg_verifier_default_instance_);
}
inline const ::test_msg_verifier& arr_in_arr_cfg::test_plain_msg() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_msg)
  return _internal_test_plain_msg();
}
inline void arr_in_arr_cfg::unsafe_arena_set_allocated_test_plain_msg(::test_msg_verifier* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.test_plain_msg_);
  }
  _impl_.test_plain_msg_ = reinterpret_cast<::test_msg_verifier*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:arr_in_arr_cfg.test_plain_msg)
}
inline ::test_msg_verifier* arr_in_arr_cfg::release_test_plain_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test_msg_verifier* released = _impl_.test_plain_msg_;
  _impl_.test_plain_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::test_msg_verifier* arr_in_arr_cfg::unsafe_arena_release_test_plain_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:arr_in_arr_cfg.test_plain_msg)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test_msg_verifier* temp = _impl_.test_plain_msg_;
  _impl_.test_plain_msg_ = nullptr;
  return temp;
}
inline ::test_msg_verifier* arr_in_arr_cfg::_internal_mutable_test_plain_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.test_plain_msg_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::test_msg_verifier>(GetArena());
    _impl_.test_plain_msg_ = reinterpret_cast<::test_msg_verifier*>(p);
  }
  return _impl_.test_plain_msg_;
}
inline ::test_msg_verifier* arr_in_arr_cfg::mutable_test_plain_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::test_msg_verifier* _msg = _internal_mutable_test_plain_msg();
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.test_plain_msg)
  return _msg;
}
inline void arr_in_arr_cfg::set_allocated_test_plain_msg(::test_msg_verifier* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.test_plain_msg_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.test_plain_msg_ = reinterpret_cast<::test_msg_verifier*>(value);
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr_cfg.test_plain_msg)
}

// repeated .test_msg_verifier test_plain_msg_arr = 6;
inline int arr_in_arr_cfg::_internal_test_plain_msg_arr_size() const {
  return _internal_test_plain_msg_arr().size();
}
inline int arr_in_arr_cfg::test_plain_msg_arr_size() const {
  return _internal_test_plain_msg_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_msg_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_plain_msg_arr_.Clear();
}
inline ::test_msg_verifier* arr_in_arr_cfg::mutable_test_plain_msg_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.test_plain_msg_arr)
  return _internal_mutable_test_plain_msg_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::test_msg_verifier>* arr_in_arr_cfg::mutable_test_plain_msg_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_msg_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test_plain_msg_arr();
}
inline const ::test_msg_verifier& arr_in_arr_cfg::test_plain_msg_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_msg_arr)
  return _internal_test_plain_msg_arr().Get(index);
}
inline ::test_msg_verifier* arr_in_arr_cfg::add_test_plain_msg_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::test_msg_verifier* _add = _internal_mutable_test_plain_msg_arr()->Add();
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_msg_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::test_msg_verifier>& arr_in_arr_cfg::test_plain_msg_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_msg_arr)
  return _internal_test_plain_msg_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::test_msg_verifier>&
arr_in_arr_cfg::_internal_test_plain_msg_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_plain_msg_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::test_msg_verifier>*
arr_in_arr_cfg::_internal_mutable_test_plain_msg_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_plain_msg_arr_;
}

// map<int32, string> test_map_is = 7;
inline int arr_in_arr_cfg::_internal_test_map_is_size() const {
  return _internal_test_map_is().size();
}
inline int arr_in_arr_cfg::test_map_is_size() const {
  return _internal_test_map_is_size();
}
inline void arr_in_arr_cfg::clear_test_map_is() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_map_is_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, std::string>& arr_in_arr_cfg::_internal_test_map_is() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_map_is_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, std::string>& arr_in_arr_cfg::test_map_is() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:arr_in_arr_cfg.test_map_is)
  return _internal_test_map_is();
}
inline ::google::protobuf::Map<::int32_t, std::string>* arr_in_arr_cfg::_internal_mutable_test_map_is() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_map_is_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, std::string>* arr_in_arr_cfg::mutable_test_map_is() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:arr_in_arr_cfg.test_map_is)
  return _internal_mutable_test_map_is();
}

// map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
inline int arr_in_arr_cfg::_internal_test_map_sm_size() const {
  return _internal_test_map_sm().size();
}
inline int arr_in_arr_cfg::test_map_sm_size() const {
  return _internal_test_map_sm_size();
}
inline const ::google::protobuf::Map<std::string, ::dep2_cfg>& arr_in_arr_cfg::_internal_test_map_sm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_map_sm_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::dep2_cfg>& arr_in_arr_cfg::test_map_sm() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:arr_in_arr_cfg.test_map_sm)
  return _internal_test_map_sm();
}
inline ::google::protobuf::Map<std::string, ::dep2_cfg>* arr_in_arr_cfg::_internal_mutable_test_map_sm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_map_sm_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::dep2_cfg>* arr_in_arr_cfg::mutable_test_map_sm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:arr_in_arr_cfg.test_map_sm)
  return _internal_mutable_test_map_sm();
}

// -------------------------------------------------------------------

// event_reward_item

// optional uint32 item_id = 1;
inline bool event_reward_item::has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void event_reward_item::clear_item_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.item_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t event_reward_item::item_id() const {
  // @@protoc_insertion_point(field_get:event_reward_item.item_id)
  return _internal_item_id();
}
inline void event_reward_item::set_item_id(::uint32_t value) {
  _internal_set_item_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:event_reward_item.item_id)
}
inline ::uint32_t event_reward_item::_internal_item_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.item_id_;
}
inline void event_reward_item::_internal_set_item_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.item_id_ = value;
}

// optional uint32 item_count = 2;
inline bool event_reward_item::has_item_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void event_reward_item::clear_item_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.item_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t event_reward_item::item_count() const {
  // @@protoc_insertion_point(field_get:event_reward_item.item_count)
  return _internal_item_count();
}
inline void event_reward_item::set_item_count(::uint32_t value) {
  _internal_set_item_count(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:event_reward_item.item_count)
}
inline ::uint32_t event_reward_item::_internal_item_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.item_count_;
}
inline void event_reward_item::_internal_set_item_count(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.item_count_ = value;
}

// string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
inline bool event_reward_item::has_nested_note() const {
  return nested_case() == kNestedNote;
}
inline void event_reward_item::set_has_nested_note() {
  _impl_._oneof_case_[0] = kNestedNote;
}
inline void event_reward_item::clear_nested_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() == kNestedNote) {
    _impl_.nested_.nested_note_.Destroy();
    clear_has_nested();
  }
}
inline const std::string& event_reward_item::nested_note() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_reward_item.nested_note)
  return _internal_nested_note();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void event_reward_item::set_nested_note(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() != kNestedNote) {
    clear_nested();

    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:event_reward_item.nested_note)
}
inline std::string* event_reward_item::mutable_nested_note() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nested_note();
  // @@protoc_insertion_point(field_mutable:event_reward_item.nested_note)
  return _s;
}
inline const std::string& event_reward_item::_internal_nested_note() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (nested_case() != kNestedNote) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.nested_.nested_note_.Get();
}
inline void event_reward_item::_internal_set_nested_note(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() != kNestedNote) {
    clear_nested();

    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set(value, GetArena());
}
inline std::string* event_reward_item::_internal_mutable_nested_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() != kNestedNote) {
    clear_nested();

    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  return _impl_.nested_.nested_note_.Mutable( GetArena());
}
inline std::string* event_reward_item::release_nested_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:event_reward_item.nested_note)
  if (nested_case() != kNestedNote) {
    return nullptr;
  }
  clear_has_nested();
  return _impl_.nested_.nested_note_.Release();
}
inline void event_reward_item::set_allocated_nested_note(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_nested()) {
    clear_nested();
  }
  if (value != nullptr) {
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:event_reward_item.nested_note)
}

// .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
inline bool event_reward_item::has_nested_enum_type() const {
  return nested_case() == kNestedEnumType;
}
inline void event_reward_item::set_has_nested_enum_type() {
  _impl_._oneof_case_[0] = kNestedEnumType;
}
inline void event_reward_item::clear_nested_enum_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() == kNestedEnumType) {
    _impl_.nested_.nested_enum_type_ = 0;
    clear_has_nested();
  }
}
inline ::cost_type event_reward_item::nested_enum_type() const {
  // @@protoc_insertion_point(field_get:event_reward_item.nested_enum_type)
  return _internal_nested_enum_type();
}
inline void event_reward_item::set_nested_enum_type(::cost_type value) {
  assert(::cost_type_IsValid(value));
  if (nested_case() != kNestedEnumType) {
    clear_nested();
    set_has_nested_enum_type();
  }
  _impl_.nested_.nested_enum_type_ = value;
  // @@protoc_insertion_point(field_set:event_reward_item.nested_enum_type)
}
inline ::cost_type event_reward_item::_internal_nested_enum_type() const {
  if (nested_case() == kNestedEnumType) {
    return static_cast<::cost_type>(_impl_.nested_.nested_enum_type_);
  }
  return static_cast<::cost_type>(0);
}

inline bool event_reward_item::has_nested() const {
  return nested_case() != NESTED_NOT_SET;
}
inline void event_reward_item::clear_has_nested() {
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}
inline event_reward_item::NestedCase event_reward_item::nested_case() const {
  return event_reward_item::NestedCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// event_rule_item

// optional uint32 rule_id = 1;
inline bool event_rule_item::has_rule_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void event_rule_item::clear_rule_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t event_rule_item::rule_id() const {
  // @@protoc_insertion_point(field_get:event_rule_item.rule_id)
  return _internal_rule_id();
}
inline void event_rule_item::set_rule_id(::uint32_t value) {
  _internal_set_rule_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:event_rule_item.rule_id)
}
inline ::uint32_t event_rule_item::_internal_rule_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_id_;
}
inline void event_rule_item::_internal_set_rule_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_id_ = value;
}

// optional uint32 rule_param = 2;
inline bool event_rule_item::has_rule_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void event_rule_item::clear_rule_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_param_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t event_rule_item::rule_param() const {
  // @@protoc_insertion_point(field_get:event_rule_item.rule_param)
  return _internal_rule_param();
}
inline void event_rule_item::set_rule_param(::uint32_t value) {
  _internal_set_rule_param(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:event_rule_item.rule_param)
}
inline ::uint32_t event_rule_item::_internal_rule_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rule_param_;
}
inline void event_rule_item::_internal_set_rule_param(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rule_param_ = value;
}

// string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
inline bool event_rule_item::has_nested_note() const {
  return nested_case() == kNestedNote;
}
inline void event_rule_item::set_has_nested_note() {
  _impl_._oneof_case_[0] = kNestedNote;
}
inline void event_rule_item::clear_nested_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() == kNestedNote) {
    _impl_.nested_.nested_note_.Destroy();
    clear_has_nested();
  }
}
inline const std::string& event_rule_item::nested_note() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_rule_item.nested_note)
  return _internal_nested_note();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void event_rule_item::set_nested_note(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() != kNestedNote) {
    clear_nested();

    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:event_rule_item.nested_note)
}
inline std::string* event_rule_item::mutable_nested_note() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nested_note();
  // @@protoc_insertion_point(field_mutable:event_rule_item.nested_note)
  return _s;
}
inline const std::string& event_rule_item::_internal_nested_note() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (nested_case() != kNestedNote) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.nested_.nested_note_.Get();
}
inline void event_rule_item::_internal_set_nested_note(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() != kNestedNote) {
    clear_nested();

    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set(value, GetArena());
}
inline std::string* event_rule_item::_internal_mutable_nested_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() != kNestedNote) {
    clear_nested();

    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  return _impl_.nested_.nested_note_.Mutable( GetArena());
}
inline std::string* event_rule_item::release_nested_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:event_rule_item.nested_note)
  if (nested_case() != kNestedNote) {
    return nullptr;
  }
  clear_has_nested();
  return _impl_.nested_.nested_note_.Release();
}
inline void event_rule_item::set_allocated_nested_note(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_nested()) {
    clear_nested();
  }
  if (value != nullptr) {
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:event_rule_item.nested_note)
}

// .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
inline bool event_rule_item::has_nested_enum_type() const {
  return nested_case() == kNestedEnumType;
}
inline void event_rule_item::set_has_nested_enum_type() {
  _impl_._oneof_case_[0] = kNestedEnumType;
}
inline void event_rule_item::clear_nested_enum_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (nested_case() == kNestedEnumType) {
    _impl_.nested_.nested_enum_type_ = 0;
    clear_has_nested();
  }
}
inline ::cost_type event_rule_item::nested_enum_type() const {
  // @@protoc_insertion_point(field_get:event_rule_item.nested_enum_type)
  return _internal_nested_enum_type();
}
inline void event_rule_item::set_nested_enum_type(::cost_type value) {
  assert(::cost_type_IsValid(value));
  if (nested_case() != kNestedEnumType) {
    clear_nested();
    set_has_nested_enum_type();
  }
  _impl_.nested_.nested_enum_type_ = value;
  // @@protoc_insertion_point(field_set:event_rule_item.nested_enum_type)
}
inline ::cost_type event_rule_item::_internal_nested_enum_type() const {
  if (nested_case() == kNestedEnumType) {
    return static_cast<::cost_type>(_impl_.nested_.nested_enum_type_);
  }
  return static_cast<::cost_type>(0);
}

inline bool event_rule_item::has_nested() const {
  return nested_case() != NESTED_NOT_SET;
}
inline void event_rule_item::clear_has_nested() {
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}
inline event_rule_item::NestedCase event_rule_item::nested_case() const {
  return event_rule_item::NestedCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// event_cfg

// optional uint32 id = 1 [(.org.xresloader.validator) = "custom_rule4", (.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 100];
inline bool event_cfg::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void event_cfg::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t event_cfg::id() const {
  // @@protoc_insertion_point(field_get:event_cfg.id)
  return _internal_id();
}
inline void event_cfg::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:event_cfg.id)
}
inline ::uint32_t event_cfg::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void event_cfg::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional uint32 process = 2 [(.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 1];
inline bool event_cfg::has_process() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void event_cfg::clear_process() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.process_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t event_cfg::process() const {
  // @@protoc_insertion_point(field_get:event_cfg.process)
  return _internal_process();
}
inline void event_cfg::set_process(::uint32_t value) {
  _internal_set_process(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:event_cfg.process)
}
inline ::uint32_t event_cfg::_internal_process() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.process_;
}
inline void event_cfg::_internal_set_process(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.process_ = value;
}

// optional .event_rule_item rule = 6;
inline bool event_cfg::has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline void event_cfg::clear_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::event_rule_item& event_cfg::_internal_rule() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::event_rule_item* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::event_rule_item&>(::_event_rule_item_default_instance_);
}
inline const ::event_rule_item& event_cfg::rule() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_cfg.rule)
  return _internal_rule();
}
inline void event_cfg::unsafe_arena_set_allocated_rule(::event_rule_item* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = reinterpret_cast<::event_rule_item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_cfg.rule)
}
inline ::event_rule_item* event_cfg::release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_rule_item* released = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::event_rule_item* event_cfg::unsafe_arena_release_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:event_cfg.rule)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_rule_item* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::event_rule_item* event_cfg::_internal_mutable_rule() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rule_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::event_rule_item>(GetArena());
    _impl_.rule_ = reinterpret_cast<::event_rule_item*>(p);
  }
  return _impl_.rule_;
}
inline ::event_rule_item* event_cfg::mutable_rule() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::event_rule_item* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:event_cfg.rule)
  return _msg;
}
inline void event_cfg::set_allocated_rule(::event_rule_item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.rule_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.rule_ = reinterpret_cast<::event_rule_item*>(value);
  // @@protoc_insertion_point(field_set_allocated:event_cfg.rule)
}

// optional .event_rule_item specify_field = 7;
inline bool event_cfg::has_specify_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.specify_field_ != nullptr);
  return value;
}
inline void event_cfg::clear_specify_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.specify_field_ != nullptr) _impl_.specify_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::event_rule_item& event_cfg::_internal_specify_field() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::event_rule_item* p = _impl_.specify_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::event_rule_item&>(::_event_rule_item_default_instance_);
}
inline const ::event_rule_item& event_cfg::specify_field() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_cfg.specify_field)
  return _internal_specify_field();
}
inline void event_cfg::unsafe_arena_set_allocated_specify_field(::event_rule_item* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.specify_field_);
  }
  _impl_.specify_field_ = reinterpret_cast<::event_rule_item*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_cfg.specify_field)
}
inline ::event_rule_item* event_cfg::release_specify_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::event_rule_item* released = _impl_.specify_field_;
  _impl_.specify_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::event_rule_item* event_cfg::unsafe_arena_release_specify_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:event_cfg.specify_field)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::event_rule_item* temp = _impl_.specify_field_;
  _impl_.specify_field_ = nullptr;
  return temp;
}
inline ::event_rule_item* event_cfg::_internal_mutable_specify_field() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.specify_field_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::event_rule_item>(GetArena());
    _impl_.specify_field_ = reinterpret_cast<::event_rule_item*>(p);
  }
  return _impl_.specify_field_;
}
inline ::event_rule_item* event_cfg::mutable_specify_field() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::event_rule_item* _msg = _internal_mutable_specify_field();
  // @@protoc_insertion_point(field_mutable:event_cfg.specify_field)
  return _msg;
}
inline void event_cfg::set_allocated_specify_field(::event_rule_item* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.specify_field_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.specify_field_ = reinterpret_cast<::event_rule_item*>(value);
  // @@protoc_insertion_point(field_set_allocated:event_cfg.specify_field)
}

// .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
inline bool event_cfg::has_item() const {
  return reward_case() == kItem;
}
inline bool event_cfg::_internal_has_item() const {
  return reward_case() == kItem;
}
inline void event_cfg::set_has_item() {
  _impl_._oneof_case_[0] = kItem;
}
inline void event_cfg::clear_item() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (reward_case() == kItem) {
    if (GetArena() == nullptr) {
      delete _impl_.reward_.item_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.reward_.item_);
    }
    clear_has_reward();
  }
}
inline ::event_reward_item* event_cfg::release_item() {
  // @@protoc_insertion_point(field_release:event_cfg.item)
  if (reward_case() == kItem) {
    clear_has_reward();
    auto* temp = _impl_.reward_.item_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.reward_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_reward_item& event_cfg::_internal_item() const {
  return reward_case() == kItem ? *_impl_.reward_.item_ : reinterpret_cast<::event_reward_item&>(::_event_reward_item_default_instance_);
}
inline const ::event_reward_item& event_cfg::item() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_cfg.item)
  return _internal_item();
}
inline ::event_reward_item* event_cfg::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_cfg.item)
  if (reward_case() == kItem) {
    clear_has_reward();
    auto* temp = _impl_.reward_.item_;
    _impl_.reward_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void event_cfg::unsafe_arena_set_allocated_item(::event_reward_item* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_reward();
  if (value) {
    set_has_item();
    _impl_.reward_.item_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_cfg.item)
}
inline ::event_reward_item* event_cfg::_internal_mutable_item() {
  if (reward_case() != kItem) {
    clear_reward();
    set_has_item();
    _impl_.reward_.item_ =
        ::google::protobuf::Message::DefaultConstruct<::event_reward_item>(GetArena());
  }
  return _impl_.reward_.item_;
}
inline ::event_reward_item* event_cfg::mutable_item() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::event_reward_item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:event_cfg.item)
  return _msg;
}

// int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
inline bool event_cfg::has_user_exp() const {
  return reward_case() == kUserExp;
}
inline void event_cfg::set_has_user_exp() {
  _impl_._oneof_case_[0] = kUserExp;
}
inline void event_cfg::clear_user_exp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (reward_case() == kUserExp) {
    _impl_.reward_.user_exp_ = ::int64_t{0};
    clear_has_reward();
  }
}
inline ::int64_t event_cfg::user_exp() const {
  // @@protoc_insertion_point(field_get:event_cfg.user_exp)
  return _internal_user_exp();
}
inline void event_cfg::set_user_exp(::int64_t value) {
  if (reward_case() != kUserExp) {
    clear_reward();
    set_has_user_exp();
  }
  _impl_.reward_.user_exp_ = value;
  // @@protoc_insertion_point(field_set:event_cfg.user_exp)
}
inline ::int64_t event_cfg::_internal_user_exp() const {
  if (reward_case() == kUserExp) {
    return _impl_.reward_.user_exp_;
  }
  return ::int64_t{0};
}

// string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
inline bool event_cfg::has_note() const {
  return reward_case() == kNote;
}
inline void event_cfg::set_has_note() {
  _impl_._oneof_case_[0] = kNote;
}
inline void event_cfg::clear_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (reward_case() == kNote) {
    _impl_.reward_.note_.Destroy();
    clear_has_reward();
  }
}
inline const std::string& event_cfg::note() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_cfg.note)
  return _internal_note();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void event_cfg::set_note(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (reward_case() != kNote) {
    clear_reward();

    set_has_note();
    _impl_.reward_.note_.InitDefault();
  }
  _impl_.reward_.note_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:event_cfg.note)
}
inline std::string* event_cfg::mutable_note() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:event_cfg.note)
  return _s;
}
inline const std::string& event_cfg::_internal_note() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (reward_case() != kNote) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.reward_.note_.Get();
}
inline void event_cfg::_internal_set_note(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (reward_case() != kNote) {
    clear_reward();

    set_has_note();
    _impl_.reward_.note_.InitDefault();
  }
  _impl_.reward_.note_.Set(value, GetArena());
}
inline std::string* event_cfg::_internal_mutable_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (reward_case() != kNote) {
    clear_reward();

    set_has_note();
    _impl_.reward_.note_.InitDefault();
  }
  return _impl_.reward_.note_.Mutable( GetArena());
}
inline std::string* event_cfg::release_note() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:event_cfg.note)
  if (reward_case() != kNote) {
    return nullptr;
  }
  clear_has_reward();
  return _impl_.reward_.note_.Release();
}
inline void event_cfg::set_allocated_note(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_reward()) {
    clear_reward();
  }
  if (value != nullptr) {
    set_has_note();
    _impl_.reward_.note_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:event_cfg.note)
}

// .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
inline bool event_cfg::has_enum_type() const {
  return reward_case() == kEnumType;
}
inline void event_cfg::set_has_enum_type() {
  _impl_._oneof_case_[0] = kEnumType;
}
inline void event_cfg::clear_enum_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (reward_case() == kEnumType) {
    _impl_.reward_.enum_type_ = 0;
    clear_has_reward();
  }
}
inline ::cost_type event_cfg::enum_type() const {
  // @@protoc_insertion_point(field_get:event_cfg.enum_type)
  return _internal_enum_type();
}
inline void event_cfg::set_enum_type(::cost_type value) {
  assert(::cost_type_IsValid(value));
  if (reward_case() != kEnumType) {
    clear_reward();
    set_has_enum_type();
  }
  _impl_.reward_.enum_type_ = value;
  // @@protoc_insertion_point(field_set:event_cfg.enum_type)
}
inline ::cost_type event_cfg::_internal_enum_type() const {
  if (reward_case() == kEnumType) {
    return static_cast<::cost_type>(_impl_.reward_.enum_type_);
  }
  return static_cast<::cost_type>(0);
}

// uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
inline bool event_cfg::has_user_level() const {
  return unlock_type_case() == kUserLevel;
}
inline void event_cfg::set_has_user_level() {
  _impl_._oneof_case_[1] = kUserLevel;
}
inline void event_cfg::clear_user_level() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (unlock_type_case() == kUserLevel) {
    _impl_.unlock_type_.user_level_ = 0u;
    clear_has_unlock_type();
  }
}
inline ::uint32_t event_cfg::user_level() const {
  // @@protoc_insertion_point(field_get:event_cfg.user_level)
  return _internal_user_level();
}
inline void event_cfg::set_user_level(::uint32_t value) {
  if (unlock_type_case() != kUserLevel) {
    clear_unlock_type();
    set_has_user_level();
  }
  _impl_.unlock_type_.user_level_ = value;
  // @@protoc_insertion_point(field_set:event_cfg.user_level)
}
inline ::uint32_t event_cfg::_internal_user_level() const {
  if (unlock_type_case() == kUserLevel) {
    return _impl_.unlock_type_.user_level_;
  }
  return 0u;
}

// repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
inline int event_cfg::_internal_test_arr_size() const {
  return _internal_test_arr().size();
}
inline int event_cfg::test_arr_size() const {
  return _internal_test_arr_size();
}
inline void event_cfg::clear_test_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_arr_.Clear();
}
inline ::event_rule_item* event_cfg::mutable_test_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:event_cfg.test_arr)
  return _internal_mutable_test_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::event_rule_item>* event_cfg::mutable_test_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:event_cfg.test_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test_arr();
}
inline const ::event_rule_item& event_cfg::test_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_cfg.test_arr)
  return _internal_test_arr().Get(index);
}
inline ::event_rule_item* event_cfg::add_test_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::event_rule_item* _add = _internal_mutable_test_arr()->Add();
  // @@protoc_insertion_point(field_add:event_cfg.test_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::event_rule_item>& event_cfg::test_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:event_cfg.test_arr)
  return _internal_test_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::event_rule_item>&
event_cfg::_internal_test_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::event_rule_item>*
event_cfg::_internal_mutable_test_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_arr_;
}

// repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
inline int event_cfg::_internal_test_empty_arr_size() const {
  return _internal_test_empty_arr().size();
}
inline int event_cfg::test_empty_arr_size() const {
  return _internal_test_empty_arr_size();
}
inline void event_cfg::clear_test_empty_arr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_empty_arr_.Clear();
}
inline ::event_rule_item* event_cfg::mutable_test_empty_arr(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:event_cfg.test_empty_arr)
  return _internal_mutable_test_empty_arr()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::event_rule_item>* event_cfg::mutable_test_empty_arr()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:event_cfg.test_empty_arr)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_test_empty_arr();
}
inline const ::event_rule_item& event_cfg::test_empty_arr(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:event_cfg.test_empty_arr)
  return _internal_test_empty_arr().Get(index);
}
inline ::event_rule_item* event_cfg::add_test_empty_arr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::event_rule_item* _add = _internal_mutable_test_empty_arr()->Add();
  // @@protoc_insertion_point(field_add:event_cfg.test_empty_arr)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::event_rule_item>& event_cfg::test_empty_arr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:event_cfg.test_empty_arr)
  return _internal_test_empty_arr();
}
inline const ::google::protobuf::RepeatedPtrField<::event_rule_item>&
event_cfg::_internal_test_empty_arr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_empty_arr_;
}
inline ::google::protobuf::RepeatedPtrField<::event_rule_item>*
event_cfg::_internal_mutable_test_empty_arr() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.test_empty_arr_;
}

inline bool event_cfg::has_reward() const {
  return reward_case() != REWARD_NOT_SET;
}
inline void event_cfg::clear_has_reward() {
  _impl_._oneof_case_[0] = REWARD_NOT_SET;
}
inline bool event_cfg::has_unlock_type() const {
  return unlock_type_case() != UNLOCK_TYPE_NOT_SET;
}
inline void event_cfg::clear_has_unlock_type() {
  _impl_._oneof_case_[1] = UNLOCK_TYPE_NOT_SET;
}
inline event_cfg::RewardCase event_cfg::reward_case() const {
  return event_cfg::RewardCase(_impl_._oneof_case_[0]);
}
inline event_cfg::UnlockTypeCase event_cfg::unlock_type_case() const {
  return event_cfg::UnlockTypeCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// keep_or_strip_empty_list_cfg

// optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
inline bool keep_or_strip_empty_list_cfg::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void keep_or_strip_empty_list_cfg::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t keep_or_strip_empty_list_cfg::id() const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.id)
  return _internal_id();
}
inline void keep_or_strip_empty_list_cfg::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:keep_or_strip_empty_list_cfg.id)
}
inline ::uint32_t keep_or_strip_empty_list_cfg::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void keep_or_strip_empty_list_cfg::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// repeated .dep2_cfg array_msg = 2;
inline int keep_or_strip_empty_list_cfg::_internal_array_msg_size() const {
  return _internal_array_msg().size();
}
inline int keep_or_strip_empty_list_cfg::array_msg_size() const {
  return _internal_array_msg_size();
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::mutable_array_msg(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:keep_or_strip_empty_list_cfg.array_msg)
  return _internal_mutable_array_msg()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dep2_cfg>* keep_or_strip_empty_list_cfg::mutable_array_msg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_msg)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_array_msg();
}
inline const ::dep2_cfg& keep_or_strip_empty_list_cfg::array_msg(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_msg)
  return _internal_array_msg().Get(index);
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::add_array_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::dep2_cfg* _add = _internal_mutable_array_msg()->Add();
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_msg)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dep2_cfg>& keep_or_strip_empty_list_cfg::array_msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_msg)
  return _internal_array_msg();
}
inline const ::google::protobuf::RepeatedPtrField<::dep2_cfg>&
keep_or_strip_empty_list_cfg::_internal_array_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.array_msg_;
}
inline ::google::protobuf::RepeatedPtrField<::dep2_cfg>*
keep_or_strip_empty_list_cfg::_internal_mutable_array_msg() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.array_msg_;
}

// repeated .dep2_cfg array_plain_msg = 3;
inline int keep_or_strip_empty_list_cfg::_internal_array_plain_msg_size() const {
  return _internal_array_plain_msg().size();
}
inline int keep_or_strip_empty_list_cfg::array_plain_msg_size() const {
  return _internal_array_plain_msg_size();
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::mutable_array_plain_msg(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _internal_mutable_array_plain_msg()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dep2_cfg>* keep_or_strip_empty_list_cfg::mutable_array_plain_msg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_plain_msg)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_array_plain_msg();
}
inline const ::dep2_cfg& keep_or_strip_empty_list_cfg::array_plain_msg(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _internal_array_plain_msg().Get(index);
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::add_array_plain_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::dep2_cfg* _add = _internal_mutable_array_plain_msg()->Add();
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dep2_cfg>& keep_or_strip_empty_list_cfg::array_plain_msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _internal_array_plain_msg();
}
inline const ::google::protobuf::RepeatedPtrField<::dep2_cfg>&
keep_or_strip_empty_list_cfg::_internal_array_plain_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.array_plain_msg_;
}
inline ::google::protobuf::RepeatedPtrField<::dep2_cfg>*
keep_or_strip_empty_list_cfg::_internal_mutable_array_plain_msg() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.array_plain_msg_;
}

// repeated int32 array_int32 = 4;
inline int keep_or_strip_empty_list_cfg::_internal_array_int32_size() const {
  return _internal_array_int32().size();
}
inline int keep_or_strip_empty_list_cfg::array_int32_size() const {
  return _internal_array_int32_size();
}
inline void keep_or_strip_empty_list_cfg::clear_array_int32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.array_int32_.Clear();
}
inline ::int32_t keep_or_strip_empty_list_cfg::array_int32(int index) const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_int32)
  return _internal_array_int32().Get(index);
}
inline void keep_or_strip_empty_list_cfg::set_array_int32(int index, ::int32_t value) {
  _internal_mutable_array_int32()->Set(index, value);
  // @@protoc_insertion_point(field_set:keep_or_strip_empty_list_cfg.array_int32)
}
inline void keep_or_strip_empty_list_cfg::add_array_int32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_array_int32()->Add(value);
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_int32)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& keep_or_strip_empty_list_cfg::array_int32() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_int32)
  return _internal_array_int32();
}
inline ::google::protobuf::RepeatedField<::int32_t>* keep_or_strip_empty_list_cfg::mutable_array_int32()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_int32)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_array_int32();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
keep_or_strip_empty_list_cfg::_internal_array_int32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.array_int32_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* keep_or_strip_empty_list_cfg::_internal_mutable_array_int32() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.array_int32_;
}

// repeated int64 array_int64 = 5;
inline int keep_or_strip_empty_list_cfg::_internal_array_int64_size() const {
  return _internal_array_int64().size();
}
inline int keep_or_strip_empty_list_cfg::array_int64_size() const {
  return _internal_array_int64_size();
}
inline void keep_or_strip_empty_list_cfg::clear_array_int64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.array_int64_.Clear();
}
inline ::int64_t keep_or_strip_empty_list_cfg::array_int64(int index) const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_int64)
  return _internal_array_int64().Get(index);
}
inline void keep_or_strip_empty_list_cfg::set_array_int64(int index, ::int64_t value) {
  _internal_mutable_array_int64()->Set(index, value);
  // @@protoc_insertion_point(field_set:keep_or_strip_empty_list_cfg.array_int64)
}
inline void keep_or_strip_empty_list_cfg::add_array_int64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_array_int64()->Add(value);
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_int64)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& keep_or_strip_empty_list_cfg::array_int64() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_int64)
  return _internal_array_int64();
}
inline ::google::protobuf::RepeatedField<::int64_t>* keep_or_strip_empty_list_cfg::mutable_array_int64()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_int64)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_array_int64();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
keep_or_strip_empty_list_cfg::_internal_array_int64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.array_int64_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* keep_or_strip_empty_list_cfg::_internal_mutable_array_int64() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.array_int64_;
}

// -------------------------------------------------------------------

// combine_id

// optional uint32 prefix = 1;
inline bool combine_id::has_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void combine_id::clear_prefix() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t combine_id::prefix() const {
  // @@protoc_insertion_point(field_get:combine_id.prefix)
  return _internal_prefix();
}
inline void combine_id::set_prefix(::uint32_t value) {
  _internal_set_prefix(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:combine_id.prefix)
}
inline ::uint32_t combine_id::_internal_prefix() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prefix_;
}
inline void combine_id::_internal_set_prefix(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prefix_ = value;
}

// optional uint32 id = 2 [(.org.xresloader.validator) = "0-99999"];
inline bool combine_id::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void combine_id::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t combine_id::id() const {
  // @@protoc_insertion_point(field_get:combine_id.id)
  return _internal_id();
}
inline void combine_id::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:combine_id.id)
}
inline ::uint32_t combine_id::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void combine_id::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// process_by_script

// optional uint32 id = 1;
inline bool process_by_script::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void process_by_script::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t process_by_script::id() const {
  // @@protoc_insertion_point(field_get:process_by_script.id)
  return _internal_id();
}
inline void process_by_script::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:process_by_script.id)
}
inline ::uint32_t process_by_script::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void process_by_script::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// map<uint32, string> map_u32_string = 2;
inline int process_by_script::_internal_map_u32_string_size() const {
  return _internal_map_u32_string().size();
}
inline int process_by_script::map_u32_string_size() const {
  return _internal_map_u32_string_size();
}
inline void process_by_script::clear_map_u32_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.map_u32_string_.Clear();
}
inline const ::google::protobuf::Map<::uint32_t, std::string>& process_by_script::_internal_map_u32_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.map_u32_string_.GetMap();
}
inline const ::google::protobuf::Map<::uint32_t, std::string>& process_by_script::map_u32_string() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:process_by_script.map_u32_string)
  return _internal_map_u32_string();
}
inline ::google::protobuf::Map<::uint32_t, std::string>* process_by_script::_internal_mutable_map_u32_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.map_u32_string_.MutableMap();
}
inline ::google::protobuf::Map<::uint32_t, std::string>* process_by_script::mutable_map_u32_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:process_by_script.map_u32_string)
  return _internal_mutable_map_u32_string();
}

// map<int32, string> test_map_is = 7;
inline int process_by_script::_internal_test_map_is_size() const {
  return _internal_test_map_is().size();
}
inline int process_by_script::test_map_is_size() const {
  return _internal_test_map_is_size();
}
inline void process_by_script::clear_test_map_is() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_map_is_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, std::string>& process_by_script::_internal_test_map_is() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_map_is_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, std::string>& process_by_script::test_map_is() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:process_by_script.test_map_is)
  return _internal_test_map_is();
}
inline ::google::protobuf::Map<::int32_t, std::string>* process_by_script::_internal_mutable_test_map_is() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_map_is_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, std::string>* process_by_script::mutable_test_map_is() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:process_by_script.test_map_is)
  return _internal_mutable_test_map_is();
}

// map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
inline int process_by_script::_internal_test_map_sm_size() const {
  return _internal_test_map_sm().size();
}
inline int process_by_script::test_map_sm_size() const {
  return _internal_test_map_sm_size();
}
inline const ::google::protobuf::Map<std::string, ::dep2_cfg>& process_by_script::_internal_test_map_sm() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_map_sm_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::dep2_cfg>& process_by_script::test_map_sm() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:process_by_script.test_map_sm)
  return _internal_test_map_sm();
}
inline ::google::protobuf::Map<std::string, ::dep2_cfg>* process_by_script::_internal_mutable_test_map_sm() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_map_sm_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::dep2_cfg>* process_by_script::mutable_test_map_sm() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:process_by_script.test_map_sm)
  return _internal_mutable_test_map_sm();
}

// optional .combine_id id_id = 1001;
inline bool process_by_script::has_id_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_id_ != nullptr);
  return value;
}
inline void process_by_script::clear_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_id_ != nullptr) _impl_.id_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::combine_id& process_by_script::_internal_id_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::combine_id* p = _impl_.id_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::combine_id&>(::_combine_id_default_instance_);
}
inline const ::combine_id& process_by_script::id_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:process_by_script.id_id)
  return _internal_id_id();
}
inline void process_by_script::unsafe_arena_set_allocated_id_id(::combine_id* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_id_);
  }
  _impl_.id_id_ = reinterpret_cast<::combine_id*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:process_by_script.id_id)
}
inline ::combine_id* process_by_script::release_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::combine_id* released = _impl_.id_id_;
  _impl_.id_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::combine_id* process_by_script::unsafe_arena_release_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:process_by_script.id_id)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::combine_id* temp = _impl_.id_id_;
  _impl_.id_id_ = nullptr;
  return temp;
}
inline ::combine_id* process_by_script::_internal_mutable_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::combine_id>(GetArena());
    _impl_.id_id_ = reinterpret_cast<::combine_id*>(p);
  }
  return _impl_.id_id_;
}
inline ::combine_id* process_by_script::mutable_id_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::combine_id* _msg = _internal_mutable_id_id();
  // @@protoc_insertion_point(field_mutable:process_by_script.id_id)
  return _msg;
}
inline void process_by_script::set_allocated_id_id(::combine_id* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.id_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.id_id_ = reinterpret_cast<::combine_id*>(value);
  // @@protoc_insertion_point(field_set_allocated:process_by_script.id_id)
}

// -------------------------------------------------------------------

// large_file_test

// optional uint32 id = 1;
inline bool large_file_test::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void large_file_test::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t large_file_test::id() const {
  // @@protoc_insertion_point(field_get:large_file_test.id)
  return _internal_id();
}
inline void large_file_test::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:large_file_test.id)
}
inline ::uint32_t large_file_test::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void large_file_test::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional int32 i32value = 2;
inline bool large_file_test::has_i32value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void large_file_test::clear_i32value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.i32value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t large_file_test::i32value() const {
  // @@protoc_insertion_point(field_get:large_file_test.i32value)
  return _internal_i32value();
}
inline void large_file_test::set_i32value(::int32_t value) {
  _internal_set_i32value(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:large_file_test.i32value)
}
inline ::int32_t large_file_test::_internal_i32value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.i32value_;
}
inline void large_file_test::_internal_set_i32value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.i32value_ = value;
}

// optional uint64 u64value = 3;
inline bool large_file_test::has_u64value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void large_file_test::clear_u64value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.u64value_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t large_file_test::u64value() const {
  // @@protoc_insertion_point(field_get:large_file_test.u64value)
  return _internal_u64value();
}
inline void large_file_test::set_u64value(::uint64_t value) {
  _internal_set_u64value(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:large_file_test.u64value)
}
inline ::uint64_t large_file_test::_internal_u64value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.u64value_;
}
inline void large_file_test::_internal_set_u64value(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.u64value_ = value;
}

// optional double f64value = 4;
inline bool large_file_test::has_f64value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void large_file_test::clear_f64value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f64value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double large_file_test::f64value() const {
  // @@protoc_insertion_point(field_get:large_file_test.f64value)
  return _internal_f64value();
}
inline void large_file_test::set_f64value(double value) {
  _internal_set_f64value(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:large_file_test.f64value)
}
inline double large_file_test::_internal_f64value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f64value_;
}
inline void large_file_test::_internal_set_f64value(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f64value_ = value;
}

// optional float f32value = 5;
inline bool large_file_test::has_f32value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void large_file_test::clear_f32value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f32value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float large_file_test::f32value() const {
  // @@protoc_insertion_point(field_get:large_file_test.f32value)
  return _internal_f32value();
}
inline void large_file_test::set_f32value(float value) {
  _internal_set_f32value(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:large_file_test.f32value)
}
inline float large_file_test::_internal_f32value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f32value_;
}
inline void large_file_test::_internal_set_f32value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f32value_ = value;
}

// optional string szvalue = 6;
inline bool large_file_test::has_szvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void large_file_test::clear_szvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.szvalue_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& large_file_test::szvalue() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:large_file_test.szvalue)
  return _internal_szvalue();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void large_file_test::set_szvalue(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.szvalue_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:large_file_test.szvalue)
}
inline std::string* large_file_test::mutable_szvalue() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_szvalue();
  // @@protoc_insertion_point(field_mutable:large_file_test.szvalue)
  return _s;
}
inline const std::string& large_file_test::_internal_szvalue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.szvalue_.Get();
}
inline void large_file_test::_internal_set_szvalue(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.szvalue_.Set(value, GetArena());
}
inline std::string* large_file_test::_internal_mutable_szvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.szvalue_.Mutable( GetArena());
}
inline std::string* large_file_test::release_szvalue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:large_file_test.szvalue)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.szvalue_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.szvalue_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void large_file_test::set_allocated_szvalue(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.szvalue_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.szvalue_.IsDefault()) {
          _impl_.szvalue_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:large_file_test.szvalue)
}

// optional .combine_id id_id = 7;
inline bool large_file_test::has_id_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_id_ != nullptr);
  return value;
}
inline void large_file_test::clear_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_id_ != nullptr) _impl_.id_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::combine_id& large_file_test::_internal_id_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::combine_id* p = _impl_.id_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::combine_id&>(::_combine_id_default_instance_);
}
inline const ::combine_id& large_file_test::id_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:large_file_test.id_id)
  return _internal_id_id();
}
inline void large_file_test::unsafe_arena_set_allocated_id_id(::combine_id* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.id_id_);
  }
  _impl_.id_id_ = reinterpret_cast<::combine_id*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:large_file_test.id_id)
}
inline ::combine_id* large_file_test::release_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::combine_id* released = _impl_.id_id_;
  _impl_.id_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::combine_id* large_file_test::unsafe_arena_release_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:large_file_test.id_id)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::combine_id* temp = _impl_.id_id_;
  _impl_.id_id_ = nullptr;
  return temp;
}
inline ::combine_id* large_file_test::_internal_mutable_id_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.id_id_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::combine_id>(GetArena());
    _impl_.id_id_ = reinterpret_cast<::combine_id*>(p);
  }
  return _impl_.id_id_;
}
inline ::combine_id* large_file_test::mutable_id_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::combine_id* _msg = _internal_mutable_id_id();
  // @@protoc_insertion_point(field_mutable:large_file_test.id_id)
  return _msg;
}
inline void large_file_test::set_allocated_id_id(::combine_id* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.id_id_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.id_id_ = reinterpret_cast<::combine_id*>(value);
  // @@protoc_insertion_point(field_set_allocated:large_file_test.id_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_kind_2eproto_2epb_2eh
