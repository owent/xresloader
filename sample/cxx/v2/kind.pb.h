// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kind_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "xresloader.pb.h"
#include "xresloader_ue.pb.h"
#include "dep_level2.pb.h"
#include "dependency.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kind_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kind_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kind_2eproto;
class arr_in_arr;
struct arr_in_arrDefaultTypeInternal;
extern arr_in_arrDefaultTypeInternal _arr_in_arr_default_instance_;
class arr_in_arr_cfg;
struct arr_in_arr_cfgDefaultTypeInternal;
extern arr_in_arr_cfgDefaultTypeInternal _arr_in_arr_cfg_default_instance_;
class arr_in_arr_cfg_TestMapIsEntry_DoNotUse;
struct arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal;
extern arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_;
class arr_in_arr_cfg_TestMapSmEntry_DoNotUse;
struct arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal;
extern arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_;
class event_cfg;
struct event_cfgDefaultTypeInternal;
extern event_cfgDefaultTypeInternal _event_cfg_default_instance_;
class event_reward_item;
struct event_reward_itemDefaultTypeInternal;
extern event_reward_itemDefaultTypeInternal _event_reward_item_default_instance_;
class event_rule_item;
struct event_rule_itemDefaultTypeInternal;
extern event_rule_itemDefaultTypeInternal _event_rule_item_default_instance_;
class keep_or_strip_empty_list_cfg;
struct keep_or_strip_empty_list_cfgDefaultTypeInternal;
extern keep_or_strip_empty_list_cfgDefaultTypeInternal _keep_or_strip_empty_list_cfg_default_instance_;
class role_cfg;
struct role_cfgDefaultTypeInternal;
extern role_cfgDefaultTypeInternal _role_cfg_default_instance_;
class role_upgrade_cfg;
struct role_upgrade_cfgDefaultTypeInternal;
extern role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
class test_msg_verifier;
struct test_msg_verifierDefaultTypeInternal;
extern test_msg_verifierDefaultTypeInternal _test_msg_verifier_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::arr_in_arr* Arena::CreateMaybeMessage<::arr_in_arr>(Arena*);
template<> ::arr_in_arr_cfg* Arena::CreateMaybeMessage<::arr_in_arr_cfg>(Arena*);
template<> ::arr_in_arr_cfg_TestMapIsEntry_DoNotUse* Arena::CreateMaybeMessage<::arr_in_arr_cfg_TestMapIsEntry_DoNotUse>(Arena*);
template<> ::arr_in_arr_cfg_TestMapSmEntry_DoNotUse* Arena::CreateMaybeMessage<::arr_in_arr_cfg_TestMapSmEntry_DoNotUse>(Arena*);
template<> ::event_cfg* Arena::CreateMaybeMessage<::event_cfg>(Arena*);
template<> ::event_reward_item* Arena::CreateMaybeMessage<::event_reward_item>(Arena*);
template<> ::event_rule_item* Arena::CreateMaybeMessage<::event_rule_item>(Arena*);
template<> ::keep_or_strip_empty_list_cfg* Arena::CreateMaybeMessage<::keep_or_strip_empty_list_cfg>(Arena*);
template<> ::role_cfg* Arena::CreateMaybeMessage<::role_cfg>(Arena*);
template<> ::role_upgrade_cfg* Arena::CreateMaybeMessage<::role_upgrade_cfg>(Arena*);
template<> ::test_msg_verifier* Arena::CreateMaybeMessage<::test_msg_verifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class role_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:role_cfg) */ {
 public:
  inline role_cfg() : role_cfg(nullptr) {}
  ~role_cfg() override;
  explicit PROTOBUF_CONSTEXPR role_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  role_cfg(const role_cfg& from);
  role_cfg(role_cfg&& from) noexcept
    : role_cfg() {
    *this = ::std::move(from);
  }

  inline role_cfg& operator=(const role_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_cfg& operator=(role_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const role_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const role_cfg* internal_default_instance() {
    return reinterpret_cast<const role_cfg*>(
               &_role_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(role_cfg& a, role_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(role_cfg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(role_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  role_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<role_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const role_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const role_cfg& from) {
    role_cfg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(role_cfg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "role_cfg";
  }
  protected:
  explicit role_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestArrayFieldNumber = 11,
    kTestPlainEnumArrayFieldNumber = 13,
    kConvertTimepointArrFieldNumber = 25,
    kOriginTimepointArrFieldNumber = 26,
    kConvertDurationArrFieldNumber = 27,
    kOriginDurationArrFieldNumber = 28,
    kNameFieldNumber = 5,
    kIntAsStringFieldNumber = 12,
    kOriginTimepointOneFieldNumber = 22,
    kOriginDurationOneFieldNumber = 24,
    kDepTestFieldNumber = 10,
    kConvertTimepointOneFieldNumber = 21,
    kConvertDurationOneFieldNumber = 23,
    kIdFieldNumber = 1,
    kUnlockLevelFieldNumber = 2,
    kCostTypeFieldNumber = 3,
    kCostValueFieldNumber = 4,
  };
  // repeated string test_array = 11;
  int test_array_size() const;
  private:
  int _internal_test_array_size() const;
  public:
  void clear_test_array();
  const std::string& test_array(int index) const;
  std::string* mutable_test_array(int index);
  void set_test_array(int index, const std::string& value);
  void set_test_array(int index, std::string&& value);
  void set_test_array(int index, const char* value);
  void set_test_array(int index, const char* value, size_t size);
  std::string* add_test_array();
  void add_test_array(const std::string& value);
  void add_test_array(std::string&& value);
  void add_test_array(const char* value);
  void add_test_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& test_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_test_array();
  private:
  const std::string& _internal_test_array(int index) const;
  std::string* _internal_add_test_array();
  public:

  // repeated .cost_type test_plain_enum_array = 13;
  int test_plain_enum_array_size() const;
  private:
  int _internal_test_plain_enum_array_size() const;
  public:
  void clear_test_plain_enum_array();
  private:
  ::cost_type _internal_test_plain_enum_array(int index) const;
  void _internal_add_test_plain_enum_array(::cost_type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_test_plain_enum_array();
  public:
  ::cost_type test_plain_enum_array(int index) const;
  void set_test_plain_enum_array(int index, ::cost_type value);
  void add_test_plain_enum_array(::cost_type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& test_plain_enum_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_test_plain_enum_array();

  // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
  int convert_timepoint_arr_size() const;
  private:
  int _internal_convert_timepoint_arr_size() const;
  public:
  void clear_convert_timepoint_arr();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_convert_timepoint_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >*
      mutable_convert_timepoint_arr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_convert_timepoint_arr(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_add_convert_timepoint_arr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& convert_timepoint_arr(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* add_convert_timepoint_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >&
      convert_timepoint_arr() const;

  // repeated string origin_timepoint_arr = 26;
  int origin_timepoint_arr_size() const;
  private:
  int _internal_origin_timepoint_arr_size() const;
  public:
  void clear_origin_timepoint_arr();
  const std::string& origin_timepoint_arr(int index) const;
  std::string* mutable_origin_timepoint_arr(int index);
  void set_origin_timepoint_arr(int index, const std::string& value);
  void set_origin_timepoint_arr(int index, std::string&& value);
  void set_origin_timepoint_arr(int index, const char* value);
  void set_origin_timepoint_arr(int index, const char* value, size_t size);
  std::string* add_origin_timepoint_arr();
  void add_origin_timepoint_arr(const std::string& value);
  void add_origin_timepoint_arr(std::string&& value);
  void add_origin_timepoint_arr(const char* value);
  void add_origin_timepoint_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& origin_timepoint_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_origin_timepoint_arr();
  private:
  const std::string& _internal_origin_timepoint_arr(int index) const;
  std::string* _internal_add_origin_timepoint_arr();
  public:

  // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
  int convert_duration_arr_size() const;
  private:
  int _internal_convert_duration_arr_size() const;
  public:
  void clear_convert_duration_arr();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_convert_duration_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >*
      mutable_convert_duration_arr();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_convert_duration_arr(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_add_convert_duration_arr();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Duration& convert_duration_arr(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Duration* add_convert_duration_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >&
      convert_duration_arr() const;

  // repeated string origin_duration_arr = 28;
  int origin_duration_arr_size() const;
  private:
  int _internal_origin_duration_arr_size() const;
  public:
  void clear_origin_duration_arr();
  const std::string& origin_duration_arr(int index) const;
  std::string* mutable_origin_duration_arr(int index);
  void set_origin_duration_arr(int index, const std::string& value);
  void set_origin_duration_arr(int index, std::string&& value);
  void set_origin_duration_arr(int index, const char* value);
  void set_origin_duration_arr(int index, const char* value, size_t size);
  std::string* add_origin_duration_arr();
  void add_origin_duration_arr(const std::string& value);
  void add_origin_duration_arr(std::string&& value);
  void add_origin_duration_arr(const char* value);
  void add_origin_duration_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& origin_duration_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_origin_duration_arr();
  private:
  const std::string& _internal_origin_duration_arr(int index) const;
  std::string* _internal_add_origin_duration_arr();
  public:

  // optional string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string int_as_string = 12;
  bool has_int_as_string() const;
  private:
  bool _internal_has_int_as_string() const;
  public:
  void clear_int_as_string();
  const std::string& int_as_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_int_as_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_int_as_string();
  PROTOBUF_NODISCARD std::string* release_int_as_string();
  void set_allocated_int_as_string(std::string* int_as_string);
  private:
  const std::string& _internal_int_as_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_int_as_string(const std::string& value);
  std::string* _internal_mutable_int_as_string();
  public:

  // optional string origin_timepoint_one = 22;
  bool has_origin_timepoint_one() const;
  private:
  bool _internal_has_origin_timepoint_one() const;
  public:
  void clear_origin_timepoint_one();
  const std::string& origin_timepoint_one() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin_timepoint_one(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin_timepoint_one();
  PROTOBUF_NODISCARD std::string* release_origin_timepoint_one();
  void set_allocated_origin_timepoint_one(std::string* origin_timepoint_one);
  private:
  const std::string& _internal_origin_timepoint_one() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_timepoint_one(const std::string& value);
  std::string* _internal_mutable_origin_timepoint_one();
  public:

  // optional string origin_duration_one = 24;
  bool has_origin_duration_one() const;
  private:
  bool _internal_has_origin_duration_one() const;
  public:
  void clear_origin_duration_one();
  const std::string& origin_duration_one() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin_duration_one(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin_duration_one();
  PROTOBUF_NODISCARD std::string* release_origin_duration_one();
  void set_allocated_origin_duration_one(std::string* origin_duration_one);
  private:
  const std::string& _internal_origin_duration_one() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_duration_one(const std::string& value);
  std::string* _internal_mutable_origin_duration_one();
  public:

  // optional .dep_cfg dep_test = 10;
  bool has_dep_test() const;
  private:
  bool _internal_has_dep_test() const;
  public:
  void clear_dep_test();
  const ::dep_cfg& dep_test() const;
  PROTOBUF_NODISCARD ::dep_cfg* release_dep_test();
  ::dep_cfg* mutable_dep_test();
  void set_allocated_dep_test(::dep_cfg* dep_test);
  private:
  const ::dep_cfg& _internal_dep_test() const;
  ::dep_cfg* _internal_mutable_dep_test();
  public:
  void unsafe_arena_set_allocated_dep_test(
      ::dep_cfg* dep_test);
  ::dep_cfg* unsafe_arena_release_dep_test();

  // optional .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
  bool has_convert_timepoint_one() const;
  private:
  bool _internal_has_convert_timepoint_one() const;
  public:
  void clear_convert_timepoint_one();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& convert_timepoint_one() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_convert_timepoint_one();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_convert_timepoint_one();
  void set_allocated_convert_timepoint_one(::PROTOBUF_NAMESPACE_ID::Timestamp* convert_timepoint_one);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_convert_timepoint_one() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_convert_timepoint_one();
  public:
  void unsafe_arena_set_allocated_convert_timepoint_one(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* convert_timepoint_one);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_convert_timepoint_one();

  // optional .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
  bool has_convert_duration_one() const;
  private:
  bool _internal_has_convert_duration_one() const;
  public:
  void clear_convert_duration_one();
  const ::PROTOBUF_NAMESPACE_ID::Duration& convert_duration_one() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_convert_duration_one();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_convert_duration_one();
  void set_allocated_convert_duration_one(::PROTOBUF_NAMESPACE_ID::Duration* convert_duration_one);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_convert_duration_one() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_convert_duration_one();
  public:
  void unsafe_arena_set_allocated_convert_duration_one(
      ::PROTOBUF_NAMESPACE_ID::Duration* convert_duration_one);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_convert_duration_one();

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 unlock_level = 2;
  bool has_unlock_level() const;
  private:
  bool _internal_has_unlock_level() const;
  public:
  void clear_unlock_level();
  uint32_t unlock_level() const;
  void set_unlock_level(uint32_t value);
  private:
  uint32_t _internal_unlock_level() const;
  void _internal_set_unlock_level(uint32_t value);
  public:

  // optional uint32 cost_type = 3;
  bool has_cost_type() const;
  private:
  bool _internal_has_cost_type() const;
  public:
  void clear_cost_type();
  uint32_t cost_type() const;
  void set_cost_type(uint32_t value);
  private:
  uint32_t _internal_cost_type() const;
  void _internal_set_cost_type(uint32_t value);
  public:

  // optional int32 cost_value = 4;
  bool has_cost_value() const;
  private:
  bool _internal_has_cost_value() const;
  public:
  void clear_cost_value();
  int32_t cost_value() const;
  void set_cost_value(int32_t value);
  private:
  int32_t _internal_cost_value() const;
  void _internal_set_cost_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:role_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> test_array_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> test_plain_enum_array_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp > convert_timepoint_arr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> origin_timepoint_arr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration > convert_duration_arr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> origin_duration_arr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr int_as_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_timepoint_one_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_duration_one_;
    ::dep_cfg* dep_test_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* convert_timepoint_one_;
    ::PROTOBUF_NAMESPACE_ID::Duration* convert_duration_one_;
    uint32_t id_;
    uint32_t unlock_level_;
    uint32_t cost_type_;
    int32_t cost_value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class role_upgrade_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:role_upgrade_cfg) */ {
 public:
  inline role_upgrade_cfg() : role_upgrade_cfg(nullptr) {}
  ~role_upgrade_cfg() override;
  explicit PROTOBUF_CONSTEXPR role_upgrade_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  role_upgrade_cfg(const role_upgrade_cfg& from);
  role_upgrade_cfg(role_upgrade_cfg&& from) noexcept
    : role_upgrade_cfg() {
    *this = ::std::move(from);
  }

  inline role_upgrade_cfg& operator=(const role_upgrade_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_upgrade_cfg& operator=(role_upgrade_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const role_upgrade_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const role_upgrade_cfg* internal_default_instance() {
    return reinterpret_cast<const role_upgrade_cfg*>(
               &_role_upgrade_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(role_upgrade_cfg& a, role_upgrade_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(role_upgrade_cfg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(role_upgrade_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  role_upgrade_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<role_upgrade_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const role_upgrade_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const role_upgrade_cfg& from) {
    role_upgrade_cfg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(role_upgrade_cfg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "role_upgrade_cfg";
  }
  protected:
  explicit role_upgrade_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kCostValueFieldNumber = 4,
    kCostTypeFieldNumber = 3,
    kScoreAddFieldNumber = 5,
  };
  // optional uint32 Id = 1 [(.org.xresloader.ue.key_tag) = 1000];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional int64 CostValue = 4;
  bool has_costvalue() const;
  private:
  bool _internal_has_costvalue() const;
  public:
  void clear_costvalue();
  int64_t costvalue() const;
  void set_costvalue(int64_t value);
  private:
  int64_t _internal_costvalue() const;
  void _internal_set_costvalue(int64_t value);
  public:

  // optional uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  bool has_costtype() const;
  private:
  bool _internal_has_costtype() const;
  public:
  void clear_costtype();
  uint32_t costtype() const;
  void set_costtype(uint32_t value);
  private:
  uint32_t _internal_costtype() const;
  void _internal_set_costtype(uint32_t value);
  public:

  // optional int32 ScoreAdd = 5;
  bool has_scoreadd() const;
  private:
  bool _internal_has_scoreadd() const;
  public:
  void clear_scoreadd();
  int32_t scoreadd() const;
  void set_scoreadd(int32_t value);
  private:
  int32_t _internal_scoreadd() const;
  void _internal_set_scoreadd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:role_upgrade_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t id_;
    uint32_t level_;
    int64_t costvalue_;
    uint32_t costtype_;
    int32_t scoreadd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class test_msg_verifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_msg_verifier) */ {
 public:
  inline test_msg_verifier() : test_msg_verifier(nullptr) {}
  ~test_msg_verifier() override;
  explicit PROTOBUF_CONSTEXPR test_msg_verifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  test_msg_verifier(const test_msg_verifier& from);
  test_msg_verifier(test_msg_verifier&& from) noexcept
    : test_msg_verifier() {
    *this = ::std::move(from);
  }

  inline test_msg_verifier& operator=(const test_msg_verifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline test_msg_verifier& operator=(test_msg_verifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const test_msg_verifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const test_msg_verifier* internal_default_instance() {
    return reinterpret_cast<const test_msg_verifier*>(
               &_test_msg_verifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(test_msg_verifier& a, test_msg_verifier& b) {
    a.Swap(&b);
  }
  inline void Swap(test_msg_verifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(test_msg_verifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  test_msg_verifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<test_msg_verifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const test_msg_verifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const test_msg_verifier& from) {
    test_msg_verifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(test_msg_verifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_msg_verifier";
  }
  protected:
  explicit test_msg_verifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestId1FieldNumber = 10001,
    kTestId2FieldNumber = 10002,
  };
  // optional uint32 test_id_1 = 10001;
  bool has_test_id_1() const;
  private:
  bool _internal_has_test_id_1() const;
  public:
  void clear_test_id_1();
  uint32_t test_id_1() const;
  void set_test_id_1(uint32_t value);
  private:
  uint32_t _internal_test_id_1() const;
  void _internal_set_test_id_1(uint32_t value);
  public:

  // optional uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
  bool has_test_id_2() const;
  private:
  bool _internal_has_test_id_2() const;
  public:
  void clear_test_id_2();
  uint32_t test_id_2() const;
  void set_test_id_2(uint32_t value);
  private:
  uint32_t _internal_test_id_2() const;
  void _internal_set_test_id_2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_msg_verifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t test_id_1_;
    uint32_t test_id_2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arr_in_arr) */ {
 public:
  inline arr_in_arr() : arr_in_arr(nullptr) {}
  ~arr_in_arr() override;
  explicit PROTOBUF_CONSTEXPR arr_in_arr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  arr_in_arr(const arr_in_arr& from);
  arr_in_arr(arr_in_arr&& from) noexcept
    : arr_in_arr() {
    *this = ::std::move(from);
  }

  inline arr_in_arr& operator=(const arr_in_arr& from) {
    CopyFrom(from);
    return *this;
  }
  inline arr_in_arr& operator=(arr_in_arr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const arr_in_arr& default_instance() {
    return *internal_default_instance();
  }
  static inline const arr_in_arr* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr*>(
               &_arr_in_arr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(arr_in_arr& a, arr_in_arr& b) {
    a.Swap(&b);
  }
  inline void Swap(arr_in_arr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(arr_in_arr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  arr_in_arr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<arr_in_arr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const arr_in_arr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const arr_in_arr& from) {
    arr_in_arr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(arr_in_arr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arr_in_arr";
  }
  protected:
  explicit arr_in_arr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntArrFieldNumber = 2,
    kStrArrFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated int32 int_arr = 2 [packed = true];
  int int_arr_size() const;
  private:
  int _internal_int_arr_size() const;
  public:
  void clear_int_arr();
  private:
  int32_t _internal_int_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_int_arr() const;
  void _internal_add_int_arr(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_int_arr();
  public:
  int32_t int_arr(int index) const;
  void set_int_arr(int index, int32_t value);
  void add_int_arr(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      int_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_int_arr();

  // repeated string str_arr = 3;
  int str_arr_size() const;
  private:
  int _internal_str_arr_size() const;
  public:
  void clear_str_arr();
  const std::string& str_arr(int index) const;
  std::string* mutable_str_arr(int index);
  void set_str_arr(int index, const std::string& value);
  void set_str_arr(int index, std::string&& value);
  void set_str_arr(int index, const char* value);
  void set_str_arr(int index, const char* value, size_t size);
  std::string* add_str_arr();
  void add_str_arr(const std::string& value);
  void add_str_arr(std::string&& value);
  void add_str_arr(const char* value);
  void add_str_arr(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_arr();
  private:
  const std::string& _internal_str_arr(int index) const;
  std::string* _internal_add_str_arr();
  public:

  // optional string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:arr_in_arr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > int_arr_;
    mutable std::atomic<int> _int_arr_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_arr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class arr_in_arr_cfg_TestMapIsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<arr_in_arr_cfg_TestMapIsEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<arr_in_arr_cfg_TestMapIsEntry_DoNotUse, 
    int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  arr_in_arr_cfg_TestMapIsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapIsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit arr_in_arr_cfg_TestMapIsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const arr_in_arr_cfg_TestMapIsEntry_DoNotUse& other);
  static const arr_in_arr_cfg_TestMapIsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const arr_in_arr_cfg_TestMapIsEntry_DoNotUse*>(&_arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "arr_in_arr_cfg.TestMapIsEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_kind_2eproto;
};

// -------------------------------------------------------------------

class arr_in_arr_cfg_TestMapSmEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<arr_in_arr_cfg_TestMapSmEntry_DoNotUse, 
    std::string, ::dep2_cfg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<arr_in_arr_cfg_TestMapSmEntry_DoNotUse, 
    std::string, ::dep2_cfg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  arr_in_arr_cfg_TestMapSmEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapSmEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit arr_in_arr_cfg_TestMapSmEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const arr_in_arr_cfg_TestMapSmEntry_DoNotUse& other);
  static const arr_in_arr_cfg_TestMapSmEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const arr_in_arr_cfg_TestMapSmEntry_DoNotUse*>(&_arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "arr_in_arr_cfg.TestMapSmEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_kind_2eproto;
};

// -------------------------------------------------------------------

class arr_in_arr_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:arr_in_arr_cfg) */ {
 public:
  inline arr_in_arr_cfg() : arr_in_arr_cfg(nullptr) {}
  ~arr_in_arr_cfg() override;
  explicit PROTOBUF_CONSTEXPR arr_in_arr_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  arr_in_arr_cfg(const arr_in_arr_cfg& from);
  arr_in_arr_cfg(arr_in_arr_cfg&& from) noexcept
    : arr_in_arr_cfg() {
    *this = ::std::move(from);
  }

  inline arr_in_arr_cfg& operator=(const arr_in_arr_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline arr_in_arr_cfg& operator=(arr_in_arr_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const arr_in_arr_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const arr_in_arr_cfg* internal_default_instance() {
    return reinterpret_cast<const arr_in_arr_cfg*>(
               &_arr_in_arr_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(arr_in_arr_cfg& a, arr_in_arr_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(arr_in_arr_cfg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(arr_in_arr_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  arr_in_arr_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<arr_in_arr_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const arr_in_arr_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const arr_in_arr_cfg& from) {
    arr_in_arr_cfg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(arr_in_arr_cfg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "arr_in_arr_cfg";
  }
  protected:
  explicit arr_in_arr_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 2,
    kTestPlainIntArrFieldNumber = 3,
    kTestPlainEnumArrFieldNumber = 4,
    kTestPlainMsgArrFieldNumber = 6,
    kTestMapIsFieldNumber = 7,
    kTestMapSmFieldNumber = 8,
    kTestPlainMsgFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated .arr_in_arr arr = 2;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  ::arr_in_arr* mutable_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >*
      mutable_arr();
  private:
  const ::arr_in_arr& _internal_arr(int index) const;
  ::arr_in_arr* _internal_add_arr();
  public:
  const ::arr_in_arr& arr(int index) const;
  ::arr_in_arr* add_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >&
      arr() const;

  // repeated int32 test_plain_int_arr = 3;
  int test_plain_int_arr_size() const;
  private:
  int _internal_test_plain_int_arr_size() const;
  public:
  void clear_test_plain_int_arr();
  private:
  int32_t _internal_test_plain_int_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_test_plain_int_arr() const;
  void _internal_add_test_plain_int_arr(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_test_plain_int_arr();
  public:
  int32_t test_plain_int_arr(int index) const;
  void set_test_plain_int_arr(int index, int32_t value);
  void add_test_plain_int_arr(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      test_plain_int_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_test_plain_int_arr();

  // repeated .cost_type test_plain_enum_arr = 4;
  int test_plain_enum_arr_size() const;
  private:
  int _internal_test_plain_enum_arr_size() const;
  public:
  void clear_test_plain_enum_arr();
  private:
  ::cost_type _internal_test_plain_enum_arr(int index) const;
  void _internal_add_test_plain_enum_arr(::cost_type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_test_plain_enum_arr();
  public:
  ::cost_type test_plain_enum_arr(int index) const;
  void set_test_plain_enum_arr(int index, ::cost_type value);
  void add_test_plain_enum_arr(::cost_type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& test_plain_enum_arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_test_plain_enum_arr();

  // repeated .test_msg_verifier test_plain_msg_arr = 6;
  int test_plain_msg_arr_size() const;
  private:
  int _internal_test_plain_msg_arr_size() const;
  public:
  void clear_test_plain_msg_arr();
  ::test_msg_verifier* mutable_test_plain_msg_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >*
      mutable_test_plain_msg_arr();
  private:
  const ::test_msg_verifier& _internal_test_plain_msg_arr(int index) const;
  ::test_msg_verifier* _internal_add_test_plain_msg_arr();
  public:
  const ::test_msg_verifier& test_plain_msg_arr(int index) const;
  ::test_msg_verifier* add_test_plain_msg_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >&
      test_plain_msg_arr() const;

  // map<int32, string> test_map_is = 7;
  int test_map_is_size() const;
  private:
  int _internal_test_map_is_size() const;
  public:
  void clear_test_map_is();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      _internal_test_map_is() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      _internal_mutable_test_map_is();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
      test_map_is() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
      mutable_test_map_is();

  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  int test_map_sm_size() const;
  private:
  int _internal_test_map_sm_size() const;
  public:
  void clear_test_map_sm();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >&
      _internal_test_map_sm() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >*
      _internal_mutable_test_map_sm();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >&
      test_map_sm() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >*
      mutable_test_map_sm();

  // optional .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
  bool has_test_plain_msg() const;
  private:
  bool _internal_has_test_plain_msg() const;
  public:
  void clear_test_plain_msg();
  const ::test_msg_verifier& test_plain_msg() const;
  PROTOBUF_NODISCARD ::test_msg_verifier* release_test_plain_msg();
  ::test_msg_verifier* mutable_test_plain_msg();
  void set_allocated_test_plain_msg(::test_msg_verifier* test_plain_msg);
  private:
  const ::test_msg_verifier& _internal_test_plain_msg() const;
  ::test_msg_verifier* _internal_mutable_test_plain_msg();
  public:
  void unsafe_arena_set_allocated_test_plain_msg(
      ::test_msg_verifier* test_plain_msg);
  ::test_msg_verifier* unsafe_arena_release_test_plain_msg();

  // optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:arr_in_arr_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr > arr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > test_plain_int_arr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> test_plain_enum_arr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier > test_plain_msg_arr_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        arr_in_arr_cfg_TestMapIsEntry_DoNotUse,
        int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> test_map_is_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        arr_in_arr_cfg_TestMapSmEntry_DoNotUse,
        std::string, ::dep2_cfg,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> test_map_sm_;
    ::test_msg_verifier* test_plain_msg_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class event_reward_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_reward_item) */ {
 public:
  inline event_reward_item() : event_reward_item(nullptr) {}
  ~event_reward_item() override;
  explicit PROTOBUF_CONSTEXPR event_reward_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  event_reward_item(const event_reward_item& from);
  event_reward_item(event_reward_item&& from) noexcept
    : event_reward_item() {
    *this = ::std::move(from);
  }

  inline event_reward_item& operator=(const event_reward_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_reward_item& operator=(event_reward_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const event_reward_item& default_instance() {
    return *internal_default_instance();
  }
  enum NestedCase {
    kNestedNote = 11,
    kNestedEnumType = 12,
    NESTED_NOT_SET = 0,
  };

  static inline const event_reward_item* internal_default_instance() {
    return reinterpret_cast<const event_reward_item*>(
               &_event_reward_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(event_reward_item& a, event_reward_item& b) {
    a.Swap(&b);
  }
  inline void Swap(event_reward_item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event_reward_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  event_reward_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<event_reward_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const event_reward_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const event_reward_item& from) {
    event_reward_item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(event_reward_item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_reward_item";
  }
  protected:
  explicit event_reward_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
    kItemCountFieldNumber = 2,
    kNestedNoteFieldNumber = 11,
    kNestedEnumTypeFieldNumber = 12,
  };
  // optional uint32 item_id = 1;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // optional uint32 item_count = 2;
  bool has_item_count() const;
  private:
  bool _internal_has_item_count() const;
  public:
  void clear_item_count();
  uint32_t item_count() const;
  void set_item_count(uint32_t value);
  private:
  uint32_t _internal_item_count() const;
  void _internal_set_item_count(uint32_t value);
  public:

  // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  bool has_nested_note() const;
  private:
  bool _internal_has_nested_note() const;
  public:
  void clear_nested_note();
  const std::string& nested_note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nested_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nested_note();
  PROTOBUF_NODISCARD std::string* release_nested_note();
  void set_allocated_nested_note(std::string* nested_note);
  private:
  const std::string& _internal_nested_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nested_note(const std::string& value);
  std::string* _internal_mutable_nested_note();
  public:

  // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  bool has_nested_enum_type() const;
  private:
  bool _internal_has_nested_enum_type() const;
  public:
  void clear_nested_enum_type();
  ::cost_type nested_enum_type() const;
  void set_nested_enum_type(::cost_type value);
  private:
  ::cost_type _internal_nested_enum_type() const;
  void _internal_set_nested_enum_type(::cost_type value);
  public:

  void clear_nested();
  NestedCase nested_case() const;
  // @@protoc_insertion_point(class_scope:event_reward_item)
 private:
  class _Internal;
  void set_has_nested_note();
  void set_has_nested_enum_type();

  inline bool has_nested() const;
  inline void clear_has_nested();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t item_id_;
    uint32_t item_count_;
    union NestedUnion {
      constexpr NestedUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nested_note_;
      int nested_enum_type_;
    } nested_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class event_rule_item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_rule_item) */ {
 public:
  inline event_rule_item() : event_rule_item(nullptr) {}
  ~event_rule_item() override;
  explicit PROTOBUF_CONSTEXPR event_rule_item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  event_rule_item(const event_rule_item& from);
  event_rule_item(event_rule_item&& from) noexcept
    : event_rule_item() {
    *this = ::std::move(from);
  }

  inline event_rule_item& operator=(const event_rule_item& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_rule_item& operator=(event_rule_item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const event_rule_item& default_instance() {
    return *internal_default_instance();
  }
  enum NestedCase {
    kNestedNote = 11,
    kNestedEnumType = 12,
    NESTED_NOT_SET = 0,
  };

  static inline const event_rule_item* internal_default_instance() {
    return reinterpret_cast<const event_rule_item*>(
               &_event_rule_item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(event_rule_item& a, event_rule_item& b) {
    a.Swap(&b);
  }
  inline void Swap(event_rule_item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event_rule_item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  event_rule_item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<event_rule_item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const event_rule_item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const event_rule_item& from) {
    event_rule_item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(event_rule_item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_rule_item";
  }
  protected:
  explicit event_rule_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuleIdFieldNumber = 1,
    kRuleParamFieldNumber = 2,
    kNestedNoteFieldNumber = 11,
    kNestedEnumTypeFieldNumber = 12,
  };
  // optional uint32 rule_id = 1;
  bool has_rule_id() const;
  private:
  bool _internal_has_rule_id() const;
  public:
  void clear_rule_id();
  uint32_t rule_id() const;
  void set_rule_id(uint32_t value);
  private:
  uint32_t _internal_rule_id() const;
  void _internal_set_rule_id(uint32_t value);
  public:

  // optional uint32 rule_param = 2;
  bool has_rule_param() const;
  private:
  bool _internal_has_rule_param() const;
  public:
  void clear_rule_param();
  uint32_t rule_param() const;
  void set_rule_param(uint32_t value);
  private:
  uint32_t _internal_rule_param() const;
  void _internal_set_rule_param(uint32_t value);
  public:

  // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  bool has_nested_note() const;
  private:
  bool _internal_has_nested_note() const;
  public:
  void clear_nested_note();
  const std::string& nested_note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nested_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nested_note();
  PROTOBUF_NODISCARD std::string* release_nested_note();
  void set_allocated_nested_note(std::string* nested_note);
  private:
  const std::string& _internal_nested_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nested_note(const std::string& value);
  std::string* _internal_mutable_nested_note();
  public:

  // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  bool has_nested_enum_type() const;
  private:
  bool _internal_has_nested_enum_type() const;
  public:
  void clear_nested_enum_type();
  ::cost_type nested_enum_type() const;
  void set_nested_enum_type(::cost_type value);
  private:
  ::cost_type _internal_nested_enum_type() const;
  void _internal_set_nested_enum_type(::cost_type value);
  public:

  void clear_nested();
  NestedCase nested_case() const;
  // @@protoc_insertion_point(class_scope:event_rule_item)
 private:
  class _Internal;
  void set_has_nested_note();
  void set_has_nested_enum_type();

  inline bool has_nested() const;
  inline void clear_has_nested();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t rule_id_;
    uint32_t rule_param_;
    union NestedUnion {
      constexpr NestedUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nested_note_;
      int nested_enum_type_;
    } nested_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class event_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_cfg) */ {
 public:
  inline event_cfg() : event_cfg(nullptr) {}
  ~event_cfg() override;
  explicit PROTOBUF_CONSTEXPR event_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  event_cfg(const event_cfg& from);
  event_cfg(event_cfg&& from) noexcept
    : event_cfg() {
    *this = ::std::move(from);
  }

  inline event_cfg& operator=(const event_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline event_cfg& operator=(event_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const event_cfg& default_instance() {
    return *internal_default_instance();
  }
  enum RewardCase {
    kItem = 11,
    kUserExp = 12,
    kNote = 13,
    kEnumType = 14,
    REWARD_NOT_SET = 0,
  };

  enum UnlockTypeCase {
    kUserLevel = 51,
    UNLOCK_TYPE_NOT_SET = 0,
  };

  static inline const event_cfg* internal_default_instance() {
    return reinterpret_cast<const event_cfg*>(
               &_event_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(event_cfg& a, event_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(event_cfg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(event_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  event_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<event_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const event_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const event_cfg& from) {
    event_cfg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(event_cfg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "event_cfg";
  }
  protected:
  explicit event_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestArrFieldNumber = 91,
    kTestEmptyArrFieldNumber = 92,
    kRuleFieldNumber = 6,
    kSpecifyFieldFieldNumber = 7,
    kIdFieldNumber = 1,
    kProcessFieldNumber = 2,
    kItemFieldNumber = 11,
    kUserExpFieldNumber = 12,
    kNoteFieldNumber = 13,
    kEnumTypeFieldNumber = 14,
    kUserLevelFieldNumber = 51,
  };
  // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
  int test_arr_size() const;
  private:
  int _internal_test_arr_size() const;
  public:
  void clear_test_arr();
  ::event_rule_item* mutable_test_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >*
      mutable_test_arr();
  private:
  const ::event_rule_item& _internal_test_arr(int index) const;
  ::event_rule_item* _internal_add_test_arr();
  public:
  const ::event_rule_item& test_arr(int index) const;
  ::event_rule_item* add_test_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >&
      test_arr() const;

  // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
  int test_empty_arr_size() const;
  private:
  int _internal_test_empty_arr_size() const;
  public:
  void clear_test_empty_arr();
  ::event_rule_item* mutable_test_empty_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >*
      mutable_test_empty_arr();
  private:
  const ::event_rule_item& _internal_test_empty_arr(int index) const;
  ::event_rule_item* _internal_add_test_empty_arr();
  public:
  const ::event_rule_item& test_empty_arr(int index) const;
  ::event_rule_item* add_test_empty_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >&
      test_empty_arr() const;

  // optional .event_rule_item rule = 6;
  bool has_rule() const;
  private:
  bool _internal_has_rule() const;
  public:
  void clear_rule();
  const ::event_rule_item& rule() const;
  PROTOBUF_NODISCARD ::event_rule_item* release_rule();
  ::event_rule_item* mutable_rule();
  void set_allocated_rule(::event_rule_item* rule);
  private:
  const ::event_rule_item& _internal_rule() const;
  ::event_rule_item* _internal_mutable_rule();
  public:
  void unsafe_arena_set_allocated_rule(
      ::event_rule_item* rule);
  ::event_rule_item* unsafe_arena_release_rule();

  // optional .event_rule_item specify_field = 7;
  bool has_specify_field() const;
  private:
  bool _internal_has_specify_field() const;
  public:
  void clear_specify_field();
  const ::event_rule_item& specify_field() const;
  PROTOBUF_NODISCARD ::event_rule_item* release_specify_field();
  ::event_rule_item* mutable_specify_field();
  void set_allocated_specify_field(::event_rule_item* specify_field);
  private:
  const ::event_rule_item& _internal_specify_field() const;
  ::event_rule_item* _internal_mutable_specify_field();
  public:
  void unsafe_arena_set_allocated_specify_field(
      ::event_rule_item* specify_field);
  ::event_rule_item* unsafe_arena_release_specify_field();

  // optional uint32 id = 1 [(.org.xresloader.ue.key_tag) = 100];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 process = 2 [(.org.xresloader.ue.key_tag) = 1];
  bool has_process() const;
  private:
  bool _internal_has_process() const;
  public:
  void clear_process();
  uint32_t process() const;
  void set_process(uint32_t value);
  private:
  uint32_t _internal_process() const;
  void _internal_set_process(uint32_t value);
  public:

  // .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::event_reward_item& item() const;
  PROTOBUF_NODISCARD ::event_reward_item* release_item();
  ::event_reward_item* mutable_item();
  void set_allocated_item(::event_reward_item* item);
  private:
  const ::event_reward_item& _internal_item() const;
  ::event_reward_item* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::event_reward_item* item);
  ::event_reward_item* unsafe_arena_release_item();

  // int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
  bool has_user_exp() const;
  private:
  bool _internal_has_user_exp() const;
  public:
  void clear_user_exp();
  int64_t user_exp() const;
  void set_user_exp(int64_t value);
  private:
  int64_t _internal_user_exp() const;
  void _internal_set_user_exp(int64_t value);
  public:

  // string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  bool has_note() const;
  private:
  bool _internal_has_note() const;
  public:
  void clear_note();
  const std::string& note() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_note(ArgT0&& arg0, ArgT... args);
  std::string* mutable_note();
  PROTOBUF_NODISCARD std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  bool has_enum_type() const;
  private:
  bool _internal_has_enum_type() const;
  public:
  void clear_enum_type();
  ::cost_type enum_type() const;
  void set_enum_type(::cost_type value);
  private:
  ::cost_type _internal_enum_type() const;
  void _internal_set_enum_type(::cost_type value);
  public:

  // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
  bool has_user_level() const;
  private:
  bool _internal_has_user_level() const;
  public:
  void clear_user_level();
  uint32_t user_level() const;
  void set_user_level(uint32_t value);
  private:
  uint32_t _internal_user_level() const;
  void _internal_set_user_level(uint32_t value);
  public:

  void clear_reward();
  RewardCase reward_case() const;
  void clear_unlock_type();
  UnlockTypeCase unlock_type_case() const;
  // @@protoc_insertion_point(class_scope:event_cfg)
 private:
  class _Internal;
  void set_has_item();
  void set_has_user_exp();
  void set_has_note();
  void set_has_enum_type();
  void set_has_user_level();

  inline bool has_reward() const;
  inline void clear_has_reward();

  inline bool has_unlock_type() const;
  inline void clear_has_unlock_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item > test_arr_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item > test_empty_arr_;
    ::event_rule_item* rule_;
    ::event_rule_item* specify_field_;
    uint32_t id_;
    uint32_t process_;
    union RewardUnion {
      constexpr RewardUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::event_reward_item* item_;
      int64_t user_exp_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
      int enum_type_;
    } reward_;
    union UnlockTypeUnion {
      constexpr UnlockTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t user_level_;
    } unlock_type_;
    uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class keep_or_strip_empty_list_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:keep_or_strip_empty_list_cfg) */ {
 public:
  inline keep_or_strip_empty_list_cfg() : keep_or_strip_empty_list_cfg(nullptr) {}
  ~keep_or_strip_empty_list_cfg() override;
  explicit PROTOBUF_CONSTEXPR keep_or_strip_empty_list_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  keep_or_strip_empty_list_cfg(const keep_or_strip_empty_list_cfg& from);
  keep_or_strip_empty_list_cfg(keep_or_strip_empty_list_cfg&& from) noexcept
    : keep_or_strip_empty_list_cfg() {
    *this = ::std::move(from);
  }

  inline keep_or_strip_empty_list_cfg& operator=(const keep_or_strip_empty_list_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline keep_or_strip_empty_list_cfg& operator=(keep_or_strip_empty_list_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const keep_or_strip_empty_list_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const keep_or_strip_empty_list_cfg* internal_default_instance() {
    return reinterpret_cast<const keep_or_strip_empty_list_cfg*>(
               &_keep_or_strip_empty_list_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(keep_or_strip_empty_list_cfg& a, keep_or_strip_empty_list_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(keep_or_strip_empty_list_cfg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(keep_or_strip_empty_list_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  keep_or_strip_empty_list_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<keep_or_strip_empty_list_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const keep_or_strip_empty_list_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const keep_or_strip_empty_list_cfg& from) {
    keep_or_strip_empty_list_cfg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(keep_or_strip_empty_list_cfg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "keep_or_strip_empty_list_cfg";
  }
  protected:
  explicit keep_or_strip_empty_list_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayMsgFieldNumber = 2,
    kArrayPlainMsgFieldNumber = 3,
    kArrayInt32FieldNumber = 4,
    kArrayInt64FieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated .dep2_cfg array_msg = 2;
  int array_msg_size() const;
  private:
  int _internal_array_msg_size() const;
  public:
  void clear_array_msg();
  ::dep2_cfg* mutable_array_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >*
      mutable_array_msg();
  private:
  const ::dep2_cfg& _internal_array_msg(int index) const;
  ::dep2_cfg* _internal_add_array_msg();
  public:
  const ::dep2_cfg& array_msg(int index) const;
  ::dep2_cfg* add_array_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >&
      array_msg() const;

  // repeated .dep2_cfg array_plain_msg = 3;
  int array_plain_msg_size() const;
  private:
  int _internal_array_plain_msg_size() const;
  public:
  void clear_array_plain_msg();
  ::dep2_cfg* mutable_array_plain_msg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >*
      mutable_array_plain_msg();
  private:
  const ::dep2_cfg& _internal_array_plain_msg(int index) const;
  ::dep2_cfg* _internal_add_array_plain_msg();
  public:
  const ::dep2_cfg& array_plain_msg(int index) const;
  ::dep2_cfg* add_array_plain_msg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >&
      array_plain_msg() const;

  // repeated int32 array_int32 = 4;
  int array_int32_size() const;
  private:
  int _internal_array_int32_size() const;
  public:
  void clear_array_int32();
  private:
  int32_t _internal_array_int32(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_array_int32() const;
  void _internal_add_array_int32(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_array_int32();
  public:
  int32_t array_int32(int index) const;
  void set_array_int32(int index, int32_t value);
  void add_array_int32(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      array_int32() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_array_int32();

  // repeated int64 array_int64 = 5;
  int array_int64_size() const;
  private:
  int _internal_array_int64_size() const;
  public:
  void clear_array_int64();
  private:
  int64_t _internal_array_int64(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_array_int64() const;
  void _internal_add_array_int64(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_array_int64();
  public:
  int64_t array_int64(int index) const;
  void set_array_int64(int index, int64_t value);
  void add_array_int64(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      array_int64() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_array_int64();

  // optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:keep_or_strip_empty_list_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg > array_msg_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg > array_plain_msg_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > array_int32_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > array_int64_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kind_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// role_cfg

// optional uint32 id = 1;
inline bool role_cfg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool role_cfg::has_id() const {
  return _internal_has_id();
}
inline void role_cfg::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t role_cfg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t role_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_cfg.id)
  return _internal_id();
}
inline void role_cfg::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.id_ = value;
}
inline void role_cfg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:role_cfg.id)
}

// optional uint32 unlock_level = 2;
inline bool role_cfg::_internal_has_unlock_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool role_cfg::has_unlock_level() const {
  return _internal_has_unlock_level();
}
inline void role_cfg::clear_unlock_level() {
  _impl_.unlock_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t role_cfg::_internal_unlock_level() const {
  return _impl_.unlock_level_;
}
inline uint32_t role_cfg::unlock_level() const {
  // @@protoc_insertion_point(field_get:role_cfg.unlock_level)
  return _internal_unlock_level();
}
inline void role_cfg::_internal_set_unlock_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.unlock_level_ = value;
}
inline void role_cfg::set_unlock_level(uint32_t value) {
  _internal_set_unlock_level(value);
  // @@protoc_insertion_point(field_set:role_cfg.unlock_level)
}

// optional uint32 cost_type = 3;
inline bool role_cfg::_internal_has_cost_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool role_cfg::has_cost_type() const {
  return _internal_has_cost_type();
}
inline void role_cfg::clear_cost_type() {
  _impl_.cost_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t role_cfg::_internal_cost_type() const {
  return _impl_.cost_type_;
}
inline uint32_t role_cfg::cost_type() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_type)
  return _internal_cost_type();
}
inline void role_cfg::_internal_set_cost_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.cost_type_ = value;
}
inline void role_cfg::set_cost_type(uint32_t value) {
  _internal_set_cost_type(value);
  // @@protoc_insertion_point(field_set:role_cfg.cost_type)
}

// optional int32 cost_value = 4;
inline bool role_cfg::_internal_has_cost_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool role_cfg::has_cost_value() const {
  return _internal_has_cost_value();
}
inline void role_cfg::clear_cost_value() {
  _impl_.cost_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t role_cfg::_internal_cost_value() const {
  return _impl_.cost_value_;
}
inline int32_t role_cfg::cost_value() const {
  // @@protoc_insertion_point(field_get:role_cfg.cost_value)
  return _internal_cost_value();
}
inline void role_cfg::_internal_set_cost_value(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.cost_value_ = value;
}
inline void role_cfg::set_cost_value(int32_t value) {
  _internal_set_cost_value(value);
  // @@protoc_insertion_point(field_set:role_cfg.cost_value)
}

// optional string name = 5;
inline bool role_cfg::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool role_cfg::has_name() const {
  return _internal_has_name();
}
inline void role_cfg::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& role_cfg::name() const {
  // @@protoc_insertion_point(field_get:role_cfg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void role_cfg::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:role_cfg.name)
}
inline std::string* role_cfg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:role_cfg.name)
  return _s;
}
inline const std::string& role_cfg::_internal_name() const {
  return _impl_.name_.Get();
}
inline void role_cfg::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* role_cfg::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* role_cfg::release_name() {
  // @@protoc_insertion_point(field_release:role_cfg.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void role_cfg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.name)
}

// optional .dep_cfg dep_test = 10;
inline bool role_cfg::_internal_has_dep_test() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dep_test_ != nullptr);
  return value;
}
inline bool role_cfg::has_dep_test() const {
  return _internal_has_dep_test();
}
inline const ::dep_cfg& role_cfg::_internal_dep_test() const {
  const ::dep_cfg* p = _impl_.dep_test_;
  return p != nullptr ? *p : reinterpret_cast<const ::dep_cfg&>(
      ::_dep_cfg_default_instance_);
}
inline const ::dep_cfg& role_cfg::dep_test() const {
  // @@protoc_insertion_point(field_get:role_cfg.dep_test)
  return _internal_dep_test();
}
inline void role_cfg::unsafe_arena_set_allocated_dep_test(
    ::dep_cfg* dep_test) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dep_test_);
  }
  _impl_.dep_test_ = dep_test;
  if (dep_test) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:role_cfg.dep_test)
}
inline ::dep_cfg* role_cfg::release_dep_test() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::dep_cfg* temp = _impl_.dep_test_;
  _impl_.dep_test_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dep_cfg* role_cfg::unsafe_arena_release_dep_test() {
  // @@protoc_insertion_point(field_release:role_cfg.dep_test)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::dep_cfg* temp = _impl_.dep_test_;
  _impl_.dep_test_ = nullptr;
  return temp;
}
inline ::dep_cfg* role_cfg::_internal_mutable_dep_test() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.dep_test_ == nullptr) {
    auto* p = CreateMaybeMessage<::dep_cfg>(GetArenaForAllocation());
    _impl_.dep_test_ = p;
  }
  return _impl_.dep_test_;
}
inline ::dep_cfg* role_cfg::mutable_dep_test() {
  ::dep_cfg* _msg = _internal_mutable_dep_test();
  // @@protoc_insertion_point(field_mutable:role_cfg.dep_test)
  return _msg;
}
inline void role_cfg::set_allocated_dep_test(::dep_cfg* dep_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dep_test_);
  }
  if (dep_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dep_test));
    if (message_arena != submessage_arena) {
      dep_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dep_test, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.dep_test_ = dep_test;
  // @@protoc_insertion_point(field_set_allocated:role_cfg.dep_test)
}

// repeated string test_array = 11;
inline int role_cfg::_internal_test_array_size() const {
  return _impl_.test_array_.size();
}
inline int role_cfg::test_array_size() const {
  return _internal_test_array_size();
}
inline void role_cfg::clear_test_array() {
  _impl_.test_array_.Clear();
}
inline std::string* role_cfg::add_test_array() {
  std::string* _s = _internal_add_test_array();
  // @@protoc_insertion_point(field_add_mutable:role_cfg.test_array)
  return _s;
}
inline const std::string& role_cfg::_internal_test_array(int index) const {
  return _impl_.test_array_.Get(index);
}
inline const std::string& role_cfg::test_array(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.test_array)
  return _internal_test_array(index);
}
inline std::string* role_cfg::mutable_test_array(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.test_array)
  return _impl_.test_array_.Mutable(index);
}
inline void role_cfg::set_test_array(int index, const std::string& value) {
  _impl_.test_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, std::string&& value) {
  _impl_.test_array_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.test_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.test_array)
}
inline void role_cfg::set_test_array(int index, const char* value, size_t size) {
  _impl_.test_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.test_array)
}
inline std::string* role_cfg::_internal_add_test_array() {
  return _impl_.test_array_.Add();
}
inline void role_cfg::add_test_array(const std::string& value) {
  _impl_.test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(std::string&& value) {
  _impl_.test_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.test_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.test_array)
}
inline void role_cfg::add_test_array(const char* value, size_t size) {
  _impl_.test_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.test_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
role_cfg::test_array() const {
  // @@protoc_insertion_point(field_list:role_cfg.test_array)
  return _impl_.test_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
role_cfg::mutable_test_array() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.test_array)
  return &_impl_.test_array_;
}

// optional string int_as_string = 12;
inline bool role_cfg::_internal_has_int_as_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool role_cfg::has_int_as_string() const {
  return _internal_has_int_as_string();
}
inline void role_cfg::clear_int_as_string() {
  _impl_.int_as_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& role_cfg::int_as_string() const {
  // @@protoc_insertion_point(field_get:role_cfg.int_as_string)
  return _internal_int_as_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void role_cfg::set_int_as_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.int_as_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:role_cfg.int_as_string)
}
inline std::string* role_cfg::mutable_int_as_string() {
  std::string* _s = _internal_mutable_int_as_string();
  // @@protoc_insertion_point(field_mutable:role_cfg.int_as_string)
  return _s;
}
inline const std::string& role_cfg::_internal_int_as_string() const {
  return _impl_.int_as_string_.Get();
}
inline void role_cfg::_internal_set_int_as_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.int_as_string_.Set(value, GetArenaForAllocation());
}
inline std::string* role_cfg::_internal_mutable_int_as_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.int_as_string_.Mutable(GetArenaForAllocation());
}
inline std::string* role_cfg::release_int_as_string() {
  // @@protoc_insertion_point(field_release:role_cfg.int_as_string)
  if (!_internal_has_int_as_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.int_as_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.int_as_string_.IsDefault()) {
    _impl_.int_as_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void role_cfg::set_allocated_int_as_string(std::string* int_as_string) {
  if (int_as_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.int_as_string_.SetAllocated(int_as_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.int_as_string_.IsDefault()) {
    _impl_.int_as_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.int_as_string)
}

// repeated .cost_type test_plain_enum_array = 13;
inline int role_cfg::_internal_test_plain_enum_array_size() const {
  return _impl_.test_plain_enum_array_.size();
}
inline int role_cfg::test_plain_enum_array_size() const {
  return _internal_test_plain_enum_array_size();
}
inline void role_cfg::clear_test_plain_enum_array() {
  _impl_.test_plain_enum_array_.Clear();
}
inline ::cost_type role_cfg::_internal_test_plain_enum_array(int index) const {
  return static_cast< ::cost_type >(_impl_.test_plain_enum_array_.Get(index));
}
inline ::cost_type role_cfg::test_plain_enum_array(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.test_plain_enum_array)
  return _internal_test_plain_enum_array(index);
}
inline void role_cfg::set_test_plain_enum_array(int index, ::cost_type value) {
  assert(::cost_type_IsValid(value));
  _impl_.test_plain_enum_array_.Set(index, value);
  // @@protoc_insertion_point(field_set:role_cfg.test_plain_enum_array)
}
inline void role_cfg::_internal_add_test_plain_enum_array(::cost_type value) {
  assert(::cost_type_IsValid(value));
  _impl_.test_plain_enum_array_.Add(value);
}
inline void role_cfg::add_test_plain_enum_array(::cost_type value) {
  _internal_add_test_plain_enum_array(value);
  // @@protoc_insertion_point(field_add:role_cfg.test_plain_enum_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
role_cfg::test_plain_enum_array() const {
  // @@protoc_insertion_point(field_list:role_cfg.test_plain_enum_array)
  return _impl_.test_plain_enum_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
role_cfg::_internal_mutable_test_plain_enum_array() {
  return &_impl_.test_plain_enum_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
role_cfg::mutable_test_plain_enum_array() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.test_plain_enum_array)
  return _internal_mutable_test_plain_enum_array();
}

// optional .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
inline bool role_cfg::_internal_has_convert_timepoint_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convert_timepoint_one_ != nullptr);
  return value;
}
inline bool role_cfg::has_convert_timepoint_one() const {
  return _internal_has_convert_timepoint_one();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& role_cfg::_internal_convert_timepoint_one() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.convert_timepoint_one_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& role_cfg::convert_timepoint_one() const {
  // @@protoc_insertion_point(field_get:role_cfg.convert_timepoint_one)
  return _internal_convert_timepoint_one();
}
inline void role_cfg::unsafe_arena_set_allocated_convert_timepoint_one(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* convert_timepoint_one) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convert_timepoint_one_);
  }
  _impl_.convert_timepoint_one_ = convert_timepoint_one;
  if (convert_timepoint_one) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:role_cfg.convert_timepoint_one)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* role_cfg::release_convert_timepoint_one() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.convert_timepoint_one_;
  _impl_.convert_timepoint_one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* role_cfg::unsafe_arena_release_convert_timepoint_one() {
  // @@protoc_insertion_point(field_release:role_cfg.convert_timepoint_one)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.convert_timepoint_one_;
  _impl_.convert_timepoint_one_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* role_cfg::_internal_mutable_convert_timepoint_one() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.convert_timepoint_one_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.convert_timepoint_one_ = p;
  }
  return _impl_.convert_timepoint_one_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* role_cfg::mutable_convert_timepoint_one() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_convert_timepoint_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_timepoint_one)
  return _msg;
}
inline void role_cfg::set_allocated_convert_timepoint_one(::PROTOBUF_NAMESPACE_ID::Timestamp* convert_timepoint_one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convert_timepoint_one_);
  }
  if (convert_timepoint_one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convert_timepoint_one));
    if (message_arena != submessage_arena) {
      convert_timepoint_one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convert_timepoint_one, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.convert_timepoint_one_ = convert_timepoint_one;
  // @@protoc_insertion_point(field_set_allocated:role_cfg.convert_timepoint_one)
}

// optional string origin_timepoint_one = 22;
inline bool role_cfg::_internal_has_origin_timepoint_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool role_cfg::has_origin_timepoint_one() const {
  return _internal_has_origin_timepoint_one();
}
inline void role_cfg::clear_origin_timepoint_one() {
  _impl_.origin_timepoint_one_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& role_cfg::origin_timepoint_one() const {
  // @@protoc_insertion_point(field_get:role_cfg.origin_timepoint_one)
  return _internal_origin_timepoint_one();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void role_cfg::set_origin_timepoint_one(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.origin_timepoint_one_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:role_cfg.origin_timepoint_one)
}
inline std::string* role_cfg::mutable_origin_timepoint_one() {
  std::string* _s = _internal_mutable_origin_timepoint_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_timepoint_one)
  return _s;
}
inline const std::string& role_cfg::_internal_origin_timepoint_one() const {
  return _impl_.origin_timepoint_one_.Get();
}
inline void role_cfg::_internal_set_origin_timepoint_one(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.origin_timepoint_one_.Set(value, GetArenaForAllocation());
}
inline std::string* role_cfg::_internal_mutable_origin_timepoint_one() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.origin_timepoint_one_.Mutable(GetArenaForAllocation());
}
inline std::string* role_cfg::release_origin_timepoint_one() {
  // @@protoc_insertion_point(field_release:role_cfg.origin_timepoint_one)
  if (!_internal_has_origin_timepoint_one()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.origin_timepoint_one_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_timepoint_one_.IsDefault()) {
    _impl_.origin_timepoint_one_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void role_cfg::set_allocated_origin_timepoint_one(std::string* origin_timepoint_one) {
  if (origin_timepoint_one != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.origin_timepoint_one_.SetAllocated(origin_timepoint_one, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_timepoint_one_.IsDefault()) {
    _impl_.origin_timepoint_one_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.origin_timepoint_one)
}

// optional .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
inline bool role_cfg::_internal_has_convert_duration_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.convert_duration_one_ != nullptr);
  return value;
}
inline bool role_cfg::has_convert_duration_one() const {
  return _internal_has_convert_duration_one();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& role_cfg::_internal_convert_duration_one() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.convert_duration_one_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& role_cfg::convert_duration_one() const {
  // @@protoc_insertion_point(field_get:role_cfg.convert_duration_one)
  return _internal_convert_duration_one();
}
inline void role_cfg::unsafe_arena_set_allocated_convert_duration_one(
    ::PROTOBUF_NAMESPACE_ID::Duration* convert_duration_one) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convert_duration_one_);
  }
  _impl_.convert_duration_one_ = convert_duration_one;
  if (convert_duration_one) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:role_cfg.convert_duration_one)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* role_cfg::release_convert_duration_one() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.convert_duration_one_;
  _impl_.convert_duration_one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* role_cfg::unsafe_arena_release_convert_duration_one() {
  // @@protoc_insertion_point(field_release:role_cfg.convert_duration_one)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.convert_duration_one_;
  _impl_.convert_duration_one_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* role_cfg::_internal_mutable_convert_duration_one() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.convert_duration_one_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.convert_duration_one_ = p;
  }
  return _impl_.convert_duration_one_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* role_cfg::mutable_convert_duration_one() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_convert_duration_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_duration_one)
  return _msg;
}
inline void role_cfg::set_allocated_convert_duration_one(::PROTOBUF_NAMESPACE_ID::Duration* convert_duration_one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convert_duration_one_);
  }
  if (convert_duration_one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convert_duration_one));
    if (message_arena != submessage_arena) {
      convert_duration_one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convert_duration_one, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.convert_duration_one_ = convert_duration_one;
  // @@protoc_insertion_point(field_set_allocated:role_cfg.convert_duration_one)
}

// optional string origin_duration_one = 24;
inline bool role_cfg::_internal_has_origin_duration_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool role_cfg::has_origin_duration_one() const {
  return _internal_has_origin_duration_one();
}
inline void role_cfg::clear_origin_duration_one() {
  _impl_.origin_duration_one_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& role_cfg::origin_duration_one() const {
  // @@protoc_insertion_point(field_get:role_cfg.origin_duration_one)
  return _internal_origin_duration_one();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void role_cfg::set_origin_duration_one(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.origin_duration_one_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:role_cfg.origin_duration_one)
}
inline std::string* role_cfg::mutable_origin_duration_one() {
  std::string* _s = _internal_mutable_origin_duration_one();
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_duration_one)
  return _s;
}
inline const std::string& role_cfg::_internal_origin_duration_one() const {
  return _impl_.origin_duration_one_.Get();
}
inline void role_cfg::_internal_set_origin_duration_one(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.origin_duration_one_.Set(value, GetArenaForAllocation());
}
inline std::string* role_cfg::_internal_mutable_origin_duration_one() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.origin_duration_one_.Mutable(GetArenaForAllocation());
}
inline std::string* role_cfg::release_origin_duration_one() {
  // @@protoc_insertion_point(field_release:role_cfg.origin_duration_one)
  if (!_internal_has_origin_duration_one()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.origin_duration_one_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_duration_one_.IsDefault()) {
    _impl_.origin_duration_one_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void role_cfg::set_allocated_origin_duration_one(std::string* origin_duration_one) {
  if (origin_duration_one != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.origin_duration_one_.SetAllocated(origin_duration_one, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.origin_duration_one_.IsDefault()) {
    _impl_.origin_duration_one_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:role_cfg.origin_duration_one)
}

// repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
inline int role_cfg::_internal_convert_timepoint_arr_size() const {
  return _impl_.convert_timepoint_arr_.size();
}
inline int role_cfg::convert_timepoint_arr_size() const {
  return _internal_convert_timepoint_arr_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* role_cfg::mutable_convert_timepoint_arr(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_timepoint_arr)
  return _impl_.convert_timepoint_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >*
role_cfg::mutable_convert_timepoint_arr() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.convert_timepoint_arr)
  return &_impl_.convert_timepoint_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& role_cfg::_internal_convert_timepoint_arr(int index) const {
  return _impl_.convert_timepoint_arr_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& role_cfg::convert_timepoint_arr(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.convert_timepoint_arr)
  return _internal_convert_timepoint_arr(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* role_cfg::_internal_add_convert_timepoint_arr() {
  return _impl_.convert_timepoint_arr_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* role_cfg::add_convert_timepoint_arr() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _add = _internal_add_convert_timepoint_arr();
  // @@protoc_insertion_point(field_add:role_cfg.convert_timepoint_arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Timestamp >&
role_cfg::convert_timepoint_arr() const {
  // @@protoc_insertion_point(field_list:role_cfg.convert_timepoint_arr)
  return _impl_.convert_timepoint_arr_;
}

// repeated string origin_timepoint_arr = 26;
inline int role_cfg::_internal_origin_timepoint_arr_size() const {
  return _impl_.origin_timepoint_arr_.size();
}
inline int role_cfg::origin_timepoint_arr_size() const {
  return _internal_origin_timepoint_arr_size();
}
inline void role_cfg::clear_origin_timepoint_arr() {
  _impl_.origin_timepoint_arr_.Clear();
}
inline std::string* role_cfg::add_origin_timepoint_arr() {
  std::string* _s = _internal_add_origin_timepoint_arr();
  // @@protoc_insertion_point(field_add_mutable:role_cfg.origin_timepoint_arr)
  return _s;
}
inline const std::string& role_cfg::_internal_origin_timepoint_arr(int index) const {
  return _impl_.origin_timepoint_arr_.Get(index);
}
inline const std::string& role_cfg::origin_timepoint_arr(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.origin_timepoint_arr)
  return _internal_origin_timepoint_arr(index);
}
inline std::string* role_cfg::mutable_origin_timepoint_arr(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_timepoint_arr)
  return _impl_.origin_timepoint_arr_.Mutable(index);
}
inline void role_cfg::set_origin_timepoint_arr(int index, const std::string& value) {
  _impl_.origin_timepoint_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::set_origin_timepoint_arr(int index, std::string&& value) {
  _impl_.origin_timepoint_arr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::set_origin_timepoint_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.origin_timepoint_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::set_origin_timepoint_arr(int index, const char* value, size_t size) {
  _impl_.origin_timepoint_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.origin_timepoint_arr)
}
inline std::string* role_cfg::_internal_add_origin_timepoint_arr() {
  return _impl_.origin_timepoint_arr_.Add();
}
inline void role_cfg::add_origin_timepoint_arr(const std::string& value) {
  _impl_.origin_timepoint_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(std::string&& value) {
  _impl_.origin_timepoint_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.origin_timepoint_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.origin_timepoint_arr)
}
inline void role_cfg::add_origin_timepoint_arr(const char* value, size_t size) {
  _impl_.origin_timepoint_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.origin_timepoint_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
role_cfg::origin_timepoint_arr() const {
  // @@protoc_insertion_point(field_list:role_cfg.origin_timepoint_arr)
  return _impl_.origin_timepoint_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
role_cfg::mutable_origin_timepoint_arr() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.origin_timepoint_arr)
  return &_impl_.origin_timepoint_arr_;
}

// repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
inline int role_cfg::_internal_convert_duration_arr_size() const {
  return _impl_.convert_duration_arr_.size();
}
inline int role_cfg::convert_duration_arr_size() const {
  return _internal_convert_duration_arr_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* role_cfg::mutable_convert_duration_arr(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.convert_duration_arr)
  return _impl_.convert_duration_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >*
role_cfg::mutable_convert_duration_arr() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.convert_duration_arr)
  return &_impl_.convert_duration_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& role_cfg::_internal_convert_duration_arr(int index) const {
  return _impl_.convert_duration_arr_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& role_cfg::convert_duration_arr(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.convert_duration_arr)
  return _internal_convert_duration_arr(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* role_cfg::_internal_add_convert_duration_arr() {
  return _impl_.convert_duration_arr_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* role_cfg::add_convert_duration_arr() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _add = _internal_add_convert_duration_arr();
  // @@protoc_insertion_point(field_add:role_cfg.convert_duration_arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Duration >&
role_cfg::convert_duration_arr() const {
  // @@protoc_insertion_point(field_list:role_cfg.convert_duration_arr)
  return _impl_.convert_duration_arr_;
}

// repeated string origin_duration_arr = 28;
inline int role_cfg::_internal_origin_duration_arr_size() const {
  return _impl_.origin_duration_arr_.size();
}
inline int role_cfg::origin_duration_arr_size() const {
  return _internal_origin_duration_arr_size();
}
inline void role_cfg::clear_origin_duration_arr() {
  _impl_.origin_duration_arr_.Clear();
}
inline std::string* role_cfg::add_origin_duration_arr() {
  std::string* _s = _internal_add_origin_duration_arr();
  // @@protoc_insertion_point(field_add_mutable:role_cfg.origin_duration_arr)
  return _s;
}
inline const std::string& role_cfg::_internal_origin_duration_arr(int index) const {
  return _impl_.origin_duration_arr_.Get(index);
}
inline const std::string& role_cfg::origin_duration_arr(int index) const {
  // @@protoc_insertion_point(field_get:role_cfg.origin_duration_arr)
  return _internal_origin_duration_arr(index);
}
inline std::string* role_cfg::mutable_origin_duration_arr(int index) {
  // @@protoc_insertion_point(field_mutable:role_cfg.origin_duration_arr)
  return _impl_.origin_duration_arr_.Mutable(index);
}
inline void role_cfg::set_origin_duration_arr(int index, const std::string& value) {
  _impl_.origin_duration_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:role_cfg.origin_duration_arr)
}
inline void role_cfg::set_origin_duration_arr(int index, std::string&& value) {
  _impl_.origin_duration_arr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:role_cfg.origin_duration_arr)
}
inline void role_cfg::set_origin_duration_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.origin_duration_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:role_cfg.origin_duration_arr)
}
inline void role_cfg::set_origin_duration_arr(int index, const char* value, size_t size) {
  _impl_.origin_duration_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:role_cfg.origin_duration_arr)
}
inline std::string* role_cfg::_internal_add_origin_duration_arr() {
  return _impl_.origin_duration_arr_.Add();
}
inline void role_cfg::add_origin_duration_arr(const std::string& value) {
  _impl_.origin_duration_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(std::string&& value) {
  _impl_.origin_duration_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.origin_duration_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:role_cfg.origin_duration_arr)
}
inline void role_cfg::add_origin_duration_arr(const char* value, size_t size) {
  _impl_.origin_duration_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:role_cfg.origin_duration_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
role_cfg::origin_duration_arr() const {
  // @@protoc_insertion_point(field_list:role_cfg.origin_duration_arr)
  return _impl_.origin_duration_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
role_cfg::mutable_origin_duration_arr() {
  // @@protoc_insertion_point(field_mutable_list:role_cfg.origin_duration_arr)
  return &_impl_.origin_duration_arr_;
}

// -------------------------------------------------------------------

// role_upgrade_cfg

// optional uint32 Id = 1 [(.org.xresloader.ue.key_tag) = 1000];
inline bool role_upgrade_cfg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_id() const {
  return _internal_has_id();
}
inline void role_upgrade_cfg::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t role_upgrade_cfg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t role_upgrade_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Id)
  return _internal_id();
}
inline void role_upgrade_cfg::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void role_upgrade_cfg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Id)
}

// optional uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
inline bool role_upgrade_cfg::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_level() const {
  return _internal_has_level();
}
inline void role_upgrade_cfg::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t role_upgrade_cfg::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t role_upgrade_cfg::level() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Level)
  return _internal_level();
}
inline void role_upgrade_cfg::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.level_ = value;
}
inline void role_upgrade_cfg::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Level)
}

// optional uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
inline bool role_upgrade_cfg::_internal_has_costtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_costtype() const {
  return _internal_has_costtype();
}
inline void role_upgrade_cfg::clear_costtype() {
  _impl_.costtype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t role_upgrade_cfg::_internal_costtype() const {
  return _impl_.costtype_;
}
inline uint32_t role_upgrade_cfg::costtype() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostType)
  return _internal_costtype();
}
inline void role_upgrade_cfg::_internal_set_costtype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.costtype_ = value;
}
inline void role_upgrade_cfg::set_costtype(uint32_t value) {
  _internal_set_costtype(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostType)
}

// optional int64 CostValue = 4;
inline bool role_upgrade_cfg::_internal_has_costvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_costvalue() const {
  return _internal_has_costvalue();
}
inline void role_upgrade_cfg::clear_costvalue() {
  _impl_.costvalue_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t role_upgrade_cfg::_internal_costvalue() const {
  return _impl_.costvalue_;
}
inline int64_t role_upgrade_cfg::costvalue() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostValue)
  return _internal_costvalue();
}
inline void role_upgrade_cfg::_internal_set_costvalue(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.costvalue_ = value;
}
inline void role_upgrade_cfg::set_costvalue(int64_t value) {
  _internal_set_costvalue(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostValue)
}

// optional int32 ScoreAdd = 5;
inline bool role_upgrade_cfg::_internal_has_scoreadd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool role_upgrade_cfg::has_scoreadd() const {
  return _internal_has_scoreadd();
}
inline void role_upgrade_cfg::clear_scoreadd() {
  _impl_.scoreadd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t role_upgrade_cfg::_internal_scoreadd() const {
  return _impl_.scoreadd_;
}
inline int32_t role_upgrade_cfg::scoreadd() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.ScoreAdd)
  return _internal_scoreadd();
}
inline void role_upgrade_cfg::_internal_set_scoreadd(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.scoreadd_ = value;
}
inline void role_upgrade_cfg::set_scoreadd(int32_t value) {
  _internal_set_scoreadd(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.ScoreAdd)
}

// -------------------------------------------------------------------

// test_msg_verifier

// optional uint32 test_id_1 = 10001;
inline bool test_msg_verifier::_internal_has_test_id_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool test_msg_verifier::has_test_id_1() const {
  return _internal_has_test_id_1();
}
inline void test_msg_verifier::clear_test_id_1() {
  _impl_.test_id_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t test_msg_verifier::_internal_test_id_1() const {
  return _impl_.test_id_1_;
}
inline uint32_t test_msg_verifier::test_id_1() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_1)
  return _internal_test_id_1();
}
inline void test_msg_verifier::_internal_set_test_id_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.test_id_1_ = value;
}
inline void test_msg_verifier::set_test_id_1(uint32_t value) {
  _internal_set_test_id_1(value);
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_1)
}

// optional uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
inline bool test_msg_verifier::_internal_has_test_id_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool test_msg_verifier::has_test_id_2() const {
  return _internal_has_test_id_2();
}
inline void test_msg_verifier::clear_test_id_2() {
  _impl_.test_id_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t test_msg_verifier::_internal_test_id_2() const {
  return _impl_.test_id_2_;
}
inline uint32_t test_msg_verifier::test_id_2() const {
  // @@protoc_insertion_point(field_get:test_msg_verifier.test_id_2)
  return _internal_test_id_2();
}
inline void test_msg_verifier::_internal_set_test_id_2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.test_id_2_ = value;
}
inline void test_msg_verifier::set_test_id_2(uint32_t value) {
  _internal_set_test_id_2(value);
  // @@protoc_insertion_point(field_set:test_msg_verifier.test_id_2)
}

// -------------------------------------------------------------------

// arr_in_arr

// optional string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
inline bool arr_in_arr::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool arr_in_arr::has_name() const {
  return _internal_has_name();
}
inline void arr_in_arr::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& arr_in_arr::name() const {
  // @@protoc_insertion_point(field_get:arr_in_arr.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void arr_in_arr::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:arr_in_arr.name)
}
inline std::string* arr_in_arr::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:arr_in_arr.name)
  return _s;
}
inline const std::string& arr_in_arr::_internal_name() const {
  return _impl_.name_.Get();
}
inline void arr_in_arr::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* arr_in_arr::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* arr_in_arr::release_name() {
  // @@protoc_insertion_point(field_release:arr_in_arr.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void arr_in_arr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.name)
}

// repeated int32 int_arr = 2 [packed = true];
inline int arr_in_arr::_internal_int_arr_size() const {
  return _impl_.int_arr_.size();
}
inline int arr_in_arr::int_arr_size() const {
  return _internal_int_arr_size();
}
inline void arr_in_arr::clear_int_arr() {
  _impl_.int_arr_.Clear();
}
inline int32_t arr_in_arr::_internal_int_arr(int index) const {
  return _impl_.int_arr_.Get(index);
}
inline int32_t arr_in_arr::int_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr.int_arr)
  return _internal_int_arr(index);
}
inline void arr_in_arr::set_int_arr(int index, int32_t value) {
  _impl_.int_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr.int_arr)
}
inline void arr_in_arr::_internal_add_int_arr(int32_t value) {
  _impl_.int_arr_.Add(value);
}
inline void arr_in_arr::add_int_arr(int32_t value) {
  _internal_add_int_arr(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.int_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
arr_in_arr::_internal_int_arr() const {
  return _impl_.int_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
arr_in_arr::int_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr.int_arr)
  return _internal_int_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
arr_in_arr::_internal_mutable_int_arr() {
  return &_impl_.int_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
arr_in_arr::mutable_int_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.int_arr)
  return _internal_mutable_int_arr();
}

// repeated string str_arr = 3;
inline int arr_in_arr::_internal_str_arr_size() const {
  return _impl_.str_arr_.size();
}
inline int arr_in_arr::str_arr_size() const {
  return _internal_str_arr_size();
}
inline void arr_in_arr::clear_str_arr() {
  _impl_.str_arr_.Clear();
}
inline std::string* arr_in_arr::add_str_arr() {
  std::string* _s = _internal_add_str_arr();
  // @@protoc_insertion_point(field_add_mutable:arr_in_arr.str_arr)
  return _s;
}
inline const std::string& arr_in_arr::_internal_str_arr(int index) const {
  return _impl_.str_arr_.Get(index);
}
inline const std::string& arr_in_arr::str_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr.str_arr)
  return _internal_str_arr(index);
}
inline std::string* arr_in_arr::mutable_str_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr.str_arr)
  return _impl_.str_arr_.Mutable(index);
}
inline void arr_in_arr::set_str_arr(int index, const std::string& value) {
  _impl_.str_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, std::string&& value) {
  _impl_.str_arr_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_arr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::set_str_arr(int index, const char* value, size_t size) {
  _impl_.str_arr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:arr_in_arr.str_arr)
}
inline std::string* arr_in_arr::_internal_add_str_arr() {
  return _impl_.str_arr_.Add();
}
inline void arr_in_arr::add_str_arr(const std::string& value) {
  _impl_.str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(std::string&& value) {
  _impl_.str_arr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.str_arr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:arr_in_arr.str_arr)
}
inline void arr_in_arr::add_str_arr(const char* value, size_t size) {
  _impl_.str_arr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:arr_in_arr.str_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
arr_in_arr::str_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr.str_arr)
  return _impl_.str_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
arr_in_arr::mutable_str_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr.str_arr)
  return &_impl_.str_arr_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// arr_in_arr_cfg

// optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
inline bool arr_in_arr_cfg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool arr_in_arr_cfg::has_id() const {
  return _internal_has_id();
}
inline void arr_in_arr_cfg::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t arr_in_arr_cfg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t arr_in_arr_cfg::id() const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.id)
  return _internal_id();
}
inline void arr_in_arr_cfg::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void arr_in_arr_cfg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.id)
}

// repeated .arr_in_arr arr = 2;
inline int arr_in_arr_cfg::_internal_arr_size() const {
  return _impl_.arr_.size();
}
inline int arr_in_arr_cfg::arr_size() const {
  return _internal_arr_size();
}
inline void arr_in_arr_cfg::clear_arr() {
  _impl_.arr_.Clear();
}
inline ::arr_in_arr* arr_in_arr_cfg::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.arr)
  return _impl_.arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >*
arr_in_arr_cfg::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.arr)
  return &_impl_.arr_;
}
inline const ::arr_in_arr& arr_in_arr_cfg::_internal_arr(int index) const {
  return _impl_.arr_.Get(index);
}
inline const ::arr_in_arr& arr_in_arr_cfg::arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.arr)
  return _internal_arr(index);
}
inline ::arr_in_arr* arr_in_arr_cfg::_internal_add_arr() {
  return _impl_.arr_.Add();
}
inline ::arr_in_arr* arr_in_arr_cfg::add_arr() {
  ::arr_in_arr* _add = _internal_add_arr();
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::arr_in_arr >&
arr_in_arr_cfg::arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.arr)
  return _impl_.arr_;
}

// repeated int32 test_plain_int_arr = 3;
inline int arr_in_arr_cfg::_internal_test_plain_int_arr_size() const {
  return _impl_.test_plain_int_arr_.size();
}
inline int arr_in_arr_cfg::test_plain_int_arr_size() const {
  return _internal_test_plain_int_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_int_arr() {
  _impl_.test_plain_int_arr_.Clear();
}
inline int32_t arr_in_arr_cfg::_internal_test_plain_int_arr(int index) const {
  return _impl_.test_plain_int_arr_.Get(index);
}
inline int32_t arr_in_arr_cfg::test_plain_int_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_test_plain_int_arr(index);
}
inline void arr_in_arr_cfg::set_test_plain_int_arr(int index, int32_t value) {
  _impl_.test_plain_int_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.test_plain_int_arr)
}
inline void arr_in_arr_cfg::_internal_add_test_plain_int_arr(int32_t value) {
  _impl_.test_plain_int_arr_.Add(value);
}
inline void arr_in_arr_cfg::add_test_plain_int_arr(int32_t value) {
  _internal_add_test_plain_int_arr(value);
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_int_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
arr_in_arr_cfg::_internal_test_plain_int_arr() const {
  return _impl_.test_plain_int_arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
arr_in_arr_cfg::test_plain_int_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_test_plain_int_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
arr_in_arr_cfg::_internal_mutable_test_plain_int_arr() {
  return &_impl_.test_plain_int_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
arr_in_arr_cfg::mutable_test_plain_int_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_int_arr)
  return _internal_mutable_test_plain_int_arr();
}

// repeated .cost_type test_plain_enum_arr = 4;
inline int arr_in_arr_cfg::_internal_test_plain_enum_arr_size() const {
  return _impl_.test_plain_enum_arr_.size();
}
inline int arr_in_arr_cfg::test_plain_enum_arr_size() const {
  return _internal_test_plain_enum_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_enum_arr() {
  _impl_.test_plain_enum_arr_.Clear();
}
inline ::cost_type arr_in_arr_cfg::_internal_test_plain_enum_arr(int index) const {
  return static_cast< ::cost_type >(_impl_.test_plain_enum_arr_.Get(index));
}
inline ::cost_type arr_in_arr_cfg::test_plain_enum_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_enum_arr)
  return _internal_test_plain_enum_arr(index);
}
inline void arr_in_arr_cfg::set_test_plain_enum_arr(int index, ::cost_type value) {
  assert(::cost_type_IsValid(value));
  _impl_.test_plain_enum_arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:arr_in_arr_cfg.test_plain_enum_arr)
}
inline void arr_in_arr_cfg::_internal_add_test_plain_enum_arr(::cost_type value) {
  assert(::cost_type_IsValid(value));
  _impl_.test_plain_enum_arr_.Add(value);
}
inline void arr_in_arr_cfg::add_test_plain_enum_arr(::cost_type value) {
  _internal_add_test_plain_enum_arr(value);
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_enum_arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
arr_in_arr_cfg::test_plain_enum_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_enum_arr)
  return _impl_.test_plain_enum_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
arr_in_arr_cfg::_internal_mutable_test_plain_enum_arr() {
  return &_impl_.test_plain_enum_arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
arr_in_arr_cfg::mutable_test_plain_enum_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_enum_arr)
  return _internal_mutable_test_plain_enum_arr();
}

// optional .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
inline bool arr_in_arr_cfg::_internal_has_test_plain_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.test_plain_msg_ != nullptr);
  return value;
}
inline bool arr_in_arr_cfg::has_test_plain_msg() const {
  return _internal_has_test_plain_msg();
}
inline void arr_in_arr_cfg::clear_test_plain_msg() {
  if (_impl_.test_plain_msg_ != nullptr) _impl_.test_plain_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::test_msg_verifier& arr_in_arr_cfg::_internal_test_plain_msg() const {
  const ::test_msg_verifier* p = _impl_.test_plain_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::test_msg_verifier&>(
      ::_test_msg_verifier_default_instance_);
}
inline const ::test_msg_verifier& arr_in_arr_cfg::test_plain_msg() const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_msg)
  return _internal_test_plain_msg();
}
inline void arr_in_arr_cfg::unsafe_arena_set_allocated_test_plain_msg(
    ::test_msg_verifier* test_plain_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.test_plain_msg_);
  }
  _impl_.test_plain_msg_ = test_plain_msg;
  if (test_plain_msg) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:arr_in_arr_cfg.test_plain_msg)
}
inline ::test_msg_verifier* arr_in_arr_cfg::release_test_plain_msg() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test_msg_verifier* temp = _impl_.test_plain_msg_;
  _impl_.test_plain_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test_msg_verifier* arr_in_arr_cfg::unsafe_arena_release_test_plain_msg() {
  // @@protoc_insertion_point(field_release:arr_in_arr_cfg.test_plain_msg)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test_msg_verifier* temp = _impl_.test_plain_msg_;
  _impl_.test_plain_msg_ = nullptr;
  return temp;
}
inline ::test_msg_verifier* arr_in_arr_cfg::_internal_mutable_test_plain_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.test_plain_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_msg_verifier>(GetArenaForAllocation());
    _impl_.test_plain_msg_ = p;
  }
  return _impl_.test_plain_msg_;
}
inline ::test_msg_verifier* arr_in_arr_cfg::mutable_test_plain_msg() {
  ::test_msg_verifier* _msg = _internal_mutable_test_plain_msg();
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.test_plain_msg)
  return _msg;
}
inline void arr_in_arr_cfg::set_allocated_test_plain_msg(::test_msg_verifier* test_plain_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.test_plain_msg_;
  }
  if (test_plain_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(test_plain_msg);
    if (message_arena != submessage_arena) {
      test_plain_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_plain_msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.test_plain_msg_ = test_plain_msg;
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr_cfg.test_plain_msg)
}

// repeated .test_msg_verifier test_plain_msg_arr = 6;
inline int arr_in_arr_cfg::_internal_test_plain_msg_arr_size() const {
  return _impl_.test_plain_msg_arr_.size();
}
inline int arr_in_arr_cfg::test_plain_msg_arr_size() const {
  return _internal_test_plain_msg_arr_size();
}
inline void arr_in_arr_cfg::clear_test_plain_msg_arr() {
  _impl_.test_plain_msg_arr_.Clear();
}
inline ::test_msg_verifier* arr_in_arr_cfg::mutable_test_plain_msg_arr(int index) {
  // @@protoc_insertion_point(field_mutable:arr_in_arr_cfg.test_plain_msg_arr)
  return _impl_.test_plain_msg_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >*
arr_in_arr_cfg::mutable_test_plain_msg_arr() {
  // @@protoc_insertion_point(field_mutable_list:arr_in_arr_cfg.test_plain_msg_arr)
  return &_impl_.test_plain_msg_arr_;
}
inline const ::test_msg_verifier& arr_in_arr_cfg::_internal_test_plain_msg_arr(int index) const {
  return _impl_.test_plain_msg_arr_.Get(index);
}
inline const ::test_msg_verifier& arr_in_arr_cfg::test_plain_msg_arr(int index) const {
  // @@protoc_insertion_point(field_get:arr_in_arr_cfg.test_plain_msg_arr)
  return _internal_test_plain_msg_arr(index);
}
inline ::test_msg_verifier* arr_in_arr_cfg::_internal_add_test_plain_msg_arr() {
  return _impl_.test_plain_msg_arr_.Add();
}
inline ::test_msg_verifier* arr_in_arr_cfg::add_test_plain_msg_arr() {
  ::test_msg_verifier* _add = _internal_add_test_plain_msg_arr();
  // @@protoc_insertion_point(field_add:arr_in_arr_cfg.test_plain_msg_arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_msg_verifier >&
arr_in_arr_cfg::test_plain_msg_arr() const {
  // @@protoc_insertion_point(field_list:arr_in_arr_cfg.test_plain_msg_arr)
  return _impl_.test_plain_msg_arr_;
}

// map<int32, string> test_map_is = 7;
inline int arr_in_arr_cfg::_internal_test_map_is_size() const {
  return _impl_.test_map_is_.size();
}
inline int arr_in_arr_cfg::test_map_is_size() const {
  return _internal_test_map_is_size();
}
inline void arr_in_arr_cfg::clear_test_map_is() {
  _impl_.test_map_is_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
arr_in_arr_cfg::_internal_test_map_is() const {
  return _impl_.test_map_is_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >&
arr_in_arr_cfg::test_map_is() const {
  // @@protoc_insertion_point(field_map:arr_in_arr_cfg.test_map_is)
  return _internal_test_map_is();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
arr_in_arr_cfg::_internal_mutable_test_map_is() {
  return _impl_.test_map_is_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >*
arr_in_arr_cfg::mutable_test_map_is() {
  // @@protoc_insertion_point(field_mutable_map:arr_in_arr_cfg.test_map_is)
  return _internal_mutable_test_map_is();
}

// map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
inline int arr_in_arr_cfg::_internal_test_map_sm_size() const {
  return _impl_.test_map_sm_.size();
}
inline int arr_in_arr_cfg::test_map_sm_size() const {
  return _internal_test_map_sm_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >&
arr_in_arr_cfg::_internal_test_map_sm() const {
  return _impl_.test_map_sm_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >&
arr_in_arr_cfg::test_map_sm() const {
  // @@protoc_insertion_point(field_map:arr_in_arr_cfg.test_map_sm)
  return _internal_test_map_sm();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >*
arr_in_arr_cfg::_internal_mutable_test_map_sm() {
  return _impl_.test_map_sm_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >*
arr_in_arr_cfg::mutable_test_map_sm() {
  // @@protoc_insertion_point(field_mutable_map:arr_in_arr_cfg.test_map_sm)
  return _internal_mutable_test_map_sm();
}

// -------------------------------------------------------------------

// event_reward_item

// optional uint32 item_id = 1;
inline bool event_reward_item::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool event_reward_item::has_item_id() const {
  return _internal_has_item_id();
}
inline void event_reward_item::clear_item_id() {
  _impl_.item_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t event_reward_item::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t event_reward_item::item_id() const {
  // @@protoc_insertion_point(field_get:event_reward_item.item_id)
  return _internal_item_id();
}
inline void event_reward_item::_internal_set_item_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_id_ = value;
}
inline void event_reward_item::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:event_reward_item.item_id)
}

// optional uint32 item_count = 2;
inline bool event_reward_item::_internal_has_item_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool event_reward_item::has_item_count() const {
  return _internal_has_item_count();
}
inline void event_reward_item::clear_item_count() {
  _impl_.item_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t event_reward_item::_internal_item_count() const {
  return _impl_.item_count_;
}
inline uint32_t event_reward_item::item_count() const {
  // @@protoc_insertion_point(field_get:event_reward_item.item_count)
  return _internal_item_count();
}
inline void event_reward_item::_internal_set_item_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_count_ = value;
}
inline void event_reward_item::set_item_count(uint32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:event_reward_item.item_count)
}

// string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
inline bool event_reward_item::_internal_has_nested_note() const {
  return nested_case() == kNestedNote;
}
inline bool event_reward_item::has_nested_note() const {
  return _internal_has_nested_note();
}
inline void event_reward_item::set_has_nested_note() {
  _impl_._oneof_case_[0] = kNestedNote;
}
inline void event_reward_item::clear_nested_note() {
  if (_internal_has_nested_note()) {
    _impl_.nested_.nested_note_.Destroy();
    clear_has_nested();
  }
}
inline const std::string& event_reward_item::nested_note() const {
  // @@protoc_insertion_point(field_get:event_reward_item.nested_note)
  return _internal_nested_note();
}
template <typename ArgT0, typename... ArgT>
inline void event_reward_item::set_nested_note(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_nested_note()) {
    clear_nested();
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_reward_item.nested_note)
}
inline std::string* event_reward_item::mutable_nested_note() {
  std::string* _s = _internal_mutable_nested_note();
  // @@protoc_insertion_point(field_mutable:event_reward_item.nested_note)
  return _s;
}
inline const std::string& event_reward_item::_internal_nested_note() const {
  if (_internal_has_nested_note()) {
    return _impl_.nested_.nested_note_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void event_reward_item::_internal_set_nested_note(const std::string& value) {
  if (!_internal_has_nested_note()) {
    clear_nested();
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set(value, GetArenaForAllocation());
}
inline std::string* event_reward_item::_internal_mutable_nested_note() {
  if (!_internal_has_nested_note()) {
    clear_nested();
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  return _impl_.nested_.nested_note_.Mutable(      GetArenaForAllocation());
}
inline std::string* event_reward_item::release_nested_note() {
  // @@protoc_insertion_point(field_release:event_reward_item.nested_note)
  if (_internal_has_nested_note()) {
    clear_has_nested();
    return _impl_.nested_.nested_note_.Release();
  } else {
    return nullptr;
  }
}
inline void event_reward_item::set_allocated_nested_note(std::string* nested_note) {
  if (has_nested()) {
    clear_nested();
  }
  if (nested_note != nullptr) {
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitAllocated(nested_note, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:event_reward_item.nested_note)
}

// .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
inline bool event_reward_item::_internal_has_nested_enum_type() const {
  return nested_case() == kNestedEnumType;
}
inline bool event_reward_item::has_nested_enum_type() const {
  return _internal_has_nested_enum_type();
}
inline void event_reward_item::set_has_nested_enum_type() {
  _impl_._oneof_case_[0] = kNestedEnumType;
}
inline void event_reward_item::clear_nested_enum_type() {
  if (_internal_has_nested_enum_type()) {
    _impl_.nested_.nested_enum_type_ = 0;
    clear_has_nested();
  }
}
inline ::cost_type event_reward_item::_internal_nested_enum_type() const {
  if (_internal_has_nested_enum_type()) {
    return static_cast< ::cost_type >(_impl_.nested_.nested_enum_type_);
  }
  return static_cast< ::cost_type >(0);
}
inline ::cost_type event_reward_item::nested_enum_type() const {
  // @@protoc_insertion_point(field_get:event_reward_item.nested_enum_type)
  return _internal_nested_enum_type();
}
inline void event_reward_item::_internal_set_nested_enum_type(::cost_type value) {
  assert(::cost_type_IsValid(value));
  if (!_internal_has_nested_enum_type()) {
    clear_nested();
    set_has_nested_enum_type();
  }
  _impl_.nested_.nested_enum_type_ = value;
}
inline void event_reward_item::set_nested_enum_type(::cost_type value) {
  _internal_set_nested_enum_type(value);
  // @@protoc_insertion_point(field_set:event_reward_item.nested_enum_type)
}

inline bool event_reward_item::has_nested() const {
  return nested_case() != NESTED_NOT_SET;
}
inline void event_reward_item::clear_has_nested() {
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}
inline event_reward_item::NestedCase event_reward_item::nested_case() const {
  return event_reward_item::NestedCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// event_rule_item

// optional uint32 rule_id = 1;
inline bool event_rule_item::_internal_has_rule_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool event_rule_item::has_rule_id() const {
  return _internal_has_rule_id();
}
inline void event_rule_item::clear_rule_id() {
  _impl_.rule_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t event_rule_item::_internal_rule_id() const {
  return _impl_.rule_id_;
}
inline uint32_t event_rule_item::rule_id() const {
  // @@protoc_insertion_point(field_get:event_rule_item.rule_id)
  return _internal_rule_id();
}
inline void event_rule_item::_internal_set_rule_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rule_id_ = value;
}
inline void event_rule_item::set_rule_id(uint32_t value) {
  _internal_set_rule_id(value);
  // @@protoc_insertion_point(field_set:event_rule_item.rule_id)
}

// optional uint32 rule_param = 2;
inline bool event_rule_item::_internal_has_rule_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool event_rule_item::has_rule_param() const {
  return _internal_has_rule_param();
}
inline void event_rule_item::clear_rule_param() {
  _impl_.rule_param_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t event_rule_item::_internal_rule_param() const {
  return _impl_.rule_param_;
}
inline uint32_t event_rule_item::rule_param() const {
  // @@protoc_insertion_point(field_get:event_rule_item.rule_param)
  return _internal_rule_param();
}
inline void event_rule_item::_internal_set_rule_param(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rule_param_ = value;
}
inline void event_rule_item::set_rule_param(uint32_t value) {
  _internal_set_rule_param(value);
  // @@protoc_insertion_point(field_set:event_rule_item.rule_param)
}

// string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
inline bool event_rule_item::_internal_has_nested_note() const {
  return nested_case() == kNestedNote;
}
inline bool event_rule_item::has_nested_note() const {
  return _internal_has_nested_note();
}
inline void event_rule_item::set_has_nested_note() {
  _impl_._oneof_case_[0] = kNestedNote;
}
inline void event_rule_item::clear_nested_note() {
  if (_internal_has_nested_note()) {
    _impl_.nested_.nested_note_.Destroy();
    clear_has_nested();
  }
}
inline const std::string& event_rule_item::nested_note() const {
  // @@protoc_insertion_point(field_get:event_rule_item.nested_note)
  return _internal_nested_note();
}
template <typename ArgT0, typename... ArgT>
inline void event_rule_item::set_nested_note(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_nested_note()) {
    clear_nested();
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_rule_item.nested_note)
}
inline std::string* event_rule_item::mutable_nested_note() {
  std::string* _s = _internal_mutable_nested_note();
  // @@protoc_insertion_point(field_mutable:event_rule_item.nested_note)
  return _s;
}
inline const std::string& event_rule_item::_internal_nested_note() const {
  if (_internal_has_nested_note()) {
    return _impl_.nested_.nested_note_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void event_rule_item::_internal_set_nested_note(const std::string& value) {
  if (!_internal_has_nested_note()) {
    clear_nested();
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  _impl_.nested_.nested_note_.Set(value, GetArenaForAllocation());
}
inline std::string* event_rule_item::_internal_mutable_nested_note() {
  if (!_internal_has_nested_note()) {
    clear_nested();
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitDefault();
  }
  return _impl_.nested_.nested_note_.Mutable(      GetArenaForAllocation());
}
inline std::string* event_rule_item::release_nested_note() {
  // @@protoc_insertion_point(field_release:event_rule_item.nested_note)
  if (_internal_has_nested_note()) {
    clear_has_nested();
    return _impl_.nested_.nested_note_.Release();
  } else {
    return nullptr;
  }
}
inline void event_rule_item::set_allocated_nested_note(std::string* nested_note) {
  if (has_nested()) {
    clear_nested();
  }
  if (nested_note != nullptr) {
    set_has_nested_note();
    _impl_.nested_.nested_note_.InitAllocated(nested_note, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:event_rule_item.nested_note)
}

// .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
inline bool event_rule_item::_internal_has_nested_enum_type() const {
  return nested_case() == kNestedEnumType;
}
inline bool event_rule_item::has_nested_enum_type() const {
  return _internal_has_nested_enum_type();
}
inline void event_rule_item::set_has_nested_enum_type() {
  _impl_._oneof_case_[0] = kNestedEnumType;
}
inline void event_rule_item::clear_nested_enum_type() {
  if (_internal_has_nested_enum_type()) {
    _impl_.nested_.nested_enum_type_ = 0;
    clear_has_nested();
  }
}
inline ::cost_type event_rule_item::_internal_nested_enum_type() const {
  if (_internal_has_nested_enum_type()) {
    return static_cast< ::cost_type >(_impl_.nested_.nested_enum_type_);
  }
  return static_cast< ::cost_type >(0);
}
inline ::cost_type event_rule_item::nested_enum_type() const {
  // @@protoc_insertion_point(field_get:event_rule_item.nested_enum_type)
  return _internal_nested_enum_type();
}
inline void event_rule_item::_internal_set_nested_enum_type(::cost_type value) {
  assert(::cost_type_IsValid(value));
  if (!_internal_has_nested_enum_type()) {
    clear_nested();
    set_has_nested_enum_type();
  }
  _impl_.nested_.nested_enum_type_ = value;
}
inline void event_rule_item::set_nested_enum_type(::cost_type value) {
  _internal_set_nested_enum_type(value);
  // @@protoc_insertion_point(field_set:event_rule_item.nested_enum_type)
}

inline bool event_rule_item::has_nested() const {
  return nested_case() != NESTED_NOT_SET;
}
inline void event_rule_item::clear_has_nested() {
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}
inline event_rule_item::NestedCase event_rule_item::nested_case() const {
  return event_rule_item::NestedCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// event_cfg

// optional uint32 id = 1 [(.org.xresloader.ue.key_tag) = 100];
inline bool event_cfg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool event_cfg::has_id() const {
  return _internal_has_id();
}
inline void event_cfg::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t event_cfg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t event_cfg::id() const {
  // @@protoc_insertion_point(field_get:event_cfg.id)
  return _internal_id();
}
inline void event_cfg::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void event_cfg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:event_cfg.id)
}

// optional uint32 process = 2 [(.org.xresloader.ue.key_tag) = 1];
inline bool event_cfg::_internal_has_process() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool event_cfg::has_process() const {
  return _internal_has_process();
}
inline void event_cfg::clear_process() {
  _impl_.process_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t event_cfg::_internal_process() const {
  return _impl_.process_;
}
inline uint32_t event_cfg::process() const {
  // @@protoc_insertion_point(field_get:event_cfg.process)
  return _internal_process();
}
inline void event_cfg::_internal_set_process(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.process_ = value;
}
inline void event_cfg::set_process(uint32_t value) {
  _internal_set_process(value);
  // @@protoc_insertion_point(field_set:event_cfg.process)
}

// optional .event_rule_item rule = 6;
inline bool event_cfg::_internal_has_rule() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rule_ != nullptr);
  return value;
}
inline bool event_cfg::has_rule() const {
  return _internal_has_rule();
}
inline void event_cfg::clear_rule() {
  if (_impl_.rule_ != nullptr) _impl_.rule_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::event_rule_item& event_cfg::_internal_rule() const {
  const ::event_rule_item* p = _impl_.rule_;
  return p != nullptr ? *p : reinterpret_cast<const ::event_rule_item&>(
      ::_event_rule_item_default_instance_);
}
inline const ::event_rule_item& event_cfg::rule() const {
  // @@protoc_insertion_point(field_get:event_cfg.rule)
  return _internal_rule();
}
inline void event_cfg::unsafe_arena_set_allocated_rule(
    ::event_rule_item* rule) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rule_);
  }
  _impl_.rule_ = rule;
  if (rule) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_cfg.rule)
}
inline ::event_rule_item* event_cfg::release_rule() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_rule_item* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::event_rule_item* event_cfg::unsafe_arena_release_rule() {
  // @@protoc_insertion_point(field_release:event_cfg.rule)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_rule_item* temp = _impl_.rule_;
  _impl_.rule_ = nullptr;
  return temp;
}
inline ::event_rule_item* event_cfg::_internal_mutable_rule() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.rule_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_rule_item>(GetArenaForAllocation());
    _impl_.rule_ = p;
  }
  return _impl_.rule_;
}
inline ::event_rule_item* event_cfg::mutable_rule() {
  ::event_rule_item* _msg = _internal_mutable_rule();
  // @@protoc_insertion_point(field_mutable:event_cfg.rule)
  return _msg;
}
inline void event_cfg::set_allocated_rule(::event_rule_item* rule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rule_;
  }
  if (rule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rule);
    if (message_arena != submessage_arena) {
      rule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rule, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rule_ = rule;
  // @@protoc_insertion_point(field_set_allocated:event_cfg.rule)
}

// optional .event_rule_item specify_field = 7;
inline bool event_cfg::_internal_has_specify_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.specify_field_ != nullptr);
  return value;
}
inline bool event_cfg::has_specify_field() const {
  return _internal_has_specify_field();
}
inline void event_cfg::clear_specify_field() {
  if (_impl_.specify_field_ != nullptr) _impl_.specify_field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::event_rule_item& event_cfg::_internal_specify_field() const {
  const ::event_rule_item* p = _impl_.specify_field_;
  return p != nullptr ? *p : reinterpret_cast<const ::event_rule_item&>(
      ::_event_rule_item_default_instance_);
}
inline const ::event_rule_item& event_cfg::specify_field() const {
  // @@protoc_insertion_point(field_get:event_cfg.specify_field)
  return _internal_specify_field();
}
inline void event_cfg::unsafe_arena_set_allocated_specify_field(
    ::event_rule_item* specify_field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.specify_field_);
  }
  _impl_.specify_field_ = specify_field;
  if (specify_field) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_cfg.specify_field)
}
inline ::event_rule_item* event_cfg::release_specify_field() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::event_rule_item* temp = _impl_.specify_field_;
  _impl_.specify_field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::event_rule_item* event_cfg::unsafe_arena_release_specify_field() {
  // @@protoc_insertion_point(field_release:event_cfg.specify_field)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::event_rule_item* temp = _impl_.specify_field_;
  _impl_.specify_field_ = nullptr;
  return temp;
}
inline ::event_rule_item* event_cfg::_internal_mutable_specify_field() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.specify_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_rule_item>(GetArenaForAllocation());
    _impl_.specify_field_ = p;
  }
  return _impl_.specify_field_;
}
inline ::event_rule_item* event_cfg::mutable_specify_field() {
  ::event_rule_item* _msg = _internal_mutable_specify_field();
  // @@protoc_insertion_point(field_mutable:event_cfg.specify_field)
  return _msg;
}
inline void event_cfg::set_allocated_specify_field(::event_rule_item* specify_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.specify_field_;
  }
  if (specify_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(specify_field);
    if (message_arena != submessage_arena) {
      specify_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, specify_field, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.specify_field_ = specify_field;
  // @@protoc_insertion_point(field_set_allocated:event_cfg.specify_field)
}

// .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
inline bool event_cfg::_internal_has_item() const {
  return reward_case() == kItem;
}
inline bool event_cfg::has_item() const {
  return _internal_has_item();
}
inline void event_cfg::set_has_item() {
  _impl_._oneof_case_[0] = kItem;
}
inline void event_cfg::clear_item() {
  if (_internal_has_item()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.reward_.item_;
    }
    clear_has_reward();
  }
}
inline ::event_reward_item* event_cfg::release_item() {
  // @@protoc_insertion_point(field_release:event_cfg.item)
  if (_internal_has_item()) {
    clear_has_reward();
    ::event_reward_item* temp = _impl_.reward_.item_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.reward_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::event_reward_item& event_cfg::_internal_item() const {
  return _internal_has_item()
      ? *_impl_.reward_.item_
      : reinterpret_cast< ::event_reward_item&>(::_event_reward_item_default_instance_);
}
inline const ::event_reward_item& event_cfg::item() const {
  // @@protoc_insertion_point(field_get:event_cfg.item)
  return _internal_item();
}
inline ::event_reward_item* event_cfg::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:event_cfg.item)
  if (_internal_has_item()) {
    clear_has_reward();
    ::event_reward_item* temp = _impl_.reward_.item_;
    _impl_.reward_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void event_cfg::unsafe_arena_set_allocated_item(::event_reward_item* item) {
  clear_reward();
  if (item) {
    set_has_item();
    _impl_.reward_.item_ = item;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_cfg.item)
}
inline ::event_reward_item* event_cfg::_internal_mutable_item() {
  if (!_internal_has_item()) {
    clear_reward();
    set_has_item();
    _impl_.reward_.item_ = CreateMaybeMessage< ::event_reward_item >(GetArenaForAllocation());
  }
  return _impl_.reward_.item_;
}
inline ::event_reward_item* event_cfg::mutable_item() {
  ::event_reward_item* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:event_cfg.item)
  return _msg;
}

// int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
inline bool event_cfg::_internal_has_user_exp() const {
  return reward_case() == kUserExp;
}
inline bool event_cfg::has_user_exp() const {
  return _internal_has_user_exp();
}
inline void event_cfg::set_has_user_exp() {
  _impl_._oneof_case_[0] = kUserExp;
}
inline void event_cfg::clear_user_exp() {
  if (_internal_has_user_exp()) {
    _impl_.reward_.user_exp_ = int64_t{0};
    clear_has_reward();
  }
}
inline int64_t event_cfg::_internal_user_exp() const {
  if (_internal_has_user_exp()) {
    return _impl_.reward_.user_exp_;
  }
  return int64_t{0};
}
inline void event_cfg::_internal_set_user_exp(int64_t value) {
  if (!_internal_has_user_exp()) {
    clear_reward();
    set_has_user_exp();
  }
  _impl_.reward_.user_exp_ = value;
}
inline int64_t event_cfg::user_exp() const {
  // @@protoc_insertion_point(field_get:event_cfg.user_exp)
  return _internal_user_exp();
}
inline void event_cfg::set_user_exp(int64_t value) {
  _internal_set_user_exp(value);
  // @@protoc_insertion_point(field_set:event_cfg.user_exp)
}

// string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
inline bool event_cfg::_internal_has_note() const {
  return reward_case() == kNote;
}
inline bool event_cfg::has_note() const {
  return _internal_has_note();
}
inline void event_cfg::set_has_note() {
  _impl_._oneof_case_[0] = kNote;
}
inline void event_cfg::clear_note() {
  if (_internal_has_note()) {
    _impl_.reward_.note_.Destroy();
    clear_has_reward();
  }
}
inline const std::string& event_cfg::note() const {
  // @@protoc_insertion_point(field_get:event_cfg.note)
  return _internal_note();
}
template <typename ArgT0, typename... ArgT>
inline void event_cfg::set_note(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_note()) {
    clear_reward();
    set_has_note();
    _impl_.reward_.note_.InitDefault();
  }
  _impl_.reward_.note_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_cfg.note)
}
inline std::string* event_cfg::mutable_note() {
  std::string* _s = _internal_mutable_note();
  // @@protoc_insertion_point(field_mutable:event_cfg.note)
  return _s;
}
inline const std::string& event_cfg::_internal_note() const {
  if (_internal_has_note()) {
    return _impl_.reward_.note_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void event_cfg::_internal_set_note(const std::string& value) {
  if (!_internal_has_note()) {
    clear_reward();
    set_has_note();
    _impl_.reward_.note_.InitDefault();
  }
  _impl_.reward_.note_.Set(value, GetArenaForAllocation());
}
inline std::string* event_cfg::_internal_mutable_note() {
  if (!_internal_has_note()) {
    clear_reward();
    set_has_note();
    _impl_.reward_.note_.InitDefault();
  }
  return _impl_.reward_.note_.Mutable(      GetArenaForAllocation());
}
inline std::string* event_cfg::release_note() {
  // @@protoc_insertion_point(field_release:event_cfg.note)
  if (_internal_has_note()) {
    clear_has_reward();
    return _impl_.reward_.note_.Release();
  } else {
    return nullptr;
  }
}
inline void event_cfg::set_allocated_note(std::string* note) {
  if (has_reward()) {
    clear_reward();
  }
  if (note != nullptr) {
    set_has_note();
    _impl_.reward_.note_.InitAllocated(note, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:event_cfg.note)
}

// .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
inline bool event_cfg::_internal_has_enum_type() const {
  return reward_case() == kEnumType;
}
inline bool event_cfg::has_enum_type() const {
  return _internal_has_enum_type();
}
inline void event_cfg::set_has_enum_type() {
  _impl_._oneof_case_[0] = kEnumType;
}
inline void event_cfg::clear_enum_type() {
  if (_internal_has_enum_type()) {
    _impl_.reward_.enum_type_ = 0;
    clear_has_reward();
  }
}
inline ::cost_type event_cfg::_internal_enum_type() const {
  if (_internal_has_enum_type()) {
    return static_cast< ::cost_type >(_impl_.reward_.enum_type_);
  }
  return static_cast< ::cost_type >(0);
}
inline ::cost_type event_cfg::enum_type() const {
  // @@protoc_insertion_point(field_get:event_cfg.enum_type)
  return _internal_enum_type();
}
inline void event_cfg::_internal_set_enum_type(::cost_type value) {
  assert(::cost_type_IsValid(value));
  if (!_internal_has_enum_type()) {
    clear_reward();
    set_has_enum_type();
  }
  _impl_.reward_.enum_type_ = value;
}
inline void event_cfg::set_enum_type(::cost_type value) {
  _internal_set_enum_type(value);
  // @@protoc_insertion_point(field_set:event_cfg.enum_type)
}

// uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
inline bool event_cfg::_internal_has_user_level() const {
  return unlock_type_case() == kUserLevel;
}
inline bool event_cfg::has_user_level() const {
  return _internal_has_user_level();
}
inline void event_cfg::set_has_user_level() {
  _impl_._oneof_case_[1] = kUserLevel;
}
inline void event_cfg::clear_user_level() {
  if (_internal_has_user_level()) {
    _impl_.unlock_type_.user_level_ = 0u;
    clear_has_unlock_type();
  }
}
inline uint32_t event_cfg::_internal_user_level() const {
  if (_internal_has_user_level()) {
    return _impl_.unlock_type_.user_level_;
  }
  return 0u;
}
inline void event_cfg::_internal_set_user_level(uint32_t value) {
  if (!_internal_has_user_level()) {
    clear_unlock_type();
    set_has_user_level();
  }
  _impl_.unlock_type_.user_level_ = value;
}
inline uint32_t event_cfg::user_level() const {
  // @@protoc_insertion_point(field_get:event_cfg.user_level)
  return _internal_user_level();
}
inline void event_cfg::set_user_level(uint32_t value) {
  _internal_set_user_level(value);
  // @@protoc_insertion_point(field_set:event_cfg.user_level)
}

// repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
inline int event_cfg::_internal_test_arr_size() const {
  return _impl_.test_arr_.size();
}
inline int event_cfg::test_arr_size() const {
  return _internal_test_arr_size();
}
inline void event_cfg::clear_test_arr() {
  _impl_.test_arr_.Clear();
}
inline ::event_rule_item* event_cfg::mutable_test_arr(int index) {
  // @@protoc_insertion_point(field_mutable:event_cfg.test_arr)
  return _impl_.test_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >*
event_cfg::mutable_test_arr() {
  // @@protoc_insertion_point(field_mutable_list:event_cfg.test_arr)
  return &_impl_.test_arr_;
}
inline const ::event_rule_item& event_cfg::_internal_test_arr(int index) const {
  return _impl_.test_arr_.Get(index);
}
inline const ::event_rule_item& event_cfg::test_arr(int index) const {
  // @@protoc_insertion_point(field_get:event_cfg.test_arr)
  return _internal_test_arr(index);
}
inline ::event_rule_item* event_cfg::_internal_add_test_arr() {
  return _impl_.test_arr_.Add();
}
inline ::event_rule_item* event_cfg::add_test_arr() {
  ::event_rule_item* _add = _internal_add_test_arr();
  // @@protoc_insertion_point(field_add:event_cfg.test_arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >&
event_cfg::test_arr() const {
  // @@protoc_insertion_point(field_list:event_cfg.test_arr)
  return _impl_.test_arr_;
}

// repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
inline int event_cfg::_internal_test_empty_arr_size() const {
  return _impl_.test_empty_arr_.size();
}
inline int event_cfg::test_empty_arr_size() const {
  return _internal_test_empty_arr_size();
}
inline void event_cfg::clear_test_empty_arr() {
  _impl_.test_empty_arr_.Clear();
}
inline ::event_rule_item* event_cfg::mutable_test_empty_arr(int index) {
  // @@protoc_insertion_point(field_mutable:event_cfg.test_empty_arr)
  return _impl_.test_empty_arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >*
event_cfg::mutable_test_empty_arr() {
  // @@protoc_insertion_point(field_mutable_list:event_cfg.test_empty_arr)
  return &_impl_.test_empty_arr_;
}
inline const ::event_rule_item& event_cfg::_internal_test_empty_arr(int index) const {
  return _impl_.test_empty_arr_.Get(index);
}
inline const ::event_rule_item& event_cfg::test_empty_arr(int index) const {
  // @@protoc_insertion_point(field_get:event_cfg.test_empty_arr)
  return _internal_test_empty_arr(index);
}
inline ::event_rule_item* event_cfg::_internal_add_test_empty_arr() {
  return _impl_.test_empty_arr_.Add();
}
inline ::event_rule_item* event_cfg::add_test_empty_arr() {
  ::event_rule_item* _add = _internal_add_test_empty_arr();
  // @@protoc_insertion_point(field_add:event_cfg.test_empty_arr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::event_rule_item >&
event_cfg::test_empty_arr() const {
  // @@protoc_insertion_point(field_list:event_cfg.test_empty_arr)
  return _impl_.test_empty_arr_;
}

inline bool event_cfg::has_reward() const {
  return reward_case() != REWARD_NOT_SET;
}
inline void event_cfg::clear_has_reward() {
  _impl_._oneof_case_[0] = REWARD_NOT_SET;
}
inline bool event_cfg::has_unlock_type() const {
  return unlock_type_case() != UNLOCK_TYPE_NOT_SET;
}
inline void event_cfg::clear_has_unlock_type() {
  _impl_._oneof_case_[1] = UNLOCK_TYPE_NOT_SET;
}
inline event_cfg::RewardCase event_cfg::reward_case() const {
  return event_cfg::RewardCase(_impl_._oneof_case_[0]);
}
inline event_cfg::UnlockTypeCase event_cfg::unlock_type_case() const {
  return event_cfg::UnlockTypeCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// keep_or_strip_empty_list_cfg

// optional uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
inline bool keep_or_strip_empty_list_cfg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool keep_or_strip_empty_list_cfg::has_id() const {
  return _internal_has_id();
}
inline void keep_or_strip_empty_list_cfg::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t keep_or_strip_empty_list_cfg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t keep_or_strip_empty_list_cfg::id() const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.id)
  return _internal_id();
}
inline void keep_or_strip_empty_list_cfg::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void keep_or_strip_empty_list_cfg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:keep_or_strip_empty_list_cfg.id)
}

// repeated .dep2_cfg array_msg = 2;
inline int keep_or_strip_empty_list_cfg::_internal_array_msg_size() const {
  return _impl_.array_msg_.size();
}
inline int keep_or_strip_empty_list_cfg::array_msg_size() const {
  return _internal_array_msg_size();
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::mutable_array_msg(int index) {
  // @@protoc_insertion_point(field_mutable:keep_or_strip_empty_list_cfg.array_msg)
  return _impl_.array_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >*
keep_or_strip_empty_list_cfg::mutable_array_msg() {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_msg)
  return &_impl_.array_msg_;
}
inline const ::dep2_cfg& keep_or_strip_empty_list_cfg::_internal_array_msg(int index) const {
  return _impl_.array_msg_.Get(index);
}
inline const ::dep2_cfg& keep_or_strip_empty_list_cfg::array_msg(int index) const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_msg)
  return _internal_array_msg(index);
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::_internal_add_array_msg() {
  return _impl_.array_msg_.Add();
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::add_array_msg() {
  ::dep2_cfg* _add = _internal_add_array_msg();
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >&
keep_or_strip_empty_list_cfg::array_msg() const {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_msg)
  return _impl_.array_msg_;
}

// repeated .dep2_cfg array_plain_msg = 3;
inline int keep_or_strip_empty_list_cfg::_internal_array_plain_msg_size() const {
  return _impl_.array_plain_msg_.size();
}
inline int keep_or_strip_empty_list_cfg::array_plain_msg_size() const {
  return _internal_array_plain_msg_size();
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::mutable_array_plain_msg(int index) {
  // @@protoc_insertion_point(field_mutable:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _impl_.array_plain_msg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >*
keep_or_strip_empty_list_cfg::mutable_array_plain_msg() {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_plain_msg)
  return &_impl_.array_plain_msg_;
}
inline const ::dep2_cfg& keep_or_strip_empty_list_cfg::_internal_array_plain_msg(int index) const {
  return _impl_.array_plain_msg_.Get(index);
}
inline const ::dep2_cfg& keep_or_strip_empty_list_cfg::array_plain_msg(int index) const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _internal_array_plain_msg(index);
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::_internal_add_array_plain_msg() {
  return _impl_.array_plain_msg_.Add();
}
inline ::dep2_cfg* keep_or_strip_empty_list_cfg::add_array_plain_msg() {
  ::dep2_cfg* _add = _internal_add_array_plain_msg();
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dep2_cfg >&
keep_or_strip_empty_list_cfg::array_plain_msg() const {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_plain_msg)
  return _impl_.array_plain_msg_;
}

// repeated int32 array_int32 = 4;
inline int keep_or_strip_empty_list_cfg::_internal_array_int32_size() const {
  return _impl_.array_int32_.size();
}
inline int keep_or_strip_empty_list_cfg::array_int32_size() const {
  return _internal_array_int32_size();
}
inline void keep_or_strip_empty_list_cfg::clear_array_int32() {
  _impl_.array_int32_.Clear();
}
inline int32_t keep_or_strip_empty_list_cfg::_internal_array_int32(int index) const {
  return _impl_.array_int32_.Get(index);
}
inline int32_t keep_or_strip_empty_list_cfg::array_int32(int index) const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_int32)
  return _internal_array_int32(index);
}
inline void keep_or_strip_empty_list_cfg::set_array_int32(int index, int32_t value) {
  _impl_.array_int32_.Set(index, value);
  // @@protoc_insertion_point(field_set:keep_or_strip_empty_list_cfg.array_int32)
}
inline void keep_or_strip_empty_list_cfg::_internal_add_array_int32(int32_t value) {
  _impl_.array_int32_.Add(value);
}
inline void keep_or_strip_empty_list_cfg::add_array_int32(int32_t value) {
  _internal_add_array_int32(value);
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_int32)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
keep_or_strip_empty_list_cfg::_internal_array_int32() const {
  return _impl_.array_int32_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
keep_or_strip_empty_list_cfg::array_int32() const {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_int32)
  return _internal_array_int32();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
keep_or_strip_empty_list_cfg::_internal_mutable_array_int32() {
  return &_impl_.array_int32_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
keep_or_strip_empty_list_cfg::mutable_array_int32() {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_int32)
  return _internal_mutable_array_int32();
}

// repeated int64 array_int64 = 5;
inline int keep_or_strip_empty_list_cfg::_internal_array_int64_size() const {
  return _impl_.array_int64_.size();
}
inline int keep_or_strip_empty_list_cfg::array_int64_size() const {
  return _internal_array_int64_size();
}
inline void keep_or_strip_empty_list_cfg::clear_array_int64() {
  _impl_.array_int64_.Clear();
}
inline int64_t keep_or_strip_empty_list_cfg::_internal_array_int64(int index) const {
  return _impl_.array_int64_.Get(index);
}
inline int64_t keep_or_strip_empty_list_cfg::array_int64(int index) const {
  // @@protoc_insertion_point(field_get:keep_or_strip_empty_list_cfg.array_int64)
  return _internal_array_int64(index);
}
inline void keep_or_strip_empty_list_cfg::set_array_int64(int index, int64_t value) {
  _impl_.array_int64_.Set(index, value);
  // @@protoc_insertion_point(field_set:keep_or_strip_empty_list_cfg.array_int64)
}
inline void keep_or_strip_empty_list_cfg::_internal_add_array_int64(int64_t value) {
  _impl_.array_int64_.Add(value);
}
inline void keep_or_strip_empty_list_cfg::add_array_int64(int64_t value) {
  _internal_add_array_int64(value);
  // @@protoc_insertion_point(field_add:keep_or_strip_empty_list_cfg.array_int64)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
keep_or_strip_empty_list_cfg::_internal_array_int64() const {
  return _impl_.array_int64_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
keep_or_strip_empty_list_cfg::array_int64() const {
  // @@protoc_insertion_point(field_list:keep_or_strip_empty_list_cfg.array_int64)
  return _internal_array_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
keep_or_strip_empty_list_cfg::_internal_mutable_array_int64() {
  return &_impl_.array_int64_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
keep_or_strip_empty_list_cfg::mutable_array_int64() {
  // @@protoc_insertion_point(field_mutable_list:keep_or_strip_empty_list_cfg.array_int64)
  return _internal_mutable_array_int64();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
