// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dependency.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dependency_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dependency_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xresloader.pb.h"
#include "dep_level2.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dependency_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dependency_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dependency_2eproto;
class dep_cfg;
struct dep_cfgDefaultTypeInternal;
extern dep_cfgDefaultTypeInternal _dep_cfg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::dep_cfg* Arena::CreateMaybeMessage<::dep_cfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum game_const_config : int {
  EN_GCC_UNKNOWN = 0,
  EN_GCC_PERCENT_BASE = 10000,
  EN_GCC_RANDOM_RANGE_UNIT = 10,
  EN_GCC_RESOURCE_MAX_LIMIT = 9999999,
  EN_GCC_LEVEL_LIMIT = 999,
  EN_GCC_SOLDIER_TYPE_MASK = 100,
  EN_GCC_ACTIVITY_TYPE_MASK = 1000,
  EN_GCC_FORMULAR_TYPE_MASK = 10,
  EN_GCC_SCREEN_WIDTH = 1136,
  EN_GCC_SCREEN_HEIGHT = 640,
  EN_GCC_CAMERA_OFFSET = 268,
  game_const_config_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  game_const_config_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool game_const_config_IsValid(int value);
constexpr game_const_config game_const_config_MIN = EN_GCC_UNKNOWN;
constexpr game_const_config game_const_config_MAX = EN_GCC_RESOURCE_MAX_LIMIT;
constexpr int game_const_config_ARRAYSIZE = game_const_config_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* game_const_config_descriptor();
template<typename T>
inline const std::string& game_const_config_Name(T enum_t_value) {
  static_assert(::std::is_same<T, game_const_config>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function game_const_config_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    game_const_config_descriptor(), enum_t_value);
}
inline bool game_const_config_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, game_const_config* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<game_const_config>(
    game_const_config_descriptor(), name, value);
}
enum cost_type : int {
  EN_CT_UNKNOWN = 0,
  EN_CT_MONEY = 10001,
  EN_CT_DIAMOND = 10101,
  cost_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  cost_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool cost_type_IsValid(int value);
constexpr cost_type cost_type_MIN = EN_CT_UNKNOWN;
constexpr cost_type cost_type_MAX = EN_CT_DIAMOND;
constexpr int cost_type_ARRAYSIZE = cost_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cost_type_descriptor();
template<typename T>
inline const std::string& cost_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, cost_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function cost_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    cost_type_descriptor(), enum_t_value);
}
inline bool cost_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, cost_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<cost_type>(
    cost_type_descriptor(), name, value);
}
// ===================================================================

class dep_cfg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dep_cfg) */ {
 public:
  inline dep_cfg() : dep_cfg(nullptr) {}
  ~dep_cfg() override;
  explicit PROTOBUF_CONSTEXPR dep_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dep_cfg(const dep_cfg& from);
  dep_cfg(dep_cfg&& from) noexcept
    : dep_cfg() {
    *this = ::std::move(from);
  }

  inline dep_cfg& operator=(const dep_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline dep_cfg& operator=(dep_cfg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dep_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const dep_cfg* internal_default_instance() {
    return reinterpret_cast<const dep_cfg*>(
               &_dep_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(dep_cfg& a, dep_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(dep_cfg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dep_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dep_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dep_cfg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dep_cfg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dep_cfg& from) {
    dep_cfg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dep_cfg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dep_cfg";
  }
  protected:
  explicit dep_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDep2FieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .dep2_cfg dep2 = 3;
  bool has_dep2() const;
  private:
  bool _internal_has_dep2() const;
  public:
  void clear_dep2();
  const ::dep2_cfg& dep2() const;
  PROTOBUF_NODISCARD ::dep2_cfg* release_dep2();
  ::dep2_cfg* mutable_dep2();
  void set_allocated_dep2(::dep2_cfg* dep2);
  private:
  const ::dep2_cfg& _internal_dep2() const;
  ::dep2_cfg* _internal_mutable_dep2();
  public:
  void unsafe_arena_set_allocated_dep2(
      ::dep2_cfg* dep2);
  ::dep2_cfg* unsafe_arena_release_dep2();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dep_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::dep2_cfg* dep2_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dependency_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// dep_cfg

// uint32 id = 1;
inline void dep_cfg::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t dep_cfg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t dep_cfg::id() const {
  // @@protoc_insertion_point(field_get:dep_cfg.id)
  return _internal_id();
}
inline void dep_cfg::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void dep_cfg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dep_cfg.id)
}

// string name = 2;
inline void dep_cfg::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& dep_cfg::name() const {
  // @@protoc_insertion_point(field_get:dep_cfg.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dep_cfg::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dep_cfg.name)
}
inline std::string* dep_cfg::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dep_cfg.name)
  return _s;
}
inline const std::string& dep_cfg::_internal_name() const {
  return _impl_.name_.Get();
}
inline void dep_cfg::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* dep_cfg::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* dep_cfg::release_name() {
  // @@protoc_insertion_point(field_release:dep_cfg.name)
  return _impl_.name_.Release();
}
inline void dep_cfg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dep_cfg.name)
}

// .dep2_cfg dep2 = 3;
inline bool dep_cfg::_internal_has_dep2() const {
  return this != internal_default_instance() && _impl_.dep2_ != nullptr;
}
inline bool dep_cfg::has_dep2() const {
  return _internal_has_dep2();
}
inline const ::dep2_cfg& dep_cfg::_internal_dep2() const {
  const ::dep2_cfg* p = _impl_.dep2_;
  return p != nullptr ? *p : reinterpret_cast<const ::dep2_cfg&>(
      ::_dep2_cfg_default_instance_);
}
inline const ::dep2_cfg& dep_cfg::dep2() const {
  // @@protoc_insertion_point(field_get:dep_cfg.dep2)
  return _internal_dep2();
}
inline void dep_cfg::unsafe_arena_set_allocated_dep2(
    ::dep2_cfg* dep2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dep2_);
  }
  _impl_.dep2_ = dep2;
  if (dep2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dep_cfg.dep2)
}
inline ::dep2_cfg* dep_cfg::release_dep2() {
  
  ::dep2_cfg* temp = _impl_.dep2_;
  _impl_.dep2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dep2_cfg* dep_cfg::unsafe_arena_release_dep2() {
  // @@protoc_insertion_point(field_release:dep_cfg.dep2)
  
  ::dep2_cfg* temp = _impl_.dep2_;
  _impl_.dep2_ = nullptr;
  return temp;
}
inline ::dep2_cfg* dep_cfg::_internal_mutable_dep2() {
  
  if (_impl_.dep2_ == nullptr) {
    auto* p = CreateMaybeMessage<::dep2_cfg>(GetArenaForAllocation());
    _impl_.dep2_ = p;
  }
  return _impl_.dep2_;
}
inline ::dep2_cfg* dep_cfg::mutable_dep2() {
  ::dep2_cfg* _msg = _internal_mutable_dep2();
  // @@protoc_insertion_point(field_mutable:dep_cfg.dep2)
  return _msg;
}
inline void dep_cfg::set_allocated_dep2(::dep2_cfg* dep2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dep2_);
  }
  if (dep2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dep2));
    if (message_arena != submessage_arena) {
      dep2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dep2, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dep2_ = dep2;
  // @@protoc_insertion_point(field_set_allocated:dep_cfg.dep2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game_const_config> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game_const_config>() {
  return ::game_const_config_descriptor();
}
template <> struct is_proto_enum< ::cost_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cost_type>() {
  return ::cost_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dependency_2eproto
