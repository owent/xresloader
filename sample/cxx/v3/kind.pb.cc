// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#include "kind.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR role_cfg::role_cfg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.test_array_)*/{}
  , /*decltype(_impl_.test_plain_enum_array_)*/{}
  , /*decltype(_impl_._test_plain_enum_array_cached_byte_size_)*/{0}
  , /*decltype(_impl_.convert_timepoint_arr_)*/{}
  , /*decltype(_impl_.origin_timepoint_arr_)*/{}
  , /*decltype(_impl_.convert_duration_arr_)*/{}
  , /*decltype(_impl_.origin_duration_arr_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.int_as_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.origin_timepoint_one_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.origin_duration_one_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dep_test_)*/nullptr
  , /*decltype(_impl_.convert_timepoint_one_)*/nullptr
  , /*decltype(_impl_.convert_duration_one_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.unlock_level_)*/0u
  , /*decltype(_impl_.cost_type_)*/0u
  , /*decltype(_impl_.cost_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct role_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR role_cfgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~role_cfgDefaultTypeInternal() {}
  union {
    role_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 role_cfgDefaultTypeInternal _role_cfg_default_instance_;
PROTOBUF_CONSTEXPR role_upgrade_cfg::role_upgrade_cfg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.costvalue_)*/int64_t{0}
  , /*decltype(_impl_.costtype_)*/0u
  , /*decltype(_impl_.scoreadd_)*/0
  , /*decltype(_impl_.srcid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct role_upgrade_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR role_upgrade_cfgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~role_upgrade_cfgDefaultTypeInternal() {}
  union {
    role_upgrade_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
PROTOBUF_CONSTEXPR arr_in_arr_test_nested_message::arr_in_arr_test_nested_message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.test_onof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct arr_in_arr_test_nested_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_test_nested_messageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_test_nested_messageDefaultTypeInternal() {}
  union {
    arr_in_arr_test_nested_message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_test_nested_messageDefaultTypeInternal _arr_in_arr_test_nested_message_default_instance_;
PROTOBUF_CONSTEXPR arr_in_arr::arr_in_arr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.int_arr_)*/{}
  , /*decltype(_impl_._int_arr_cached_byte_size_)*/{0}
  , /*decltype(_impl_.str_arr_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.test_onof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct arr_in_arrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arrDefaultTypeInternal() {}
  union {
    arr_in_arr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arrDefaultTypeInternal _arr_in_arr_default_instance_;
PROTOBUF_CONSTEXPR test_msg_verifier::test_msg_verifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.test_id_1_)*/0u
  , /*decltype(_impl_.test_id_2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct test_msg_verifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR test_msg_verifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~test_msg_verifierDefaultTypeInternal() {}
  union {
    test_msg_verifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 test_msg_verifierDefaultTypeInternal _test_msg_verifier_default_instance_;
PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapIsEntry_DoNotUse::arr_in_arr_cfg_TestMapIsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    arr_in_arr_cfg_TestMapIsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapSmEntry_DoNotUse::arr_in_arr_cfg_TestMapSmEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal() {}
  union {
    arr_in_arr_cfg_TestMapSmEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR arr_in_arr_cfg::arr_in_arr_cfg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arr_)*/{}
  , /*decltype(_impl_.test_plain_int_arr_)*/{}
  , /*decltype(_impl_._test_plain_int_arr_cached_byte_size_)*/{0}
  , /*decltype(_impl_.test_plain_enum_arr_)*/{}
  , /*decltype(_impl_._test_plain_enum_arr_cached_byte_size_)*/{0}
  , /*decltype(_impl_.test_plain_msg_arr_)*/{}
  , /*decltype(_impl_.test_map_is_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.test_map_sm_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.test_plain_msg_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct arr_in_arr_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_cfgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_cfgDefaultTypeInternal() {}
  union {
    arr_in_arr_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_cfgDefaultTypeInternal _arr_in_arr_cfg_default_instance_;
PROTOBUF_CONSTEXPR event_reward_item::event_reward_item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.item_count_)*/0u
  , /*decltype(_impl_.nested_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct event_reward_itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR event_reward_itemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~event_reward_itemDefaultTypeInternal() {}
  union {
    event_reward_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 event_reward_itemDefaultTypeInternal _event_reward_item_default_instance_;
PROTOBUF_CONSTEXPR event_rule_item::event_rule_item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rule_id_)*/0u
  , /*decltype(_impl_.rule_param_)*/0u
  , /*decltype(_impl_.nested_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct event_rule_itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR event_rule_itemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~event_rule_itemDefaultTypeInternal() {}
  union {
    event_rule_item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 event_rule_itemDefaultTypeInternal _event_rule_item_default_instance_;
PROTOBUF_CONSTEXPR event_cfg::event_cfg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.test_arr_)*/{}
  , /*decltype(_impl_.test_empty_arr_)*/{}
  , /*decltype(_impl_.rule_)*/nullptr
  , /*decltype(_impl_.specify_field_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.process_)*/0u
  , /*decltype(_impl_.reward_)*/{}
  , /*decltype(_impl_.unlock_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct event_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR event_cfgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~event_cfgDefaultTypeInternal() {}
  union {
    event_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 event_cfgDefaultTypeInternal _event_cfg_default_instance_;
PROTOBUF_CONSTEXPR keep_or_strip_empty_list_cfg::keep_or_strip_empty_list_cfg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.array_msg_)*/{}
  , /*decltype(_impl_.array_plain_msg_)*/{}
  , /*decltype(_impl_.array_int32_)*/{}
  , /*decltype(_impl_._array_int32_cached_byte_size_)*/{0}
  , /*decltype(_impl_.array_int64_)*/{}
  , /*decltype(_impl_._array_int64_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct keep_or_strip_empty_list_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR keep_or_strip_empty_list_cfgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~keep_or_strip_empty_list_cfgDefaultTypeInternal() {}
  union {
    keep_or_strip_empty_list_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 keep_or_strip_empty_list_cfgDefaultTypeInternal _keep_or_strip_empty_list_cfg_default_instance_;
static ::_pb::Metadata file_level_metadata_kind_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kind_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_kind_2eproto = nullptr;

const uint32_t TableStruct_kind_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::role_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.unlock_level_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.cost_type_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.cost_value_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.dep_test_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.test_array_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.int_as_string_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.test_plain_enum_array_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_timepoint_one_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_timepoint_one_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_duration_one_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_duration_one_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_timepoint_arr_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_timepoint_arr_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_duration_arr_),
  PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_duration_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.costtype_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.costvalue_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.scoreadd_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.srcid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_test_nested_message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_test_nested_message, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_test_nested_message, _impl_.test_onof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.int_arr_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.str_arr_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.test_onof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_msg_verifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_msg_verifier, _impl_.test_id_1_),
  PROTOBUF_FIELD_OFFSET(::test_msg_verifier, _impl_.test_id_2_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.arr_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_int_arr_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_enum_arr_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_msg_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_msg_arr_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_map_is_),
  PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_map_sm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_reward_item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_.item_count_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_.nested_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_rule_item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_.rule_id_),
  PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_.rule_param_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_.nested_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::event_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.rule_),
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.specify_field_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.test_arr_),
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.test_empty_arr_),
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.reward_),
  PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.unlock_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_msg_),
  PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_plain_msg_),
  PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_int32_),
  PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_int64_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::role_cfg)},
  { 23, -1, -1, sizeof(::role_upgrade_cfg)},
  { 35, -1, -1, sizeof(::arr_in_arr_test_nested_message)},
  { 44, -1, -1, sizeof(::arr_in_arr)},
  { 56, -1, -1, sizeof(::test_msg_verifier)},
  { 64, 72, -1, sizeof(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse)},
  { 74, 82, -1, sizeof(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse)},
  { 84, -1, -1, sizeof(::arr_in_arr_cfg)},
  { 98, -1, -1, sizeof(::event_reward_item)},
  { 109, -1, -1, sizeof(::event_rule_item)},
  { 120, -1, -1, sizeof(::event_cfg)},
  { 139, -1, -1, sizeof(::keep_or_strip_empty_list_cfg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_role_cfg_default_instance_._instance,
  &::_role_upgrade_cfg_default_instance_._instance,
  &::_arr_in_arr_test_nested_message_default_instance_._instance,
  &::_arr_in_arr_default_instance_._instance,
  &::_test_msg_verifier_default_instance_._instance,
  &::_arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_._instance,
  &::_arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_._instance,
  &::_arr_in_arr_cfg_default_instance_._instance,
  &::_event_reward_item_default_instance_._instance,
  &::_event_rule_item_default_instance_._instance,
  &::_event_cfg_default_instance_._instance,
  &::_keep_or_strip_empty_list_cfg_default_instance_._instance,
};

const char descriptor_table_protodef_kind_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nkind.proto\032\020xresloader.proto\032\023xresload"
  "er_ue.proto\032\020dependency.proto\032\020dep_level"
  "2.proto\032\036google/protobuf/duration.proto\032"
  "\037google/protobuf/timestamp.proto\"\223\005\n\010rol"
  "e_cfg\022\n\n\002id\030\001 \001(\r\022\024\n\014unlock_level\030\002 \001(\r\022"
  "\021\n\tcost_type\030\003 \001(\r\022\022\n\ncost_value\030\004 \001(\005\022\014"
  "\n\004name\030\005 \001(\t\022\032\n\010dep_test\030\n \001(\0132\010.dep_cfg"
  "\022\022\n\ntest_array\030\013 \003(\t\022\025\n\rint_as_string\030\014 "
  "\001(\t\022)\n\025test_plain_enum_array\030\r \003(\0162\n.cos"
  "t_type\022R\n\025convert_timepoint_one\030\025 \001(\0132\032."
  "google.protobuf.TimestampB\027\302\?\024origin_tim"
  "epoint_one\022\034\n\024origin_timepoint_one\030\026 \001(\t"
  "\022O\n\024convert_duration_one\030\027 \001(\0132\031.google."
  "protobuf.DurationB\026\302\?\023origin_duration_on"
  "e\022\033\n\023origin_duration_one\030\030 \001(\t\022R\n\025conver"
  "t_timepoint_arr\030\031 \003(\0132\032.google.protobuf."
  "TimestampB\027\302\?\024origin_timepoint_arr\022\034\n\024or"
  "igin_timepoint_arr\030\032 \003(\t\022O\n\024convert_dura"
  "tion_arr\030\033 \003(\0132\031.google.protobuf.Duratio"
  "nB\026\302\?\023origin_duration_arr\022\033\n\023origin_dura"
  "tion_arr\030\034 \003(\t\"\324\001\n\020role_upgrade_cfg\022\020\n\002I"
  "d\030\001 \001(\rB\004\350D\350\007\022\022\n\005Level\030\002 \001(\rB\003\350D\001\0223\n\010Cos"
  "tType\030\003 \001(\rB!\312>\tcost_type\232\?\022Refer to cos"
  "t_type\022\021\n\tCostValue\030\004 \001(\003\022\020\n\010ScoreAdd\030\005 "
  "\001(\005\022\r\n\005SrcID\030\006 \001(\r:1\352D\006helper\312>%Test rol"
  "e_upgrade_cfg with multi keys\"\241\004\n\narr_in"
  "_arr\022-\n\004name\030\001 \001(\tB\037\232\?\034This is a test na"
  "me in array\022\017\n\007int_arr\030\002 \003(\005\022\017\n\007str_arr\030"
  "\003 \003(\t\022#\n\016test_info_role\030\013 \001(\0132\t.role_cfg"
  "H\000\0222\n\025test_role_upgrade_cfg\030\014 \001(\0132\021.role"
  "_upgrade_cfgH\000\032\373\001\n\023test_nested_message\0222"
  "\n\035test_nested_message_info_role\030\013 \001(\0132\t."
  "role_cfgH\000\022A\n$test_nested_message_role_u"
  "pgrade_cfg\030\014 \001(\0132\021.role_upgrade_cfgH\000\"`\n"
  "\020test_nested_enum\022%\n!EN_TEST_NESTED_MESS"
  "AGE_ENUM_VAL_1\020\000\022%\n!EN_TEST_NESTED_MESSA"
  "GE_ENUM_VAL_2\020{B\013\n\ttest_onof\"P\n\020test_nes"
  "ted_enum\022\035\n\031EN_TEST_NESTED_ENUM_VAL_1\020\000\022"
  "\035\n\031EN_TEST_NESTED_ENUM_VAL_2\020{:\014\352D\006helpe"
  "r\360D\001B\013\n\ttest_onof\"V\n\021test_msg_verifier\022\022"
  "\n\ttest_id_1\030\221N \001(\r\022&\n\ttest_id_2\030\222N \001(\rB\022"
  "\242\?\017\346\265\213\350\257\225ID\345\210\253\345\220\2152:\005\242\?\002-^\"\362\003\n\016arr_in_arr"
  "_cfg\022\037\n\002id\030\001 \001(\rB\023\350D\001\232\?\rThis is a Key\022\030\n"
  "\003arr\030\002 \003(\0132\013.arr_in_arr\022\032\n\022test_plain_in"
  "t_arr\030\003 \003(\005\022\'\n\023test_plain_enum_arr\030\004 \003(\016"
  "2\n.cost_type\0220\n\016test_plain_msg\030\005 \001(\0132\022.t"
  "est_msg_verifierB\004\262\?\001&\022.\n\022test_plain_msg"
  "_arr\030\006 \003(\0132\022.test_msg_verifier\0223\n\013test_m"
  "ap_is\030\007 \003(\0132\036.arr_in_arr_cfg.TestMapIsEn"
  "try\0229\n\013test_map_sm\030\010 \003(\0132\036.arr_in_arr_cf"
  "g.TestMapSmEntryB\004\262\?\001|\0320\n\016TestMapIsEntry"
  "\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\032;\n\016Test"
  "MapSmEntry\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t"
  ".dep2_cfg:\0028\001:\037\352D\006helper\312>\023Test arr_in_a"
  "rr_cfg\"\243\001\n\021event_reward_item\022\017\n\007item_id\030"
  "\001 \001(\r\022\022\n\nitem_count\030\002 \001(\r\022&\n\013nested_note"
  "\030\013 \001(\tB\017\242\?\014\346\217\217\350\277\260\346\226\207\346\234\254H\000\0227\n\020nested_enum"
  "_type\030\014 \001(\0162\n.cost_typeB\017\242\?\014\350\264\247\345\270\201\347\261\273\345\236\213"
  "H\000B\010\n\006nested\"\241\001\n\017event_rule_item\022\017\n\007rule"
  "_id\030\001 \001(\r\022\022\n\nrule_param\030\002 \001(\r\022&\n\013nested_"
  "note\030\013 \001(\tB\017\242\?\014\346\217\217\350\277\260\346\226\207\346\234\254H\000\0227\n\020nested_"
  "enum_type\030\014 \001(\0162\n.cost_typeB\017\242\?\014\350\264\247\345\270\201\347\261"
  "\273\345\236\213H\000B\010\n\006nested\"\360\003\n\tevent_cfg\022\017\n\002id\030\001 \001"
  "(\rB\003\350Dd\022\024\n\007process\030\002 \001(\rB\003\350D\001\022\036\n\004rule\030\006 "
  "\001(\0132\020.event_rule_item\022\'\n\rspecify_field\030\007"
  " \001(\0132\020.event_rule_item\0223\n\004item\030\013 \001(\0132\022.e"
  "vent_reward_itemB\017\242\?\014\345\245\226\345\212\261\351\201\223\345\205\267H\000\022#\n\010u"
  "ser_exp\030\014 \001(\003B\017\242\?\014\345\245\226\345\212\261\347\273\217\351\252\214H\000\022\037\n\004note"
  "\030\r \001(\tB\017\242\?\014\346\217\217\350\277\260\346\226\207\346\234\254H\000\0220\n\tenum_type\030\016"
  " \001(\0162\n.cost_typeB\017\242\?\014\350\264\247\345\270\201\347\261\273\345\236\213H\000\022%\n\nu"
  "ser_level\0303 \001(\rB\017\242\?\014\347\216\251\345\256\266\347\255\211\347\272\247H\001\022(\n\010te"
  "st_arr\030[ \003(\0132\020.event_rule_itemB\004\262\?\001;\022.\n\016"
  "test_empty_arr\030\\ \003(\0132\020.event_rule_itemB\004"
  "\262\?\001;:,\352D\006helper\312> Test event_cfg with on"
  "eof fieldsB\010\n\006rewardB\r\n\013unlock_type\"\266\001\n\034"
  "keep_or_strip_empty_list_cfg\022\037\n\002id\030\001 \001(\r"
  "B\023\350D\001\232\?\rThis is a Key\022\034\n\tarray_msg\030\002 \003(\013"
  "2\t.dep2_cfg\022\"\n\017array_plain_msg\030\003 \003(\0132\t.d"
  "ep2_cfg\022\023\n\013array_int32\030\004 \003(\005\022\023\n\013array_in"
  "t64\030\005 \003(\003:\t\352D\006helperb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_kind_2eproto_deps[6] = {
  &::descriptor_table_dep_5flevel2_2eproto,
  &::descriptor_table_dependency_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_xresloader_2eproto,
  &::descriptor_table_xresloader_5fue_2eproto,
};
static ::_pbi::once_flag descriptor_table_kind_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kind_2eproto = {
    false, false, 3188, descriptor_table_protodef_kind_2eproto,
    "kind.proto",
    &descriptor_table_kind_2eproto_once, descriptor_table_kind_2eproto_deps, 6, 12,
    schemas, file_default_instances, TableStruct_kind_2eproto::offsets,
    file_level_metadata_kind_2eproto, file_level_enum_descriptors_kind_2eproto,
    file_level_service_descriptors_kind_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kind_2eproto_getter() {
  return &descriptor_table_kind_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kind_2eproto(&descriptor_table_kind_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* arr_in_arr_test_nested_message_test_nested_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kind_2eproto);
  return file_level_enum_descriptors_kind_2eproto[0];
}
bool arr_in_arr_test_nested_message_test_nested_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 123:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::EN_TEST_NESTED_MESSAGE_ENUM_VAL_1;
constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::EN_TEST_NESTED_MESSAGE_ENUM_VAL_2;
constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::test_nested_enum_MIN;
constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::test_nested_enum_MAX;
constexpr int arr_in_arr_test_nested_message::test_nested_enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* arr_in_arr_test_nested_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kind_2eproto);
  return file_level_enum_descriptors_kind_2eproto[1];
}
bool arr_in_arr_test_nested_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 123:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr arr_in_arr_test_nested_enum arr_in_arr::EN_TEST_NESTED_ENUM_VAL_1;
constexpr arr_in_arr_test_nested_enum arr_in_arr::EN_TEST_NESTED_ENUM_VAL_2;
constexpr arr_in_arr_test_nested_enum arr_in_arr::test_nested_enum_MIN;
constexpr arr_in_arr_test_nested_enum arr_in_arr::test_nested_enum_MAX;
constexpr int arr_in_arr::test_nested_enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class role_cfg::_Internal {
 public:
  static const ::dep_cfg& dep_test(const role_cfg* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& convert_timepoint_one(const role_cfg* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& convert_duration_one(const role_cfg* msg);
};

const ::dep_cfg&
role_cfg::_Internal::dep_test(const role_cfg* msg) {
  return *msg->_impl_.dep_test_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
role_cfg::_Internal::convert_timepoint_one(const role_cfg* msg) {
  return *msg->_impl_.convert_timepoint_one_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
role_cfg::_Internal::convert_duration_one(const role_cfg* msg) {
  return *msg->_impl_.convert_duration_one_;
}
void role_cfg::clear_dep_test() {
  if (GetArenaForAllocation() == nullptr && _impl_.dep_test_ != nullptr) {
    delete _impl_.dep_test_;
  }
  _impl_.dep_test_ = nullptr;
}
void role_cfg::clear_convert_timepoint_one() {
  if (GetArenaForAllocation() == nullptr && _impl_.convert_timepoint_one_ != nullptr) {
    delete _impl_.convert_timepoint_one_;
  }
  _impl_.convert_timepoint_one_ = nullptr;
}
void role_cfg::clear_convert_duration_one() {
  if (GetArenaForAllocation() == nullptr && _impl_.convert_duration_one_ != nullptr) {
    delete _impl_.convert_duration_one_;
  }
  _impl_.convert_duration_one_ = nullptr;
}
void role_cfg::clear_convert_timepoint_arr() {
  _impl_.convert_timepoint_arr_.Clear();
}
void role_cfg::clear_convert_duration_arr() {
  _impl_.convert_duration_arr_.Clear();
}
role_cfg::role_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:role_cfg)
}
role_cfg::role_cfg(const role_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  role_cfg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.test_array_){from._impl_.test_array_}
    , decltype(_impl_.test_plain_enum_array_){from._impl_.test_plain_enum_array_}
    , /*decltype(_impl_._test_plain_enum_array_cached_byte_size_)*/{0}
    , decltype(_impl_.convert_timepoint_arr_){from._impl_.convert_timepoint_arr_}
    , decltype(_impl_.origin_timepoint_arr_){from._impl_.origin_timepoint_arr_}
    , decltype(_impl_.convert_duration_arr_){from._impl_.convert_duration_arr_}
    , decltype(_impl_.origin_duration_arr_){from._impl_.origin_duration_arr_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.int_as_string_){}
    , decltype(_impl_.origin_timepoint_one_){}
    , decltype(_impl_.origin_duration_one_){}
    , decltype(_impl_.dep_test_){nullptr}
    , decltype(_impl_.convert_timepoint_one_){nullptr}
    , decltype(_impl_.convert_duration_one_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.unlock_level_){}
    , decltype(_impl_.cost_type_){}
    , decltype(_impl_.cost_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.int_as_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.int_as_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_int_as_string().empty()) {
    _this->_impl_.int_as_string_.Set(from._internal_int_as_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.origin_timepoint_one_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origin_timepoint_one_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_origin_timepoint_one().empty()) {
    _this->_impl_.origin_timepoint_one_.Set(from._internal_origin_timepoint_one(), 
      _this->GetArenaForAllocation());
  }
  _impl_.origin_duration_one_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origin_duration_one_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_origin_duration_one().empty()) {
    _this->_impl_.origin_duration_one_.Set(from._internal_origin_duration_one(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dep_test()) {
    _this->_impl_.dep_test_ = new ::dep_cfg(*from._impl_.dep_test_);
  }
  if (from._internal_has_convert_timepoint_one()) {
    _this->_impl_.convert_timepoint_one_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.convert_timepoint_one_);
  }
  if (from._internal_has_convert_duration_one()) {
    _this->_impl_.convert_duration_one_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.convert_duration_one_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cost_value_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cost_value_));
  // @@protoc_insertion_point(copy_constructor:role_cfg)
}

inline void role_cfg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.test_array_){arena}
    , decltype(_impl_.test_plain_enum_array_){arena}
    , /*decltype(_impl_._test_plain_enum_array_cached_byte_size_)*/{0}
    , decltype(_impl_.convert_timepoint_arr_){arena}
    , decltype(_impl_.origin_timepoint_arr_){arena}
    , decltype(_impl_.convert_duration_arr_){arena}
    , decltype(_impl_.origin_duration_arr_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.int_as_string_){}
    , decltype(_impl_.origin_timepoint_one_){}
    , decltype(_impl_.origin_duration_one_){}
    , decltype(_impl_.dep_test_){nullptr}
    , decltype(_impl_.convert_timepoint_one_){nullptr}
    , decltype(_impl_.convert_duration_one_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.unlock_level_){0u}
    , decltype(_impl_.cost_type_){0u}
    , decltype(_impl_.cost_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.int_as_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.int_as_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.origin_timepoint_one_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origin_timepoint_one_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.origin_duration_one_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.origin_duration_one_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

role_cfg::~role_cfg() {
  // @@protoc_insertion_point(destructor:role_cfg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void role_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.test_array_.~RepeatedPtrField();
  _impl_.test_plain_enum_array_.~RepeatedField();
  _impl_.convert_timepoint_arr_.~RepeatedPtrField();
  _impl_.origin_timepoint_arr_.~RepeatedPtrField();
  _impl_.convert_duration_arr_.~RepeatedPtrField();
  _impl_.origin_duration_arr_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.int_as_string_.Destroy();
  _impl_.origin_timepoint_one_.Destroy();
  _impl_.origin_duration_one_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dep_test_;
  if (this != internal_default_instance()) delete _impl_.convert_timepoint_one_;
  if (this != internal_default_instance()) delete _impl_.convert_duration_one_;
}

void role_cfg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void role_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:role_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.test_array_.Clear();
  _impl_.test_plain_enum_array_.Clear();
  _impl_.convert_timepoint_arr_.Clear();
  _impl_.origin_timepoint_arr_.Clear();
  _impl_.convert_duration_arr_.Clear();
  _impl_.origin_duration_arr_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.int_as_string_.ClearToEmpty();
  _impl_.origin_timepoint_one_.ClearToEmpty();
  _impl_.origin_duration_one_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.dep_test_ != nullptr) {
    delete _impl_.dep_test_;
  }
  _impl_.dep_test_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.convert_timepoint_one_ != nullptr) {
    delete _impl_.convert_timepoint_one_;
  }
  _impl_.convert_timepoint_one_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.convert_duration_one_ != nullptr) {
    delete _impl_.convert_duration_one_;
  }
  _impl_.convert_duration_one_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cost_value_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cost_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* role_cfg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 unlock_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.unlock_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cost_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cost_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cost_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cost_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "role_cfg.name"));
        } else
          goto handle_unusual;
        continue;
      // .dep_cfg dep_test = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dep_test(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string test_array = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_test_array();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "role_cfg.test_array"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string int_as_string = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_int_as_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "role_cfg.int_as_string"));
        } else
          goto handle_unusual;
        continue;
      // repeated .cost_type test_plain_enum_array = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_test_plain_enum_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_test_plain_enum_array(static_cast<::cost_type>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_convert_timepoint_one(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string origin_timepoint_one = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_origin_timepoint_one();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "role_cfg.origin_timepoint_one"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_convert_duration_one(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string origin_duration_one = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_origin_duration_one();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "role_cfg.origin_duration_one"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_convert_timepoint_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string origin_timepoint_arr = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_origin_timepoint_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "role_cfg.origin_timepoint_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_convert_duration_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string origin_duration_arr = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_origin_duration_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "role_cfg.origin_duration_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* role_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:role_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 unlock_level = 2;
  if (this->_internal_unlock_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unlock_level(), target);
  }

  // uint32 cost_type = 3;
  if (this->_internal_cost_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cost_type(), target);
  }

  // int32 cost_value = 4;
  if (this->_internal_cost_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cost_value(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "role_cfg.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // .dep_cfg dep_test = 10;
  if (this->_internal_has_dep_test()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dep_test(this),
        _Internal::dep_test(this).GetCachedSize(), target, stream);
  }

  // repeated string test_array = 11;
  for (int i = 0, n = this->_internal_test_array_size(); i < n; i++) {
    const auto& s = this->_internal_test_array(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "role_cfg.test_array");
    target = stream->WriteString(11, s, target);
  }

  // string int_as_string = 12;
  if (!this->_internal_int_as_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_int_as_string().data(), static_cast<int>(this->_internal_int_as_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "role_cfg.int_as_string");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_int_as_string(), target);
  }

  // repeated .cost_type test_plain_enum_array = 13;
  {
    int byte_size = _impl_._test_plain_enum_array_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          13, _impl_.test_plain_enum_array_, byte_size, target);
    }
  }

  // .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
  if (this->_internal_has_convert_timepoint_one()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::convert_timepoint_one(this),
        _Internal::convert_timepoint_one(this).GetCachedSize(), target, stream);
  }

  // string origin_timepoint_one = 22;
  if (!this->_internal_origin_timepoint_one().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origin_timepoint_one().data(), static_cast<int>(this->_internal_origin_timepoint_one().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "role_cfg.origin_timepoint_one");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_origin_timepoint_one(), target);
  }

  // .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
  if (this->_internal_has_convert_duration_one()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::convert_duration_one(this),
        _Internal::convert_duration_one(this).GetCachedSize(), target, stream);
  }

  // string origin_duration_one = 24;
  if (!this->_internal_origin_duration_one().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origin_duration_one().data(), static_cast<int>(this->_internal_origin_duration_one().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "role_cfg.origin_duration_one");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_origin_duration_one(), target);
  }

  // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_convert_timepoint_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_convert_timepoint_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string origin_timepoint_arr = 26;
  for (int i = 0, n = this->_internal_origin_timepoint_arr_size(); i < n; i++) {
    const auto& s = this->_internal_origin_timepoint_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "role_cfg.origin_timepoint_arr");
    target = stream->WriteString(26, s, target);
  }

  // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_convert_duration_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_convert_duration_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string origin_duration_arr = 28;
  for (int i = 0, n = this->_internal_origin_duration_arr_size(); i < n; i++) {
    const auto& s = this->_internal_origin_duration_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "role_cfg.origin_duration_arr");
    target = stream->WriteString(28, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:role_cfg)
  return target;
}

size_t role_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:role_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string test_array = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.test_array_.size());
  for (int i = 0, n = _impl_.test_array_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.test_array_.Get(i));
  }

  // repeated .cost_type test_plain_enum_array = 13;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_test_plain_enum_array_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_test_plain_enum_array(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._test_plain_enum_array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
  total_size += 2UL * this->_internal_convert_timepoint_arr_size();
  for (const auto& msg : this->_impl_.convert_timepoint_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string origin_timepoint_arr = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.origin_timepoint_arr_.size());
  for (int i = 0, n = _impl_.origin_timepoint_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.origin_timepoint_arr_.Get(i));
  }

  // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
  total_size += 2UL * this->_internal_convert_duration_arr_size();
  for (const auto& msg : this->_impl_.convert_duration_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string origin_duration_arr = 28;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.origin_duration_arr_.size());
  for (int i = 0, n = _impl_.origin_duration_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.origin_duration_arr_.Get(i));
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string int_as_string = 12;
  if (!this->_internal_int_as_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_int_as_string());
  }

  // string origin_timepoint_one = 22;
  if (!this->_internal_origin_timepoint_one().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin_timepoint_one());
  }

  // string origin_duration_one = 24;
  if (!this->_internal_origin_duration_one().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin_duration_one());
  }

  // .dep_cfg dep_test = 10;
  if (this->_internal_has_dep_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dep_test_);
  }

  // .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
  if (this->_internal_has_convert_timepoint_one()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convert_timepoint_one_);
  }

  // .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
  if (this->_internal_has_convert_duration_one()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.convert_duration_one_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 unlock_level = 2;
  if (this->_internal_unlock_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unlock_level());
  }

  // uint32 cost_type = 3;
  if (this->_internal_cost_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cost_type());
  }

  // int32 cost_value = 4;
  if (this->_internal_cost_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cost_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData role_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    role_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*role_cfg::GetClassData() const { return &_class_data_; }


void role_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<role_cfg*>(&to_msg);
  auto& from = static_cast<const role_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:role_cfg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.test_array_.MergeFrom(from._impl_.test_array_);
  _this->_impl_.test_plain_enum_array_.MergeFrom(from._impl_.test_plain_enum_array_);
  _this->_impl_.convert_timepoint_arr_.MergeFrom(from._impl_.convert_timepoint_arr_);
  _this->_impl_.origin_timepoint_arr_.MergeFrom(from._impl_.origin_timepoint_arr_);
  _this->_impl_.convert_duration_arr_.MergeFrom(from._impl_.convert_duration_arr_);
  _this->_impl_.origin_duration_arr_.MergeFrom(from._impl_.origin_duration_arr_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_int_as_string().empty()) {
    _this->_internal_set_int_as_string(from._internal_int_as_string());
  }
  if (!from._internal_origin_timepoint_one().empty()) {
    _this->_internal_set_origin_timepoint_one(from._internal_origin_timepoint_one());
  }
  if (!from._internal_origin_duration_one().empty()) {
    _this->_internal_set_origin_duration_one(from._internal_origin_duration_one());
  }
  if (from._internal_has_dep_test()) {
    _this->_internal_mutable_dep_test()->::dep_cfg::MergeFrom(
        from._internal_dep_test());
  }
  if (from._internal_has_convert_timepoint_one()) {
    _this->_internal_mutable_convert_timepoint_one()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_convert_timepoint_one());
  }
  if (from._internal_has_convert_duration_one()) {
    _this->_internal_mutable_convert_duration_one()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_convert_duration_one());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_unlock_level() != 0) {
    _this->_internal_set_unlock_level(from._internal_unlock_level());
  }
  if (from._internal_cost_type() != 0) {
    _this->_internal_set_cost_type(from._internal_cost_type());
  }
  if (from._internal_cost_value() != 0) {
    _this->_internal_set_cost_value(from._internal_cost_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void role_cfg::CopyFrom(const role_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:role_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_cfg::IsInitialized() const {
  return true;
}

void role_cfg::InternalSwap(role_cfg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.test_array_.InternalSwap(&other->_impl_.test_array_);
  _impl_.test_plain_enum_array_.InternalSwap(&other->_impl_.test_plain_enum_array_);
  _impl_.convert_timepoint_arr_.InternalSwap(&other->_impl_.convert_timepoint_arr_);
  _impl_.origin_timepoint_arr_.InternalSwap(&other->_impl_.origin_timepoint_arr_);
  _impl_.convert_duration_arr_.InternalSwap(&other->_impl_.convert_duration_arr_);
  _impl_.origin_duration_arr_.InternalSwap(&other->_impl_.origin_duration_arr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.int_as_string_, lhs_arena,
      &other->_impl_.int_as_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.origin_timepoint_one_, lhs_arena,
      &other->_impl_.origin_timepoint_one_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.origin_duration_one_, lhs_arena,
      &other->_impl_.origin_duration_one_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.cost_value_)
      + sizeof(role_cfg::_impl_.cost_value_)
      - PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.dep_test_)>(
          reinterpret_cast<char*>(&_impl_.dep_test_),
          reinterpret_cast<char*>(&other->_impl_.dep_test_));
}

::PROTOBUF_NAMESPACE_ID::Metadata role_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[0]);
}

// ===================================================================

class role_upgrade_cfg::_Internal {
 public:
};

role_upgrade_cfg::role_upgrade_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:role_upgrade_cfg)
}
role_upgrade_cfg::role_upgrade_cfg(const role_upgrade_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  role_upgrade_cfg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.costvalue_){}
    , decltype(_impl_.costtype_){}
    , decltype(_impl_.scoreadd_){}
    , decltype(_impl_.srcid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.srcid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.srcid_));
  // @@protoc_insertion_point(copy_constructor:role_upgrade_cfg)
}

inline void role_upgrade_cfg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.costvalue_){int64_t{0}}
    , decltype(_impl_.costtype_){0u}
    , decltype(_impl_.scoreadd_){0}
    , decltype(_impl_.srcid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

role_upgrade_cfg::~role_upgrade_cfg() {
  // @@protoc_insertion_point(destructor:role_upgrade_cfg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void role_upgrade_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void role_upgrade_cfg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void role_upgrade_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:role_upgrade_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.srcid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.srcid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* role_upgrade_cfg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1 [(.org.xresloader.ue.key_tag) = 1000];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.costtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CostValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.costvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ScoreAdd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.scoreadd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SrcID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* role_upgrade_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:role_upgrade_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1 [(.org.xresloader.ue.key_tag) = 1000];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  if (this->_internal_costtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_costtype(), target);
  }

  // int64 CostValue = 4;
  if (this->_internal_costvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_costvalue(), target);
  }

  // int32 ScoreAdd = 5;
  if (this->_internal_scoreadd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_scoreadd(), target);
  }

  // uint32 SrcID = 6;
  if (this->_internal_srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_srcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:role_upgrade_cfg)
  return target;
}

size_t role_upgrade_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:role_upgrade_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1 [(.org.xresloader.ue.key_tag) = 1000];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // int64 CostValue = 4;
  if (this->_internal_costvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_costvalue());
  }

  // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  if (this->_internal_costtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_costtype());
  }

  // int32 ScoreAdd = 5;
  if (this->_internal_scoreadd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scoreadd());
  }

  // uint32 SrcID = 6;
  if (this->_internal_srcid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_srcid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData role_upgrade_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    role_upgrade_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*role_upgrade_cfg::GetClassData() const { return &_class_data_; }


void role_upgrade_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<role_upgrade_cfg*>(&to_msg);
  auto& from = static_cast<const role_upgrade_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:role_upgrade_cfg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_costvalue() != 0) {
    _this->_internal_set_costvalue(from._internal_costvalue());
  }
  if (from._internal_costtype() != 0) {
    _this->_internal_set_costtype(from._internal_costtype());
  }
  if (from._internal_scoreadd() != 0) {
    _this->_internal_set_scoreadd(from._internal_scoreadd());
  }
  if (from._internal_srcid() != 0) {
    _this->_internal_set_srcid(from._internal_srcid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void role_upgrade_cfg::CopyFrom(const role_upgrade_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:role_upgrade_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_upgrade_cfg::IsInitialized() const {
  return true;
}

void role_upgrade_cfg::InternalSwap(role_upgrade_cfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.srcid_)
      + sizeof(role_upgrade_cfg::_impl_.srcid_)
      - PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata role_upgrade_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[1]);
}

// ===================================================================

class arr_in_arr_test_nested_message::_Internal {
 public:
  static const ::role_cfg& test_nested_message_info_role(const arr_in_arr_test_nested_message* msg);
  static const ::role_upgrade_cfg& test_nested_message_role_upgrade_cfg(const arr_in_arr_test_nested_message* msg);
};

const ::role_cfg&
arr_in_arr_test_nested_message::_Internal::test_nested_message_info_role(const arr_in_arr_test_nested_message* msg) {
  return *msg->_impl_.test_onof_.test_nested_message_info_role_;
}
const ::role_upgrade_cfg&
arr_in_arr_test_nested_message::_Internal::test_nested_message_role_upgrade_cfg(const arr_in_arr_test_nested_message* msg) {
  return *msg->_impl_.test_onof_.test_nested_message_role_upgrade_cfg_;
}
void arr_in_arr_test_nested_message::set_allocated_test_nested_message_info_role(::role_cfg* test_nested_message_info_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_test_onof();
  if (test_nested_message_info_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(test_nested_message_info_role);
    if (message_arena != submessage_arena) {
      test_nested_message_info_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_nested_message_info_role, submessage_arena);
    }
    set_has_test_nested_message_info_role();
    _impl_.test_onof_.test_nested_message_info_role_ = test_nested_message_info_role;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_nested_message.test_nested_message_info_role)
}
void arr_in_arr_test_nested_message::set_allocated_test_nested_message_role_upgrade_cfg(::role_upgrade_cfg* test_nested_message_role_upgrade_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_test_onof();
  if (test_nested_message_role_upgrade_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(test_nested_message_role_upgrade_cfg);
    if (message_arena != submessage_arena) {
      test_nested_message_role_upgrade_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_nested_message_role_upgrade_cfg, submessage_arena);
    }
    set_has_test_nested_message_role_upgrade_cfg();
    _impl_.test_onof_.test_nested_message_role_upgrade_cfg_ = test_nested_message_role_upgrade_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_nested_message.test_nested_message_role_upgrade_cfg)
}
arr_in_arr_test_nested_message::arr_in_arr_test_nested_message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arr_in_arr.test_nested_message)
}
arr_in_arr_test_nested_message::arr_in_arr_test_nested_message(const arr_in_arr_test_nested_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  arr_in_arr_test_nested_message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.test_onof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_test_onof();
  switch (from.test_onof_case()) {
    case kTestNestedMessageInfoRole: {
      _this->_internal_mutable_test_nested_message_info_role()->::role_cfg::MergeFrom(
          from._internal_test_nested_message_info_role());
      break;
    }
    case kTestNestedMessageRoleUpgradeCfg: {
      _this->_internal_mutable_test_nested_message_role_upgrade_cfg()->::role_upgrade_cfg::MergeFrom(
          from._internal_test_nested_message_role_upgrade_cfg());
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:arr_in_arr.test_nested_message)
}

inline void arr_in_arr_test_nested_message::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.test_onof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_test_onof();
}

arr_in_arr_test_nested_message::~arr_in_arr_test_nested_message() {
  // @@protoc_insertion_point(destructor:arr_in_arr.test_nested_message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void arr_in_arr_test_nested_message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_test_onof()) {
    clear_test_onof();
  }
}

void arr_in_arr_test_nested_message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void arr_in_arr_test_nested_message::clear_test_onof() {
// @@protoc_insertion_point(one_of_clear_start:arr_in_arr.test_nested_message)
  switch (test_onof_case()) {
    case kTestNestedMessageInfoRole: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.test_onof_.test_nested_message_info_role_;
      }
      break;
    }
    case kTestNestedMessageRoleUpgradeCfg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.test_onof_.test_nested_message_role_upgrade_cfg_;
      }
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TEST_ONOF_NOT_SET;
}


void arr_in_arr_test_nested_message::Clear() {
// @@protoc_insertion_point(message_clear_start:arr_in_arr.test_nested_message)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_test_onof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* arr_in_arr_test_nested_message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .role_cfg test_nested_message_info_role = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_nested_message_info_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .role_upgrade_cfg test_nested_message_role_upgrade_cfg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_nested_message_role_upgrade_cfg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* arr_in_arr_test_nested_message::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr.test_nested_message)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .role_cfg test_nested_message_info_role = 11;
  if (_internal_has_test_nested_message_info_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::test_nested_message_info_role(this),
        _Internal::test_nested_message_info_role(this).GetCachedSize(), target, stream);
  }

  // .role_upgrade_cfg test_nested_message_role_upgrade_cfg = 12;
  if (_internal_has_test_nested_message_role_upgrade_cfg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::test_nested_message_role_upgrade_cfg(this),
        _Internal::test_nested_message_role_upgrade_cfg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr.test_nested_message)
  return target;
}

size_t arr_in_arr_test_nested_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arr_in_arr.test_nested_message)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (test_onof_case()) {
    // .role_cfg test_nested_message_info_role = 11;
    case kTestNestedMessageInfoRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.test_onof_.test_nested_message_info_role_);
      break;
    }
    // .role_upgrade_cfg test_nested_message_role_upgrade_cfg = 12;
    case kTestNestedMessageRoleUpgradeCfg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.test_onof_.test_nested_message_role_upgrade_cfg_);
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData arr_in_arr_test_nested_message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    arr_in_arr_test_nested_message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*arr_in_arr_test_nested_message::GetClassData() const { return &_class_data_; }


void arr_in_arr_test_nested_message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<arr_in_arr_test_nested_message*>(&to_msg);
  auto& from = static_cast<const arr_in_arr_test_nested_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arr_in_arr.test_nested_message)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.test_onof_case()) {
    case kTestNestedMessageInfoRole: {
      _this->_internal_mutable_test_nested_message_info_role()->::role_cfg::MergeFrom(
          from._internal_test_nested_message_info_role());
      break;
    }
    case kTestNestedMessageRoleUpgradeCfg: {
      _this->_internal_mutable_test_nested_message_role_upgrade_cfg()->::role_upgrade_cfg::MergeFrom(
          from._internal_test_nested_message_role_upgrade_cfg());
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void arr_in_arr_test_nested_message::CopyFrom(const arr_in_arr_test_nested_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arr_in_arr.test_nested_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arr_in_arr_test_nested_message::IsInitialized() const {
  return true;
}

void arr_in_arr_test_nested_message::InternalSwap(arr_in_arr_test_nested_message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.test_onof_, other->_impl_.test_onof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata arr_in_arr_test_nested_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[2]);
}

// ===================================================================

class arr_in_arr::_Internal {
 public:
  static const ::role_cfg& test_info_role(const arr_in_arr* msg);
  static const ::role_upgrade_cfg& test_role_upgrade_cfg(const arr_in_arr* msg);
};

const ::role_cfg&
arr_in_arr::_Internal::test_info_role(const arr_in_arr* msg) {
  return *msg->_impl_.test_onof_.test_info_role_;
}
const ::role_upgrade_cfg&
arr_in_arr::_Internal::test_role_upgrade_cfg(const arr_in_arr* msg) {
  return *msg->_impl_.test_onof_.test_role_upgrade_cfg_;
}
void arr_in_arr::set_allocated_test_info_role(::role_cfg* test_info_role) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_test_onof();
  if (test_info_role) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(test_info_role);
    if (message_arena != submessage_arena) {
      test_info_role = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_info_role, submessage_arena);
    }
    set_has_test_info_role();
    _impl_.test_onof_.test_info_role_ = test_info_role;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_info_role)
}
void arr_in_arr::set_allocated_test_role_upgrade_cfg(::role_upgrade_cfg* test_role_upgrade_cfg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_test_onof();
  if (test_role_upgrade_cfg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(test_role_upgrade_cfg);
    if (message_arena != submessage_arena) {
      test_role_upgrade_cfg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_role_upgrade_cfg, submessage_arena);
    }
    set_has_test_role_upgrade_cfg();
    _impl_.test_onof_.test_role_upgrade_cfg_ = test_role_upgrade_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_role_upgrade_cfg)
}
arr_in_arr::arr_in_arr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arr_in_arr)
}
arr_in_arr::arr_in_arr(const arr_in_arr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  arr_in_arr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.int_arr_){from._impl_.int_arr_}
    , /*decltype(_impl_._int_arr_cached_byte_size_)*/{0}
    , decltype(_impl_.str_arr_){from._impl_.str_arr_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.test_onof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  clear_has_test_onof();
  switch (from.test_onof_case()) {
    case kTestInfoRole: {
      _this->_internal_mutable_test_info_role()->::role_cfg::MergeFrom(
          from._internal_test_info_role());
      break;
    }
    case kTestRoleUpgradeCfg: {
      _this->_internal_mutable_test_role_upgrade_cfg()->::role_upgrade_cfg::MergeFrom(
          from._internal_test_role_upgrade_cfg());
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:arr_in_arr)
}

inline void arr_in_arr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.int_arr_){arena}
    , /*decltype(_impl_._int_arr_cached_byte_size_)*/{0}
    , decltype(_impl_.str_arr_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.test_onof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_test_onof();
}

arr_in_arr::~arr_in_arr() {
  // @@protoc_insertion_point(destructor:arr_in_arr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void arr_in_arr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.int_arr_.~RepeatedField();
  _impl_.str_arr_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (has_test_onof()) {
    clear_test_onof();
  }
}

void arr_in_arr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void arr_in_arr::clear_test_onof() {
// @@protoc_insertion_point(one_of_clear_start:arr_in_arr)
  switch (test_onof_case()) {
    case kTestInfoRole: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.test_onof_.test_info_role_;
      }
      break;
    }
    case kTestRoleUpgradeCfg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.test_onof_.test_role_upgrade_cfg_;
      }
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TEST_ONOF_NOT_SET;
}


void arr_in_arr::Clear() {
// @@protoc_insertion_point(message_clear_start:arr_in_arr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int_arr_.Clear();
  _impl_.str_arr_.Clear();
  _impl_.name_.ClearToEmpty();
  clear_test_onof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* arr_in_arr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arr_in_arr.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 int_arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_int_arr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string str_arr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_str_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "arr_in_arr.str_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .role_cfg test_info_role = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_info_role(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .role_upgrade_cfg test_role_upgrade_cfg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_role_upgrade_cfg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* arr_in_arr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arr_in_arr.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int32 int_arr = 2;
  {
    int byte_size = _impl_._int_arr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_int_arr(), byte_size, target);
    }
  }

  // repeated string str_arr = 3;
  for (int i = 0, n = this->_internal_str_arr_size(); i < n; i++) {
    const auto& s = this->_internal_str_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arr_in_arr.str_arr");
    target = stream->WriteString(3, s, target);
  }

  // .role_cfg test_info_role = 11;
  if (_internal_has_test_info_role()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::test_info_role(this),
        _Internal::test_info_role(this).GetCachedSize(), target, stream);
  }

  // .role_upgrade_cfg test_role_upgrade_cfg = 12;
  if (_internal_has_test_role_upgrade_cfg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::test_role_upgrade_cfg(this),
        _Internal::test_role_upgrade_cfg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr)
  return target;
}

size_t arr_in_arr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arr_in_arr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int_arr = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.int_arr_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int_arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string str_arr = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.str_arr_.size());
  for (int i = 0, n = _impl_.str_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.str_arr_.Get(i));
  }

  // string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (test_onof_case()) {
    // .role_cfg test_info_role = 11;
    case kTestInfoRole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.test_onof_.test_info_role_);
      break;
    }
    // .role_upgrade_cfg test_role_upgrade_cfg = 12;
    case kTestRoleUpgradeCfg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.test_onof_.test_role_upgrade_cfg_);
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData arr_in_arr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    arr_in_arr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*arr_in_arr::GetClassData() const { return &_class_data_; }


void arr_in_arr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<arr_in_arr*>(&to_msg);
  auto& from = static_cast<const arr_in_arr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arr_in_arr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.int_arr_.MergeFrom(from._impl_.int_arr_);
  _this->_impl_.str_arr_.MergeFrom(from._impl_.str_arr_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.test_onof_case()) {
    case kTestInfoRole: {
      _this->_internal_mutable_test_info_role()->::role_cfg::MergeFrom(
          from._internal_test_info_role());
      break;
    }
    case kTestRoleUpgradeCfg: {
      _this->_internal_mutable_test_role_upgrade_cfg()->::role_upgrade_cfg::MergeFrom(
          from._internal_test_role_upgrade_cfg());
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void arr_in_arr::CopyFrom(const arr_in_arr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arr_in_arr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arr_in_arr::IsInitialized() const {
  return true;
}

void arr_in_arr::InternalSwap(arr_in_arr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.int_arr_.InternalSwap(&other->_impl_.int_arr_);
  _impl_.str_arr_.InternalSwap(&other->_impl_.str_arr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.test_onof_, other->_impl_.test_onof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata arr_in_arr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[3]);
}

// ===================================================================

class test_msg_verifier::_Internal {
 public:
};

test_msg_verifier::test_msg_verifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test_msg_verifier)
}
test_msg_verifier::test_msg_verifier(const test_msg_verifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  test_msg_verifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.test_id_1_){}
    , decltype(_impl_.test_id_2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.test_id_1_, &from._impl_.test_id_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.test_id_2_) -
    reinterpret_cast<char*>(&_impl_.test_id_1_)) + sizeof(_impl_.test_id_2_));
  // @@protoc_insertion_point(copy_constructor:test_msg_verifier)
}

inline void test_msg_verifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.test_id_1_){0u}
    , decltype(_impl_.test_id_2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

test_msg_verifier::~test_msg_verifier() {
  // @@protoc_insertion_point(destructor:test_msg_verifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void test_msg_verifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void test_msg_verifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void test_msg_verifier::Clear() {
// @@protoc_insertion_point(message_clear_start:test_msg_verifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.test_id_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.test_id_2_) -
      reinterpret_cast<char*>(&_impl_.test_id_1_)) + sizeof(_impl_.test_id_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* test_msg_verifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 test_id_1 = 10001;
      case 10001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.test_id_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
      case 10002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.test_id_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* test_msg_verifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_msg_verifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 test_id_1 = 10001;
  if (this->_internal_test_id_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10001, this->_internal_test_id_1(), target);
  }

  // uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
  if (this->_internal_test_id_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10002, this->_internal_test_id_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_msg_verifier)
  return target;
}

size_t test_msg_verifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_msg_verifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 test_id_1 = 10001;
  if (this->_internal_test_id_1() != 0) {
    total_size += 3 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_test_id_1());
  }

  // uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
  if (this->_internal_test_id_2() != 0) {
    total_size += 3 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_test_id_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData test_msg_verifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    test_msg_verifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*test_msg_verifier::GetClassData() const { return &_class_data_; }


void test_msg_verifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<test_msg_verifier*>(&to_msg);
  auto& from = static_cast<const test_msg_verifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test_msg_verifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_test_id_1() != 0) {
    _this->_internal_set_test_id_1(from._internal_test_id_1());
  }
  if (from._internal_test_id_2() != 0) {
    _this->_internal_set_test_id_2(from._internal_test_id_2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void test_msg_verifier::CopyFrom(const test_msg_verifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_msg_verifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_msg_verifier::IsInitialized() const {
  return true;
}

void test_msg_verifier::InternalSwap(test_msg_verifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(test_msg_verifier, _impl_.test_id_2_)
      + sizeof(test_msg_verifier::_impl_.test_id_2_)
      - PROTOBUF_FIELD_OFFSET(test_msg_verifier, _impl_.test_id_1_)>(
          reinterpret_cast<char*>(&_impl_.test_id_1_),
          reinterpret_cast<char*>(&other->_impl_.test_id_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata test_msg_verifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[4]);
}

// ===================================================================

arr_in_arr_cfg_TestMapIsEntry_DoNotUse::arr_in_arr_cfg_TestMapIsEntry_DoNotUse() {}
arr_in_arr_cfg_TestMapIsEntry_DoNotUse::arr_in_arr_cfg_TestMapIsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void arr_in_arr_cfg_TestMapIsEntry_DoNotUse::MergeFrom(const arr_in_arr_cfg_TestMapIsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata arr_in_arr_cfg_TestMapIsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[5]);
}

// ===================================================================

arr_in_arr_cfg_TestMapSmEntry_DoNotUse::arr_in_arr_cfg_TestMapSmEntry_DoNotUse() {}
arr_in_arr_cfg_TestMapSmEntry_DoNotUse::arr_in_arr_cfg_TestMapSmEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void arr_in_arr_cfg_TestMapSmEntry_DoNotUse::MergeFrom(const arr_in_arr_cfg_TestMapSmEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata arr_in_arr_cfg_TestMapSmEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[6]);
}

// ===================================================================

class arr_in_arr_cfg::_Internal {
 public:
  static const ::test_msg_verifier& test_plain_msg(const arr_in_arr_cfg* msg);
};

const ::test_msg_verifier&
arr_in_arr_cfg::_Internal::test_plain_msg(const arr_in_arr_cfg* msg) {
  return *msg->_impl_.test_plain_msg_;
}
void arr_in_arr_cfg::clear_test_map_sm() {
  _impl_.test_map_sm_.Clear();
}
arr_in_arr_cfg::arr_in_arr_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &arr_in_arr_cfg::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:arr_in_arr_cfg)
}
arr_in_arr_cfg::arr_in_arr_cfg(const arr_in_arr_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  arr_in_arr_cfg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){from._impl_.arr_}
    , decltype(_impl_.test_plain_int_arr_){from._impl_.test_plain_int_arr_}
    , /*decltype(_impl_._test_plain_int_arr_cached_byte_size_)*/{0}
    , decltype(_impl_.test_plain_enum_arr_){from._impl_.test_plain_enum_arr_}
    , /*decltype(_impl_._test_plain_enum_arr_cached_byte_size_)*/{0}
    , decltype(_impl_.test_plain_msg_arr_){from._impl_.test_plain_msg_arr_}
    , /*decltype(_impl_.test_map_is_)*/{}
    , /*decltype(_impl_.test_map_sm_)*/{}
    , decltype(_impl_.test_plain_msg_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.test_map_is_.MergeFrom(from._impl_.test_map_is_);
  _this->_impl_.test_map_sm_.MergeFrom(from._impl_.test_map_sm_);
  if (from._internal_has_test_plain_msg()) {
    _this->_impl_.test_plain_msg_ = new ::test_msg_verifier(*from._impl_.test_plain_msg_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:arr_in_arr_cfg)
}

inline void arr_in_arr_cfg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arr_){arena}
    , decltype(_impl_.test_plain_int_arr_){arena}
    , /*decltype(_impl_._test_plain_int_arr_cached_byte_size_)*/{0}
    , decltype(_impl_.test_plain_enum_arr_){arena}
    , /*decltype(_impl_._test_plain_enum_arr_cached_byte_size_)*/{0}
    , decltype(_impl_.test_plain_msg_arr_){arena}
    , /*decltype(_impl_.test_map_is_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.test_map_sm_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.test_plain_msg_){nullptr}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

arr_in_arr_cfg::~arr_in_arr_cfg() {
  // @@protoc_insertion_point(destructor:arr_in_arr_cfg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void arr_in_arr_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arr_.~RepeatedPtrField();
  _impl_.test_plain_int_arr_.~RepeatedField();
  _impl_.test_plain_enum_arr_.~RepeatedField();
  _impl_.test_plain_msg_arr_.~RepeatedPtrField();
  _impl_.test_map_is_.Destruct();
  _impl_.test_map_is_.~MapField();
  _impl_.test_map_sm_.Destruct();
  _impl_.test_map_sm_.~MapField();
  if (this != internal_default_instance()) delete _impl_.test_plain_msg_;
}

void arr_in_arr_cfg::ArenaDtor(void* object) {
  arr_in_arr_cfg* _this = reinterpret_cast< arr_in_arr_cfg* >(object);
  _this->_impl_.test_map_is_.Destruct();
  _this->_impl_.test_map_sm_.Destruct();
}
void arr_in_arr_cfg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void arr_in_arr_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:arr_in_arr_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arr_.Clear();
  _impl_.test_plain_int_arr_.Clear();
  _impl_.test_plain_enum_arr_.Clear();
  _impl_.test_plain_msg_arr_.Clear();
  _impl_.test_map_is_.Clear();
  _impl_.test_map_sm_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.test_plain_msg_ != nullptr) {
    delete _impl_.test_plain_msg_;
  }
  _impl_.test_plain_msg_ = nullptr;
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* arr_in_arr_cfg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .arr_in_arr arr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 test_plain_int_arr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_test_plain_int_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_test_plain_int_arr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .cost_type test_plain_enum_arr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_test_plain_enum_arr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_test_plain_enum_arr(static_cast<::cost_type>(val));
        } else
          goto handle_unusual;
        continue;
      // .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_plain_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_msg_verifier test_plain_msg_arr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_test_plain_msg_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int32, string> test_map_is = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.test_map_is_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.test_map_sm_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* arr_in_arr_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .arr_in_arr arr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 test_plain_int_arr = 3;
  {
    int byte_size = _impl_._test_plain_int_arr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_test_plain_int_arr(), byte_size, target);
    }
  }

  // repeated .cost_type test_plain_enum_arr = 4;
  {
    int byte_size = _impl_._test_plain_enum_arr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, _impl_.test_plain_enum_arr_, byte_size, target);
    }
  }

  // .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
  if (this->_internal_has_test_plain_msg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::test_plain_msg(this),
        _Internal::test_plain_msg(this).GetCachedSize(), target, stream);
  }

  // repeated .test_msg_verifier test_plain_msg_arr = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_plain_msg_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_plain_msg_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int32, string> test_map_is = 7;
  if (!this->_internal_test_map_is().empty()) {
    using MapType = ::_pb::Map<int32_t, std::string>;
    using WireHelper = arr_in_arr_cfg_TestMapIsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_test_map_is();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "arr_in_arr_cfg.TestMapIsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  if (!this->_internal_test_map_sm().empty()) {
    using MapType = ::_pb::Map<std::string, ::dep2_cfg>;
    using WireHelper = arr_in_arr_cfg_TestMapSmEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_test_map_sm();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "arr_in_arr_cfg.TestMapSmEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr_cfg)
  return target;
}

size_t arr_in_arr_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arr_in_arr_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arr_in_arr arr = 2;
  total_size += 1UL * this->_internal_arr_size();
  for (const auto& msg : this->_impl_.arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 test_plain_int_arr = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.test_plain_int_arr_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._test_plain_int_arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .cost_type test_plain_enum_arr = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_test_plain_enum_arr_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_test_plain_enum_arr(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._test_plain_enum_arr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .test_msg_verifier test_plain_msg_arr = 6;
  total_size += 1UL * this->_internal_test_plain_msg_arr_size();
  for (const auto& msg : this->_impl_.test_plain_msg_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int32, string> test_map_is = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_map_is_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, std::string >::const_iterator
      it = this->_internal_test_map_is().begin();
      it != this->_internal_test_map_is().end(); ++it) {
    total_size += arr_in_arr_cfg_TestMapIsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_test_map_sm_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::dep2_cfg >::const_iterator
      it = this->_internal_test_map_sm().begin();
      it != this->_internal_test_map_sm().end(); ++it) {
    total_size += arr_in_arr_cfg_TestMapSmEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
  if (this->_internal_has_test_plain_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.test_plain_msg_);
  }

  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData arr_in_arr_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    arr_in_arr_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*arr_in_arr_cfg::GetClassData() const { return &_class_data_; }


void arr_in_arr_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<arr_in_arr_cfg*>(&to_msg);
  auto& from = static_cast<const arr_in_arr_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arr_in_arr_cfg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arr_.MergeFrom(from._impl_.arr_);
  _this->_impl_.test_plain_int_arr_.MergeFrom(from._impl_.test_plain_int_arr_);
  _this->_impl_.test_plain_enum_arr_.MergeFrom(from._impl_.test_plain_enum_arr_);
  _this->_impl_.test_plain_msg_arr_.MergeFrom(from._impl_.test_plain_msg_arr_);
  _this->_impl_.test_map_is_.MergeFrom(from._impl_.test_map_is_);
  _this->_impl_.test_map_sm_.MergeFrom(from._impl_.test_map_sm_);
  if (from._internal_has_test_plain_msg()) {
    _this->_internal_mutable_test_plain_msg()->::test_msg_verifier::MergeFrom(
        from._internal_test_plain_msg());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void arr_in_arr_cfg::CopyFrom(const arr_in_arr_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arr_in_arr_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arr_in_arr_cfg::IsInitialized() const {
  return true;
}

void arr_in_arr_cfg::InternalSwap(arr_in_arr_cfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arr_.InternalSwap(&other->_impl_.arr_);
  _impl_.test_plain_int_arr_.InternalSwap(&other->_impl_.test_plain_int_arr_);
  _impl_.test_plain_enum_arr_.InternalSwap(&other->_impl_.test_plain_enum_arr_);
  _impl_.test_plain_msg_arr_.InternalSwap(&other->_impl_.test_plain_msg_arr_);
  _impl_.test_map_is_.InternalSwap(&other->_impl_.test_map_is_);
  _impl_.test_map_sm_.InternalSwap(&other->_impl_.test_map_sm_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.id_)
      + sizeof(arr_in_arr_cfg::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_msg_)>(
          reinterpret_cast<char*>(&_impl_.test_plain_msg_),
          reinterpret_cast<char*>(&other->_impl_.test_plain_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata arr_in_arr_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[7]);
}

// ===================================================================

class event_reward_item::_Internal {
 public:
};

event_reward_item::event_reward_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:event_reward_item)
}
event_reward_item::event_reward_item(const event_reward_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  event_reward_item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , decltype(_impl_.item_count_){}
    , decltype(_impl_.nested_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_count_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.item_count_));
  clear_has_nested();
  switch (from.nested_case()) {
    case kNestedNote: {
      _this->_internal_set_nested_note(from._internal_nested_note());
      break;
    }
    case kNestedEnumType: {
      _this->_internal_set_nested_enum_type(from._internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_reward_item)
}

inline void event_reward_item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){0u}
    , decltype(_impl_.item_count_){0u}
    , decltype(_impl_.nested_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_nested();
}

event_reward_item::~event_reward_item() {
  // @@protoc_insertion_point(destructor:event_reward_item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void event_reward_item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_nested()) {
    clear_nested();
  }
}

void event_reward_item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void event_reward_item::clear_nested() {
// @@protoc_insertion_point(one_of_clear_start:event_reward_item)
  switch (nested_case()) {
    case kNestedNote: {
      _impl_.nested_.nested_note_.Destroy();
      break;
    }
    case kNestedEnumType: {
      // No need to clear
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}


void event_reward_item::Clear() {
// @@protoc_insertion_point(message_clear_start:event_reward_item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_count_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.item_count_));
  clear_nested();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_reward_item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nested_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "event_reward_item.nested_note"));
        } else
          goto handle_unusual;
        continue;
      // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nested_enum_type(static_cast<::cost_type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* event_reward_item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_reward_item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // uint32 item_count = 2;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_count(), target);
  }

  // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  if (_internal_has_nested_note()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nested_note().data(), static_cast<int>(this->_internal_nested_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_reward_item.nested_note");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nested_note(), target);
  }

  // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  if (_internal_has_nested_enum_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_nested_enum_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_reward_item)
  return target;
}

size_t event_reward_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_reward_item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // uint32 item_count = 2;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_count());
  }

  switch (nested_case()) {
    // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    case kNestedNote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nested_note());
      break;
    }
    // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    case kNestedEnumType: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_reward_item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    event_reward_item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_reward_item::GetClassData() const { return &_class_data_; }


void event_reward_item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<event_reward_item*>(&to_msg);
  auto& from = static_cast<const event_reward_item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:event_reward_item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  switch (from.nested_case()) {
    case kNestedNote: {
      _this->_internal_set_nested_note(from._internal_nested_note());
      break;
    }
    case kNestedEnumType: {
      _this->_internal_set_nested_enum_type(from._internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_reward_item::CopyFrom(const event_reward_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_reward_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_reward_item::IsInitialized() const {
  return true;
}

void event_reward_item::InternalSwap(event_reward_item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_count_)
      + sizeof(event_reward_item::_impl_.item_count_)
      - PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
  swap(_impl_.nested_, other->_impl_.nested_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata event_reward_item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[8]);
}

// ===================================================================

class event_rule_item::_Internal {
 public:
};

event_rule_item::event_rule_item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:event_rule_item)
}
event_rule_item::event_rule_item(const event_rule_item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  event_rule_item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_id_){}
    , decltype(_impl_.rule_param_){}
    , decltype(_impl_.nested_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rule_id_, &from._impl_.rule_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rule_param_) -
    reinterpret_cast<char*>(&_impl_.rule_id_)) + sizeof(_impl_.rule_param_));
  clear_has_nested();
  switch (from.nested_case()) {
    case kNestedNote: {
      _this->_internal_set_nested_note(from._internal_nested_note());
      break;
    }
    case kNestedEnumType: {
      _this->_internal_set_nested_enum_type(from._internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_rule_item)
}

inline void event_rule_item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rule_id_){0u}
    , decltype(_impl_.rule_param_){0u}
    , decltype(_impl_.nested_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_nested();
}

event_rule_item::~event_rule_item() {
  // @@protoc_insertion_point(destructor:event_rule_item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void event_rule_item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_nested()) {
    clear_nested();
  }
}

void event_rule_item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void event_rule_item::clear_nested() {
// @@protoc_insertion_point(one_of_clear_start:event_rule_item)
  switch (nested_case()) {
    case kNestedNote: {
      _impl_.nested_.nested_note_.Destroy();
      break;
    }
    case kNestedEnumType: {
      // No need to clear
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}


void event_rule_item::Clear() {
// @@protoc_insertion_point(message_clear_start:event_rule_item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rule_param_) -
      reinterpret_cast<char*>(&_impl_.rule_id_)) + sizeof(_impl_.rule_param_));
  clear_nested();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_rule_item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rule_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.rule_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rule_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rule_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_nested_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "event_rule_item.nested_note"));
        } else
          goto handle_unusual;
        continue;
      // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nested_enum_type(static_cast<::cost_type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* event_rule_item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_rule_item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rule_id = 1;
  if (this->_internal_rule_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rule_id(), target);
  }

  // uint32 rule_param = 2;
  if (this->_internal_rule_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rule_param(), target);
  }

  // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  if (_internal_has_nested_note()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nested_note().data(), static_cast<int>(this->_internal_nested_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_rule_item.nested_note");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nested_note(), target);
  }

  // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  if (_internal_has_nested_enum_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_nested_enum_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_rule_item)
  return target;
}

size_t event_rule_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_rule_item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rule_id = 1;
  if (this->_internal_rule_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rule_id());
  }

  // uint32 rule_param = 2;
  if (this->_internal_rule_param() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rule_param());
  }

  switch (nested_case()) {
    // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    case kNestedNote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_nested_note());
      break;
    }
    // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    case kNestedEnumType: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_rule_item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    event_rule_item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_rule_item::GetClassData() const { return &_class_data_; }


void event_rule_item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<event_rule_item*>(&to_msg);
  auto& from = static_cast<const event_rule_item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:event_rule_item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rule_id() != 0) {
    _this->_internal_set_rule_id(from._internal_rule_id());
  }
  if (from._internal_rule_param() != 0) {
    _this->_internal_set_rule_param(from._internal_rule_param());
  }
  switch (from.nested_case()) {
    case kNestedNote: {
      _this->_internal_set_nested_note(from._internal_nested_note());
      break;
    }
    case kNestedEnumType: {
      _this->_internal_set_nested_enum_type(from._internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_rule_item::CopyFrom(const event_rule_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_rule_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_rule_item::IsInitialized() const {
  return true;
}

void event_rule_item::InternalSwap(event_rule_item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_param_)
      + sizeof(event_rule_item::_impl_.rule_param_)
      - PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_id_)>(
          reinterpret_cast<char*>(&_impl_.rule_id_),
          reinterpret_cast<char*>(&other->_impl_.rule_id_));
  swap(_impl_.nested_, other->_impl_.nested_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata event_rule_item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[9]);
}

// ===================================================================

class event_cfg::_Internal {
 public:
  static const ::event_rule_item& rule(const event_cfg* msg);
  static const ::event_rule_item& specify_field(const event_cfg* msg);
  static const ::event_reward_item& item(const event_cfg* msg);
};

const ::event_rule_item&
event_cfg::_Internal::rule(const event_cfg* msg) {
  return *msg->_impl_.rule_;
}
const ::event_rule_item&
event_cfg::_Internal::specify_field(const event_cfg* msg) {
  return *msg->_impl_.specify_field_;
}
const ::event_reward_item&
event_cfg::_Internal::item(const event_cfg* msg) {
  return *msg->_impl_.reward_.item_;
}
void event_cfg::set_allocated_item(::event_reward_item* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_reward();
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    set_has_item();
    _impl_.reward_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:event_cfg.item)
}
event_cfg::event_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:event_cfg)
}
event_cfg::event_cfg(const event_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  event_cfg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.test_arr_){from._impl_.test_arr_}
    , decltype(_impl_.test_empty_arr_){from._impl_.test_empty_arr_}
    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.specify_field_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.process_){}
    , decltype(_impl_.reward_){}
    , decltype(_impl_.unlock_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rule()) {
    _this->_impl_.rule_ = new ::event_rule_item(*from._impl_.rule_);
  }
  if (from._internal_has_specify_field()) {
    _this->_impl_.specify_field_ = new ::event_rule_item(*from._impl_.specify_field_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.process_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.process_));
  clear_has_reward();
  switch (from.reward_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::event_reward_item::MergeFrom(
          from._internal_item());
      break;
    }
    case kUserExp: {
      _this->_internal_set_user_exp(from._internal_user_exp());
      break;
    }
    case kNote: {
      _this->_internal_set_note(from._internal_note());
      break;
    }
    case kEnumType: {
      _this->_internal_set_enum_type(from._internal_enum_type());
      break;
    }
    case REWARD_NOT_SET: {
      break;
    }
  }
  clear_has_unlock_type();
  switch (from.unlock_type_case()) {
    case kUserLevel: {
      _this->_internal_set_user_level(from._internal_user_level());
      break;
    }
    case UNLOCK_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:event_cfg)
}

inline void event_cfg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.test_arr_){arena}
    , decltype(_impl_.test_empty_arr_){arena}
    , decltype(_impl_.rule_){nullptr}
    , decltype(_impl_.specify_field_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.process_){0u}
    , decltype(_impl_.reward_){}
    , decltype(_impl_.unlock_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_reward();
  clear_has_unlock_type();
}

event_cfg::~event_cfg() {
  // @@protoc_insertion_point(destructor:event_cfg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void event_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.test_arr_.~RepeatedPtrField();
  _impl_.test_empty_arr_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.rule_;
  if (this != internal_default_instance()) delete _impl_.specify_field_;
  if (has_reward()) {
    clear_reward();
  }
  if (has_unlock_type()) {
    clear_unlock_type();
  }
}

void event_cfg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void event_cfg::clear_reward() {
// @@protoc_insertion_point(one_of_clear_start:event_cfg)
  switch (reward_case()) {
    case kItem: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.reward_.item_;
      }
      break;
    }
    case kUserExp: {
      // No need to clear
      break;
    }
    case kNote: {
      _impl_.reward_.note_.Destroy();
      break;
    }
    case kEnumType: {
      // No need to clear
      break;
    }
    case REWARD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REWARD_NOT_SET;
}

void event_cfg::clear_unlock_type() {
// @@protoc_insertion_point(one_of_clear_start:event_cfg)
  switch (unlock_type_case()) {
    case kUserLevel: {
      // No need to clear
      break;
    }
    case UNLOCK_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = UNLOCK_TYPE_NOT_SET;
}


void event_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:event_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.test_arr_.Clear();
  _impl_.test_empty_arr_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.rule_ != nullptr) {
    delete _impl_.rule_;
  }
  _impl_.rule_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.specify_field_ != nullptr) {
    delete _impl_.specify_field_;
  }
  _impl_.specify_field_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.process_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.process_));
  clear_reward();
  clear_unlock_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* event_cfg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [(.org.xresloader.ue.key_tag) = 100];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 process = 2 [(.org.xresloader.ue.key_tag) = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .event_rule_item rule = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .event_rule_item specify_field = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_specify_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_user_exp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_note();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "event_cfg.note"));
        } else
          goto handle_unusual;
        continue;
      // .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_enum_type(static_cast<::cost_type>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _internal_set_user_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_test_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<730>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_test_empty_arr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<738>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* event_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [(.org.xresloader.ue.key_tag) = 100];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 process = 2 [(.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_process(), target);
  }

  // .event_rule_item rule = 6;
  if (this->_internal_has_rule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  // .event_rule_item specify_field = 7;
  if (this->_internal_has_specify_field()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::specify_field(this),
        _Internal::specify_field(this).GetCachedSize(), target, stream);
  }

  // .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
  if (_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
  if (_internal_has_user_exp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_user_exp(), target);
  }

  // string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
  if (_internal_has_note()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_note().data(), static_cast<int>(this->_internal_note().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "event_cfg.note");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_note(), target);
  }

  // .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
  if (_internal_has_enum_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_enum_type(), target);
  }

  // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
  if (_internal_has_user_level()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(51, this->_internal_user_level(), target);
  }

  // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(91, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_empty_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_empty_arr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(92, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_cfg)
  return target;
}

size_t event_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
  total_size += 2UL * this->_internal_test_arr_size();
  for (const auto& msg : this->_impl_.test_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
  total_size += 2UL * this->_internal_test_empty_arr_size();
  for (const auto& msg : this->_impl_.test_empty_arr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .event_rule_item rule = 6;
  if (this->_internal_has_rule()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rule_);
  }

  // .event_rule_item specify_field = 7;
  if (this->_internal_has_specify_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.specify_field_);
  }

  // uint32 id = 1 [(.org.xresloader.ue.key_tag) = 100];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 process = 2 [(.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_process() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_process());
  }

  switch (reward_case()) {
    // .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
    case kItem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reward_.item_);
      break;
    }
    // int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
    case kUserExp: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_exp());
      break;
    }
    // string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    case kNote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_note());
      break;
    }
    // .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    case kEnumType: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_enum_type());
      break;
    }
    case REWARD_NOT_SET: {
      break;
    }
  }
  switch (unlock_type_case()) {
    // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
    case kUserLevel: {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_user_level());
      break;
    }
    case UNLOCK_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData event_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    event_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*event_cfg::GetClassData() const { return &_class_data_; }


void event_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<event_cfg*>(&to_msg);
  auto& from = static_cast<const event_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:event_cfg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.test_arr_.MergeFrom(from._impl_.test_arr_);
  _this->_impl_.test_empty_arr_.MergeFrom(from._impl_.test_empty_arr_);
  if (from._internal_has_rule()) {
    _this->_internal_mutable_rule()->::event_rule_item::MergeFrom(
        from._internal_rule());
  }
  if (from._internal_has_specify_field()) {
    _this->_internal_mutable_specify_field()->::event_rule_item::MergeFrom(
        from._internal_specify_field());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_process() != 0) {
    _this->_internal_set_process(from._internal_process());
  }
  switch (from.reward_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::event_reward_item::MergeFrom(
          from._internal_item());
      break;
    }
    case kUserExp: {
      _this->_internal_set_user_exp(from._internal_user_exp());
      break;
    }
    case kNote: {
      _this->_internal_set_note(from._internal_note());
      break;
    }
    case kEnumType: {
      _this->_internal_set_enum_type(from._internal_enum_type());
      break;
    }
    case REWARD_NOT_SET: {
      break;
    }
  }
  switch (from.unlock_type_case()) {
    case kUserLevel: {
      _this->_internal_set_user_level(from._internal_user_level());
      break;
    }
    case UNLOCK_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void event_cfg::CopyFrom(const event_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_cfg::IsInitialized() const {
  return true;
}

void event_cfg::InternalSwap(event_cfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.test_arr_.InternalSwap(&other->_impl_.test_arr_);
  _impl_.test_empty_arr_.InternalSwap(&other->_impl_.test_empty_arr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.process_)
      + sizeof(event_cfg::_impl_.process_)
      - PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.rule_)>(
          reinterpret_cast<char*>(&_impl_.rule_),
          reinterpret_cast<char*>(&other->_impl_.rule_));
  swap(_impl_.reward_, other->_impl_.reward_);
  swap(_impl_.unlock_type_, other->_impl_.unlock_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata event_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[10]);
}

// ===================================================================

class keep_or_strip_empty_list_cfg::_Internal {
 public:
};

void keep_or_strip_empty_list_cfg::clear_array_msg() {
  _impl_.array_msg_.Clear();
}
void keep_or_strip_empty_list_cfg::clear_array_plain_msg() {
  _impl_.array_plain_msg_.Clear();
}
keep_or_strip_empty_list_cfg::keep_or_strip_empty_list_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:keep_or_strip_empty_list_cfg)
}
keep_or_strip_empty_list_cfg::keep_or_strip_empty_list_cfg(const keep_or_strip_empty_list_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  keep_or_strip_empty_list_cfg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.array_msg_){from._impl_.array_msg_}
    , decltype(_impl_.array_plain_msg_){from._impl_.array_plain_msg_}
    , decltype(_impl_.array_int32_){from._impl_.array_int32_}
    , /*decltype(_impl_._array_int32_cached_byte_size_)*/{0}
    , decltype(_impl_.array_int64_){from._impl_.array_int64_}
    , /*decltype(_impl_._array_int64_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:keep_or_strip_empty_list_cfg)
}

inline void keep_or_strip_empty_list_cfg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.array_msg_){arena}
    , decltype(_impl_.array_plain_msg_){arena}
    , decltype(_impl_.array_int32_){arena}
    , /*decltype(_impl_._array_int32_cached_byte_size_)*/{0}
    , decltype(_impl_.array_int64_){arena}
    , /*decltype(_impl_._array_int64_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

keep_or_strip_empty_list_cfg::~keep_or_strip_empty_list_cfg() {
  // @@protoc_insertion_point(destructor:keep_or_strip_empty_list_cfg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void keep_or_strip_empty_list_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.array_msg_.~RepeatedPtrField();
  _impl_.array_plain_msg_.~RepeatedPtrField();
  _impl_.array_int32_.~RepeatedField();
  _impl_.array_int64_.~RepeatedField();
}

void keep_or_strip_empty_list_cfg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void keep_or_strip_empty_list_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:keep_or_strip_empty_list_cfg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.array_msg_.Clear();
  _impl_.array_plain_msg_.Clear();
  _impl_.array_int32_.Clear();
  _impl_.array_int64_.Clear();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* keep_or_strip_empty_list_cfg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dep2_cfg array_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .dep2_cfg array_plain_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_plain_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 array_int32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_array_int32(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_array_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 array_int64 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_array_int64(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_array_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* keep_or_strip_empty_list_cfg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keep_or_strip_empty_list_cfg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .dep2_cfg array_msg = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_msg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dep2_cfg array_plain_msg = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_plain_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_plain_msg(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 array_int32 = 4;
  {
    int byte_size = _impl_._array_int32_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_array_int32(), byte_size, target);
    }
  }

  // repeated int64 array_int64 = 5;
  {
    int byte_size = _impl_._array_int64_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_array_int64(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keep_or_strip_empty_list_cfg)
  return target;
}

size_t keep_or_strip_empty_list_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keep_or_strip_empty_list_cfg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dep2_cfg array_msg = 2;
  total_size += 1UL * this->_internal_array_msg_size();
  for (const auto& msg : this->_impl_.array_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dep2_cfg array_plain_msg = 3;
  total_size += 1UL * this->_internal_array_plain_msg_size();
  for (const auto& msg : this->_impl_.array_plain_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 array_int32 = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.array_int32_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._array_int32_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 array_int64 = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.array_int64_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._array_int64_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData keep_or_strip_empty_list_cfg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    keep_or_strip_empty_list_cfg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*keep_or_strip_empty_list_cfg::GetClassData() const { return &_class_data_; }


void keep_or_strip_empty_list_cfg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<keep_or_strip_empty_list_cfg*>(&to_msg);
  auto& from = static_cast<const keep_or_strip_empty_list_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keep_or_strip_empty_list_cfg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.array_msg_.MergeFrom(from._impl_.array_msg_);
  _this->_impl_.array_plain_msg_.MergeFrom(from._impl_.array_plain_msg_);
  _this->_impl_.array_int32_.MergeFrom(from._impl_.array_int32_);
  _this->_impl_.array_int64_.MergeFrom(from._impl_.array_int64_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void keep_or_strip_empty_list_cfg::CopyFrom(const keep_or_strip_empty_list_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keep_or_strip_empty_list_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keep_or_strip_empty_list_cfg::IsInitialized() const {
  return true;
}

void keep_or_strip_empty_list_cfg::InternalSwap(keep_or_strip_empty_list_cfg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.array_msg_.InternalSwap(&other->_impl_.array_msg_);
  _impl_.array_plain_msg_.InternalSwap(&other->_impl_.array_plain_msg_);
  _impl_.array_int32_.InternalSwap(&other->_impl_.array_int32_);
  _impl_.array_int64_.InternalSwap(&other->_impl_.array_int64_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata keep_or_strip_empty_list_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::role_cfg*
Arena::CreateMaybeMessage< ::role_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::role_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::role_upgrade_cfg*
Arena::CreateMaybeMessage< ::role_upgrade_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::role_upgrade_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::arr_in_arr_test_nested_message*
Arena::CreateMaybeMessage< ::arr_in_arr_test_nested_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arr_in_arr_test_nested_message >(arena);
}
template<> PROTOBUF_NOINLINE ::arr_in_arr*
Arena::CreateMaybeMessage< ::arr_in_arr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arr_in_arr >(arena);
}
template<> PROTOBUF_NOINLINE ::test_msg_verifier*
Arena::CreateMaybeMessage< ::test_msg_verifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_msg_verifier >(arena);
}
template<> PROTOBUF_NOINLINE ::arr_in_arr_cfg_TestMapIsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::arr_in_arr_cfg_TestMapIsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arr_in_arr_cfg_TestMapIsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::arr_in_arr_cfg_TestMapSmEntry_DoNotUse*
Arena::CreateMaybeMessage< ::arr_in_arr_cfg_TestMapSmEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arr_in_arr_cfg_TestMapSmEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::arr_in_arr_cfg*
Arena::CreateMaybeMessage< ::arr_in_arr_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arr_in_arr_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::event_reward_item*
Arena::CreateMaybeMessage< ::event_reward_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_reward_item >(arena);
}
template<> PROTOBUF_NOINLINE ::event_rule_item*
Arena::CreateMaybeMessage< ::event_rule_item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_rule_item >(arena);
}
template<> PROTOBUF_NOINLINE ::event_cfg*
Arena::CreateMaybeMessage< ::event_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::event_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::keep_or_strip_empty_list_cfg*
Arena::CreateMaybeMessage< ::keep_or_strip_empty_list_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::keep_or_strip_empty_list_cfg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
