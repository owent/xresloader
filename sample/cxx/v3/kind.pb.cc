// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#include "kind.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr test_msg_verifier::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : test_id_1_{0u},
        test_id_2_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR test_msg_verifier::test_msg_verifier(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct test_msg_verifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR test_msg_verifierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~test_msg_verifierDefaultTypeInternal() {}
  union {
    test_msg_verifier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 test_msg_verifierDefaultTypeInternal _test_msg_verifier_default_instance_;

inline constexpr role_upgrade_cfg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_{0u},
        level_{0u},
        costvalue_{::int64_t{0}},
        costtype_{0u},
        scoreadd_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR role_upgrade_cfg::role_upgrade_cfg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct role_upgrade_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR role_upgrade_cfgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~role_upgrade_cfgDefaultTypeInternal() {}
  union {
    role_upgrade_cfg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR process_by_script_TestMapIsEntry_DoNotUse::process_by_script_TestMapIsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct process_by_script_TestMapIsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR process_by_script_TestMapIsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~process_by_script_TestMapIsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    process_by_script_TestMapIsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 process_by_script_TestMapIsEntry_DoNotUseDefaultTypeInternal _process_by_script_TestMapIsEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR process_by_script_MapU32StringEntry_DoNotUse::process_by_script_MapU32StringEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct process_by_script_MapU32StringEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR process_by_script_MapU32StringEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~process_by_script_MapU32StringEntry_DoNotUseDefaultTypeInternal() {}
  union {
    process_by_script_MapU32StringEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 process_by_script_MapU32StringEntry_DoNotUseDefaultTypeInternal _process_by_script_MapU32StringEntry_DoNotUse_default_instance_;

inline constexpr event_rule_item::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rule_id_{0u},
        rule_param_{0u},
        nested_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR event_rule_item::event_rule_item(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct event_rule_itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR event_rule_itemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~event_rule_itemDefaultTypeInternal() {}
  union {
    event_rule_item _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 event_rule_itemDefaultTypeInternal _event_rule_item_default_instance_;

inline constexpr event_reward_item::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : item_id_{0u},
        item_count_{0u},
        nested_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR event_reward_item::event_reward_item(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct event_reward_itemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR event_reward_itemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~event_reward_itemDefaultTypeInternal() {}
  union {
    event_reward_item _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 event_reward_itemDefaultTypeInternal _event_reward_item_default_instance_;

inline constexpr combine_id::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : prefix_{0u},
        id_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR combine_id::combine_id(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct combine_idDefaultTypeInternal {
  PROTOBUF_CONSTEXPR combine_idDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~combine_idDefaultTypeInternal() {}
  union {
    combine_id _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 combine_idDefaultTypeInternal _combine_id_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapIsEntry_DoNotUse::arr_in_arr_cfg_TestMapIsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    arr_in_arr_cfg_TestMapIsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_cfg_TestMapIsEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR process_by_script_TestMapSmEntry_DoNotUse::process_by_script_TestMapSmEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct process_by_script_TestMapSmEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR process_by_script_TestMapSmEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~process_by_script_TestMapSmEntry_DoNotUseDefaultTypeInternal() {}
  union {
    process_by_script_TestMapSmEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 process_by_script_TestMapSmEntry_DoNotUseDefaultTypeInternal _process_by_script_TestMapSmEntry_DoNotUse_default_instance_;

inline constexpr large_file_test::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        szvalue_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_id_{nullptr},
        id_{0u},
        i32value_{0},
        u64value_{::uint64_t{0u}},
        f64value_{0},
        f32value_{0} {}

template <typename>
PROTOBUF_CONSTEXPR large_file_test::large_file_test(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct large_file_testDefaultTypeInternal {
  PROTOBUF_CONSTEXPR large_file_testDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~large_file_testDefaultTypeInternal() {}
  union {
    large_file_test _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 large_file_testDefaultTypeInternal _large_file_test_default_instance_;

inline constexpr keep_or_strip_empty_list_cfg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : array_msg_{},
        array_plain_msg_{},
        array_int32_{},
        _array_int32_cached_byte_size_{0},
        array_int64_{},
        _array_int64_cached_byte_size_{0},
        id_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR keep_or_strip_empty_list_cfg::keep_or_strip_empty_list_cfg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct keep_or_strip_empty_list_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR keep_or_strip_empty_list_cfgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~keep_or_strip_empty_list_cfgDefaultTypeInternal() {}
  union {
    keep_or_strip_empty_list_cfg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 keep_or_strip_empty_list_cfgDefaultTypeInternal _keep_or_strip_empty_list_cfg_default_instance_;

inline constexpr event_cfg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_arr_{},
        test_empty_arr_{},
        rule_{nullptr},
        specify_field_{nullptr},
        id_{0u},
        process_{0u},
        reward_{},
        unlock_type_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR event_cfg::event_cfg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct event_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR event_cfgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~event_cfgDefaultTypeInternal() {}
  union {
    event_cfg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 event_cfgDefaultTypeInternal _event_cfg_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapSmEntry_DoNotUse::arr_in_arr_cfg_TestMapSmEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal() {}
  union {
    arr_in_arr_cfg_TestMapSmEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_cfg_TestMapSmEntry_DoNotUseDefaultTypeInternal _arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_;

inline constexpr role_cfg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_array_{},
        test_plain_enum_array_{},
        _test_plain_enum_array_cached_byte_size_{0},
        convert_timepoint_arr_{},
        origin_timepoint_arr_{},
        convert_duration_arr_{},
        origin_duration_arr_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        int_as_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        origin_timepoint_one_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        origin_duration_one_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dep_test_{nullptr},
        convert_timepoint_one_{nullptr},
        convert_duration_one_{nullptr},
        id_{0u},
        unlock_level_{0u},
        cost_type_{0u},
        cost_value_{0} {}

template <typename>
PROTOBUF_CONSTEXPR role_cfg::role_cfg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct role_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR role_cfgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~role_cfgDefaultTypeInternal() {}
  union {
    role_cfg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 role_cfgDefaultTypeInternal _role_cfg_default_instance_;

inline constexpr process_by_script::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        map_u32_string_{},
        test_map_is_{},
        test_map_sm_{},
        human_readable_date_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        date_{nullptr},
        id_id_{nullptr},
        id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR process_by_script::process_by_script(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct process_by_scriptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR process_by_scriptDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~process_by_scriptDefaultTypeInternal() {}
  union {
    process_by_script _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 process_by_scriptDefaultTypeInternal _process_by_script_default_instance_;

inline constexpr arr_in_arr_test_nested_message::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : test_onof_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR arr_in_arr_test_nested_message::arr_in_arr_test_nested_message(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct arr_in_arr_test_nested_messageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_test_nested_messageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_test_nested_messageDefaultTypeInternal() {}
  union {
    arr_in_arr_test_nested_message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_test_nested_messageDefaultTypeInternal _arr_in_arr_test_nested_message_default_instance_;

inline constexpr arr_in_arr::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : int_arr_{},
        _int_arr_cached_byte_size_{0},
        str_arr_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        test_onof_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR arr_in_arr::arr_in_arr(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct arr_in_arrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arrDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arrDefaultTypeInternal() {}
  union {
    arr_in_arr _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arrDefaultTypeInternal _arr_in_arr_default_instance_;

inline constexpr arr_in_arr_cfg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        arr_{},
        test_plain_int_arr_{},
        _test_plain_int_arr_cached_byte_size_{0},
        test_plain_enum_arr_{},
        _test_plain_enum_arr_cached_byte_size_{0},
        test_plain_msg_arr_{},
        test_map_is_{},
        test_map_sm_{},
        test_plain_msg_{nullptr},
        id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR arr_in_arr_cfg::arr_in_arr_cfg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct arr_in_arr_cfgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR arr_in_arr_cfgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~arr_in_arr_cfgDefaultTypeInternal() {}
  union {
    arr_in_arr_cfg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 arr_in_arr_cfgDefaultTypeInternal _arr_in_arr_cfg_default_instance_;
static ::_pb::Metadata file_level_metadata_kind_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kind_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kind_2eproto = nullptr;
const ::uint32_t TableStruct_kind_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.unlock_level_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.cost_type_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.cost_value_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.dep_test_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.test_array_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.int_as_string_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.test_plain_enum_array_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_timepoint_one_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_timepoint_one_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_duration_one_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_duration_one_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_timepoint_arr_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_timepoint_arr_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.convert_duration_arr_),
    PROTOBUF_FIELD_OFFSET(::role_cfg, _impl_.origin_duration_arr_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.costtype_),
    PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.costvalue_),
    PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _impl_.scoreadd_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_test_nested_message, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_test_nested_message, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_test_nested_message, _impl_.test_onof_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::arr_in_arr, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.int_arr_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.str_arr_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_.test_onof_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::test_msg_verifier, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::test_msg_verifier, _impl_.test_id_1_),
    PROTOBUF_FIELD_OFFSET(::test_msg_verifier, _impl_.test_id_2_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.arr_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_int_arr_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_enum_arr_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_msg_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_plain_msg_arr_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_map_is_),
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_cfg, _impl_.test_map_sm_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::event_reward_item, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_.item_id_),
    PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_.item_count_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_.nested_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::event_rule_item, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_.rule_id_),
    PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_.rule_param_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_.nested_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.process_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.rule_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.specify_field_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.test_arr_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.test_empty_arr_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.reward_),
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_.unlock_type_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_msg_),
    PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_plain_msg_),
    PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_int32_),
    PROTOBUF_FIELD_OFFSET(::keep_or_strip_empty_list_cfg, _impl_.array_int64_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::combine_id, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::combine_id, _impl_.prefix_),
    PROTOBUF_FIELD_OFFSET(::combine_id, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::process_by_script_MapU32StringEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::process_by_script_MapU32StringEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::process_by_script_MapU32StringEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::process_by_script_MapU32StringEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapIsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapIsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapIsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapIsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapSmEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapSmEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapSmEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::process_by_script_TestMapSmEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::process_by_script, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_.map_u32_string_),
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_.human_readable_date_),
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_.date_),
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_.test_map_is_),
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_.test_map_sm_),
    PROTOBUF_FIELD_OFFSET(::process_by_script, _impl_.id_id_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::large_file_test, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_.i32value_),
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_.u64value_),
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_.f64value_),
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_.f32value_),
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_.szvalue_),
    PROTOBUF_FIELD_OFFSET(::large_file_test, _impl_.id_id_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 25, -1, sizeof(::role_cfg)},
        {42, -1, -1, sizeof(::role_upgrade_cfg)},
        {55, -1, -1, sizeof(::arr_in_arr_test_nested_message)},
        {66, -1, -1, sizeof(::arr_in_arr)},
        {80, -1, -1, sizeof(::test_msg_verifier)},
        {90, 100, -1, sizeof(::arr_in_arr_cfg_TestMapIsEntry_DoNotUse)},
        {102, 112, -1, sizeof(::arr_in_arr_cfg_TestMapSmEntry_DoNotUse)},
        {114, 130, -1, sizeof(::arr_in_arr_cfg)},
        {138, -1, -1, sizeof(::event_reward_item)},
        {151, -1, -1, sizeof(::event_rule_item)},
        {164, 185, -1, sizeof(::event_cfg)},
        {196, -1, -1, sizeof(::keep_or_strip_empty_list_cfg)},
        {209, -1, -1, sizeof(::combine_id)},
        {219, 229, -1, sizeof(::process_by_script_MapU32StringEntry_DoNotUse)},
        {231, 241, -1, sizeof(::process_by_script_TestMapIsEntry_DoNotUse)},
        {243, 253, -1, sizeof(::process_by_script_TestMapSmEntry_DoNotUse)},
        {255, 270, -1, sizeof(::process_by_script)},
        {277, 292, -1, sizeof(::large_file_test)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_role_cfg_default_instance_._instance,
    &::_role_upgrade_cfg_default_instance_._instance,
    &::_arr_in_arr_test_nested_message_default_instance_._instance,
    &::_arr_in_arr_default_instance_._instance,
    &::_test_msg_verifier_default_instance_._instance,
    &::_arr_in_arr_cfg_TestMapIsEntry_DoNotUse_default_instance_._instance,
    &::_arr_in_arr_cfg_TestMapSmEntry_DoNotUse_default_instance_._instance,
    &::_arr_in_arr_cfg_default_instance_._instance,
    &::_event_reward_item_default_instance_._instance,
    &::_event_rule_item_default_instance_._instance,
    &::_event_cfg_default_instance_._instance,
    &::_keep_or_strip_empty_list_cfg_default_instance_._instance,
    &::_combine_id_default_instance_._instance,
    &::_process_by_script_MapU32StringEntry_DoNotUse_default_instance_._instance,
    &::_process_by_script_TestMapIsEntry_DoNotUse_default_instance_._instance,
    &::_process_by_script_TestMapSmEntry_DoNotUse_default_instance_._instance,
    &::_process_by_script_default_instance_._instance,
    &::_large_file_test_default_instance_._instance,
};
const char descriptor_table_protodef_kind_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nkind.proto\032\020xresloader.proto\032\023xresload"
    "er_ue.proto\032\020dependency.proto\032\020dep_level"
    "2.proto\032\036google/protobuf/duration.proto\032"
    "\037google/protobuf/timestamp.proto\"\223\005\n\010rol"
    "e_cfg\022\n\n\002id\030\001 \001(\r\022\024\n\014unlock_level\030\002 \001(\r\022"
    "\021\n\tcost_type\030\003 \001(\r\022\022\n\ncost_value\030\004 \001(\005\022\014"
    "\n\004name\030\005 \001(\t\022\032\n\010dep_test\030\n \001(\0132\010.dep_cfg"
    "\022\022\n\ntest_array\030\013 \003(\t\022\025\n\rint_as_string\030\014 "
    "\001(\t\022)\n\025test_plain_enum_array\030\r \003(\0162\n.cos"
    "t_type\022R\n\025convert_timepoint_one\030\025 \001(\0132\032."
    "google.protobuf.TimestampB\027\302\?\024origin_tim"
    "epoint_one\022\034\n\024origin_timepoint_one\030\026 \001(\t"
    "\022O\n\024convert_duration_one\030\027 \001(\0132\031.google."
    "protobuf.DurationB\026\302\?\023origin_duration_on"
    "e\022\033\n\023origin_duration_one\030\030 \001(\t\022R\n\025conver"
    "t_timepoint_arr\030\031 \003(\0132\032.google.protobuf."
    "TimestampB\027\302\?\024origin_timepoint_arr\022\034\n\024or"
    "igin_timepoint_arr\030\032 \003(\t\022O\n\024convert_dura"
    "tion_arr\030\033 \003(\0132\031.google.protobuf.Duratio"
    "nB\026\302\?\023origin_duration_arr\022\033\n\023origin_dura"
    "tion_arr\030\034 \003(\t\"\327\001\n\020role_upgrade_cfg\022\037\n\002I"
    "d\030\001 \001(\rB\023\312>\014custom_rule3\350D\350\007\022\022\n\005Level\030\002 "
    "\001(\rB\003\350D\001\0226\n\010CostType\030\003 \001(\rB$\312>\014custom_ru"
    "le1\232\?\022Refer to cost_type\022\021\n\tCostValue\030\004 "
    "\001(\003\022\020\n\010ScoreAdd\030\005 \001(\005:1\312>%Test role_upgr"
    "ade_cfg with multi keys\352D\006helper\"\277\004\n\narr"
    "_in_arr\022-\n\004name\030\001 \001(\tB\037\232\?\034This is a test"
    " name in array\022\017\n\007int_arr\030\002 \003(\005\022\017\n\007str_a"
    "rr\030\003 \003(\t\022#\n\016test_info_role\030\013 \001(\0132\t.role_"
    "cfgH\000\0222\n\025test_role_upgrade_cfg\030\014 \001(\0132\021.r"
    "ole_upgrade_cfgH\000\032\373\001\n\023test_nested_messag"
    "e\0222\n\035test_nested_message_info_role\030\013 \001(\013"
    "2\t.role_cfgH\000\022A\n$test_nested_message_rol"
    "e_upgrade_cfg\030\014 \001(\0132\021.role_upgrade_cfgH\000"
    "\"`\n\020test_nested_enum\022%\n!EN_TEST_NESTED_M"
    "ESSAGE_ENUM_VAL_1\020\000\022%\n!EN_TEST_NESTED_ME"
    "SSAGE_ENUM_VAL_2\020{B\013\n\ttest_onof\"P\n\020test_"
    "nested_enum\022\035\n\031EN_TEST_NESTED_ENUM_VAL_1"
    "\020\000\022\035\n\031EN_TEST_NESTED_ENUM_VAL_2\020{:*\352D\006he"
    "lper\360D\001\202E\033Engine/CompositeDataTable.hB\013\n"
    "\ttest_onof\"V\n\021test_msg_verifier\022\022\n\ttest_"
    "id_1\030\221N \001(\r\022&\n\ttest_id_2\030\222N \001(\rB\022\242\?\017\346\265\213\350"
    "\257\225ID\345\210\253\345\220\2152:\005\242\?\002-^\"\362\003\n\016arr_in_arr_cfg\022\037\n"
    "\002id\030\001 \001(\rB\023\232\?\rThis is a Key\350D\001\022\030\n\003arr\030\002 "
    "\003(\0132\013.arr_in_arr\022\032\n\022test_plain_int_arr\030\003"
    " \003(\005\022\'\n\023test_plain_enum_arr\030\004 \003(\0162\n.cost"
    "_type\0220\n\016test_plain_msg\030\005 \001(\0132\022.test_msg"
    "_verifierB\004\262\?\001&\022.\n\022test_plain_msg_arr\030\006 "
    "\003(\0132\022.test_msg_verifier\0223\n\013test_map_is\030\007"
    " \003(\0132\036.arr_in_arr_cfg.TestMapIsEntry\0229\n\013"
    "test_map_sm\030\010 \003(\0132\036.arr_in_arr_cfg.TestM"
    "apSmEntryB\004\262\?\001|\0320\n\016TestMapIsEntry\022\013\n\003key"
    "\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\032;\n\016TestMapSmEn"
    "try\022\013\n\003key\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t.dep2_c"
    "fg:\0028\001:\037\312>\023Test arr_in_arr_cfg\352D\006helper\""
    "\243\001\n\021event_reward_item\022\017\n\007item_id\030\001 \001(\r\022\022"
    "\n\nitem_count\030\002 \001(\r\022&\n\013nested_note\030\013 \001(\tB"
    "\017\242\?\014\346\217\217\350\277\260\346\226\207\346\234\254H\000\0227\n\020nested_enum_type\030\014"
    " \001(\0162\n.cost_typeB\017\242\?\014\350\264\247\345\270\201\347\261\273\345\236\213H\000B\010\n\006n"
    "ested\"\241\001\n\017event_rule_item\022\017\n\007rule_id\030\001 \001"
    "(\r\022\022\n\nrule_param\030\002 \001(\r\022&\n\013nested_note\030\013 "
    "\001(\tB\017\242\?\014\346\217\217\350\277\260\346\226\207\346\234\254H\000\0227\n\020nested_enum_ty"
    "pe\030\014 \001(\0162\n.cost_typeB\017\242\?\014\350\264\247\345\270\201\347\261\273\345\236\213H\000B"
    "\010\n\006nested\"\244\004\n\tevent_cfg\022.\n\002id\030\001 \001(\rB\"\312>\014"
    "custom_rule4\322>\nunique_tag\330>\001\350Dd\022$\n\007proce"
    "ss\030\002 \001(\rB\023\322>\nunique_tag\330>\001\350D\001\022\036\n\004rule\030\006 "
    "\001(\0132\020.event_rule_item\022\'\n\rspecify_field\030\007"
    " \001(\0132\020.event_rule_item\0223\n\004item\030\013 \001(\0132\022.e"
    "vent_reward_itemB\017\242\?\014\345\245\226\345\212\261\351\201\223\345\205\267H\000\022#\n\010u"
    "ser_exp\030\014 \001(\003B\017\242\?\014\345\245\226\345\212\261\347\273\217\351\252\214H\000\022\037\n\004note"
    "\030\r \001(\tB\017\242\?\014\346\217\217\350\277\260\346\226\207\346\234\254H\000\0220\n\tenum_type\030\016"
    " \001(\0162\n.cost_typeB\017\242\?\014\350\264\247\345\270\201\347\261\273\345\236\213H\000\022%\n\nu"
    "ser_level\0303 \001(\rB\017\242\?\014\347\216\251\345\256\266\347\255\211\347\272\247H\001\022(\n\010te"
    "st_arr\030[ \003(\0132\020.event_rule_itemB\004\262\?\001;\022.\n\016"
    "test_empty_arr\030\\ \003(\0132\020.event_rule_itemB\004"
    "\262\?\001;:,\312> Test event_cfg with oneof field"
    "s\352D\006helperB\r\n\006reward\022\003\330>\001B\r\n\013unlock_type"
    "\"\266\001\n\034keep_or_strip_empty_list_cfg\022\037\n\002id\030"
    "\001 \001(\rB\023\232\?\rThis is a Key\350D\001\022\034\n\tarray_msg\030"
    "\002 \003(\0132\t.dep2_cfg\022\"\n\017array_plain_msg\030\003 \003("
    "\0132\t.dep2_cfg\022\023\n\013array_int32\030\004 \003(\005\022\023\n\013arr"
    "ay_int64\030\005 \003(\003:\t\352D\006helper\"4\n\ncombine_id\022"
    "\016\n\006prefix\030\001 \001(\r\022\026\n\002id\030\002 \001(\rB\n\312>\0070-99999\""
    "\333\003\n\021process_by_script\022\n\n\002id\030\001 \001(\r\022<\n\016map"
    "_u32_string\030\002 \003(\0132$.process_by_script.Ma"
    "pU32StringEntry\022\033\n\023human_readable_date\030\003"
    " \001(\t\022(\n\004date\030\004 \001(\0132\032.google.protobuf.Tim"
    "estamp\0226\n\013test_map_is\030\007 \003(\0132!.process_by"
    "_script.TestMapIsEntry\022<\n\013test_map_sm\030\010 "
    "\003(\0132!.process_by_script.TestMapSmEntryB\004"
    "\262\?\001|\022\033\n\005id_id\030\351\007 \001(\0132\013.combine_id\0323\n\021Map"
    "U32StringEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001"
    "(\t:\0028\001\0320\n\016TestMapIsEntry\022\013\n\003key\030\001 \001(\005\022\r\n"
    "\005value\030\002 \001(\t:\0028\001\032;\n\016TestMapSmEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\030\n\005value\030\002 \001(\0132\t.dep2_cfg:\0028\001\"\222\001"
    "\n\017large_file_test\022\n\n\002id\030\001 \001(\r\022\020\n\010i32valu"
    "e\030\002 \001(\005\022\020\n\010u64value\030\003 \001(\004\022\020\n\010f64value\030\004 "
    "\001(\001\022\020\n\010f32value\030\005 \001(\002\022\017\n\007szvalue\030\006 \001(\t\022\032"
    "\n\005id_id\030\007 \001(\0132\013.combine_idb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kind_2eproto_deps[6] =
    {
        &::descriptor_table_dep_5flevel2_2eproto,
        &::descriptor_table_dependency_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_xresloader_2eproto,
        &::descriptor_table_xresloader_5fue_2eproto,
};
static ::absl::once_flag descriptor_table_kind_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_kind_2eproto = {
    false,
    false,
    3954,
    descriptor_table_protodef_kind_2eproto,
    "kind.proto",
    &descriptor_table_kind_2eproto_once,
    descriptor_table_kind_2eproto_deps,
    6,
    18,
    schemas,
    file_default_instances,
    TableStruct_kind_2eproto::offsets,
    file_level_metadata_kind_2eproto,
    file_level_enum_descriptors_kind_2eproto,
    file_level_service_descriptors_kind_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_kind_2eproto_getter() {
  return &descriptor_table_kind_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_kind_2eproto(&descriptor_table_kind_2eproto);
const ::google::protobuf::EnumDescriptor* arr_in_arr_test_nested_message_test_nested_enum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kind_2eproto);
  return file_level_enum_descriptors_kind_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t arr_in_arr_test_nested_message_test_nested_enum_internal_data_[] = {
    65536u, 65536u, 123u, };
bool arr_in_arr_test_nested_message_test_nested_enum_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, arr_in_arr_test_nested_message_test_nested_enum_internal_data_);
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::EN_TEST_NESTED_MESSAGE_ENUM_VAL_1;
constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::EN_TEST_NESTED_MESSAGE_ENUM_VAL_2;
constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::test_nested_enum_MIN;
constexpr arr_in_arr_test_nested_message_test_nested_enum arr_in_arr_test_nested_message::test_nested_enum_MAX;
constexpr int arr_in_arr_test_nested_message::test_nested_enum_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* arr_in_arr_test_nested_enum_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kind_2eproto);
  return file_level_enum_descriptors_kind_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t arr_in_arr_test_nested_enum_internal_data_[] = {
    65536u, 65536u, 123u, };
bool arr_in_arr_test_nested_enum_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, arr_in_arr_test_nested_enum_internal_data_);
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr arr_in_arr_test_nested_enum arr_in_arr::EN_TEST_NESTED_ENUM_VAL_1;
constexpr arr_in_arr_test_nested_enum arr_in_arr::EN_TEST_NESTED_ENUM_VAL_2;
constexpr arr_in_arr_test_nested_enum arr_in_arr::test_nested_enum_MIN;
constexpr arr_in_arr_test_nested_enum arr_in_arr::test_nested_enum_MAX;
constexpr int arr_in_arr::test_nested_enum_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class role_cfg::_Internal {
 public:
  using HasBits = decltype(std::declval<role_cfg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(role_cfg, _impl_._has_bits_);
  static const ::dep_cfg& dep_test(const role_cfg* msg);
  static void set_has_dep_test(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& convert_timepoint_one(const role_cfg* msg);
  static void set_has_convert_timepoint_one(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Duration& convert_duration_one(const role_cfg* msg);
  static void set_has_convert_duration_one(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::dep_cfg& role_cfg::_Internal::dep_test(const role_cfg* msg) {
  return *msg->_impl_.dep_test_;
}
const ::google::protobuf::Timestamp& role_cfg::_Internal::convert_timepoint_one(const role_cfg* msg) {
  return *msg->_impl_.convert_timepoint_one_;
}
const ::google::protobuf::Duration& role_cfg::_Internal::convert_duration_one(const role_cfg* msg) {
  return *msg->_impl_.convert_duration_one_;
}
void role_cfg::clear_dep_test() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.dep_test_ != nullptr) _impl_.dep_test_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void role_cfg::clear_convert_timepoint_one() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.convert_timepoint_one_ != nullptr) _impl_.convert_timepoint_one_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void role_cfg::clear_convert_duration_one() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.convert_duration_one_ != nullptr) _impl_.convert_duration_one_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void role_cfg::clear_convert_timepoint_arr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.convert_timepoint_arr_.Clear();
}
void role_cfg::clear_convert_duration_arr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.convert_duration_arr_.Clear();
}
role_cfg::role_cfg(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:role_cfg)
}
inline PROTOBUF_NDEBUG_INLINE role_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        test_array_{visibility, arena, from.test_array_},
        test_plain_enum_array_{visibility, arena, from.test_plain_enum_array_},
        _test_plain_enum_array_cached_byte_size_{0},
        convert_timepoint_arr_{visibility, arena, from.convert_timepoint_arr_},
        origin_timepoint_arr_{visibility, arena, from.origin_timepoint_arr_},
        convert_duration_arr_{visibility, arena, from.convert_duration_arr_},
        origin_duration_arr_{visibility, arena, from.origin_duration_arr_},
        name_(arena, from.name_),
        int_as_string_(arena, from.int_as_string_),
        origin_timepoint_one_(arena, from.origin_timepoint_one_),
        origin_duration_one_(arena, from.origin_duration_one_) {}

role_cfg::role_cfg(
    ::google::protobuf::Arena* arena,
    const role_cfg& from)
    : ::google::protobuf::Message(arena) {
  role_cfg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.dep_test_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dep_cfg>(arena, *from._impl_.dep_test_)
                : nullptr;
  _impl_.convert_timepoint_one_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.convert_timepoint_one_)
                : nullptr;
  _impl_.convert_duration_one_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Duration>(arena, *from._impl_.convert_duration_one_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, cost_value_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::cost_value_));

  // @@protoc_insertion_point(copy_constructor:role_cfg)
}
inline PROTOBUF_NDEBUG_INLINE role_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        test_array_{visibility, arena},
        test_plain_enum_array_{visibility, arena},
        _test_plain_enum_array_cached_byte_size_{0},
        convert_timepoint_arr_{visibility, arena},
        origin_timepoint_arr_{visibility, arena},
        convert_duration_arr_{visibility, arena},
        origin_duration_arr_{visibility, arena},
        name_(arena),
        int_as_string_(arena),
        origin_timepoint_one_(arena),
        origin_duration_one_(arena) {}

inline void role_cfg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dep_test_),
           0,
           offsetof(Impl_, cost_value_) -
               offsetof(Impl_, dep_test_) +
               sizeof(Impl_::cost_value_));
}
role_cfg::~role_cfg() {
  // @@protoc_insertion_point(destructor:role_cfg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void role_cfg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.int_as_string_.Destroy();
  _impl_.origin_timepoint_one_.Destroy();
  _impl_.origin_duration_one_.Destroy();
  delete _impl_.dep_test_;
  delete _impl_.convert_timepoint_one_;
  delete _impl_.convert_duration_one_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void role_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:role_cfg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.test_array_.Clear();
  _impl_.test_plain_enum_array_.Clear();
  _impl_.convert_timepoint_arr_.Clear();
  _impl_.origin_timepoint_arr_.Clear();
  _impl_.convert_duration_arr_.Clear();
  _impl_.origin_duration_arr_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.int_as_string_.ClearToEmpty();
  _impl_.origin_timepoint_one_.ClearToEmpty();
  _impl_.origin_duration_one_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dep_test_ != nullptr);
      _impl_.dep_test_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.convert_timepoint_one_ != nullptr);
      _impl_.convert_timepoint_one_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.convert_duration_one_ != nullptr);
      _impl_.convert_duration_one_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cost_value_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.cost_value_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* role_cfg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 5, 138, 2> role_cfg::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(role_cfg, _impl_._has_bits_),
    0, // no _extensions_
    28, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4027572704,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_role_cfg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_cfg, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.id_)}},
    // uint32 unlock_level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_cfg, _impl_.unlock_level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.unlock_level_)}},
    // uint32 cost_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_cfg, _impl_.cost_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.cost_type_)}},
    // int32 cost_value = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_cfg, _impl_.cost_value_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.cost_value_)}},
    // string name = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .dep_cfg dep_test = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 0, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.dep_test_)}},
    // repeated string test_array = 11;
    {::_pbi::TcParser::FastUR1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.test_array_)}},
    // string int_as_string = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.int_as_string_)}},
    // repeated .cost_type test_plain_enum_array = 13;
    {::_pbi::TcParser::FastV32P1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.test_plain_enum_array_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
    {::_pbi::TcParser::FastMtS2,
     {426, 1, 1, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_timepoint_one_)}},
    // string origin_timepoint_one = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_timepoint_one_)}},
    // .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
    {::_pbi::TcParser::FastMtS2,
     {442, 2, 2, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_duration_one_)}},
    // string origin_duration_one = 24;
    {::_pbi::TcParser::FastUS2,
     {450, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_duration_one_)}},
    // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
    {::_pbi::TcParser::FastMtR2,
     {458, 63, 3, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_timepoint_arr_)}},
    // repeated string origin_timepoint_arr = 26;
    {::_pbi::TcParser::FastUR2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_timepoint_arr_)}},
    // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
    {::_pbi::TcParser::FastMtR2,
     {474, 63, 4, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_duration_arr_)}},
    // repeated string origin_duration_arr = 28;
    {::_pbi::TcParser::FastUR2,
     {482, 63, 0, PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_duration_arr_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 unlock_level = 2;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.unlock_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 cost_type = 3;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.cost_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 cost_value = 4;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.cost_value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string name = 5;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dep_cfg dep_test = 10;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.dep_test_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string test_array = 11;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.test_array_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string int_as_string = 12;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.int_as_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .cost_type test_plain_enum_array = 13;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.test_plain_enum_array_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_timepoint_one_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string origin_timepoint_one = 22;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_timepoint_one_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_duration_one_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string origin_duration_one = 24;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_duration_one_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_timepoint_arr_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string origin_timepoint_arr = 26;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_timepoint_arr_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.convert_duration_arr_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string origin_duration_arr = 28;
    {PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.origin_duration_arr_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dep_cfg>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Duration>()},
  }}, {{
    "\10\0\0\0\0\4\0\12\15\0\0\24\0\23\0\24\0\23\0\0\0\0\0\0"
    "role_cfg"
    "name"
    "test_array"
    "int_as_string"
    "origin_timepoint_one"
    "origin_duration_one"
    "origin_timepoint_arr"
    "origin_duration_arr"
  }},
};

::uint8_t* role_cfg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:role_cfg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // uint32 unlock_level = 2;
  if (this->_internal_unlock_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_unlock_level(), target);
  }

  // uint32 cost_type = 3;
  if (this->_internal_cost_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_cost_type(), target);
  }

  // int32 cost_value = 4;
  if (this->_internal_cost_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_cost_value(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "role_cfg.name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dep_cfg dep_test = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, _Internal::dep_test(this),
        _Internal::dep_test(this).GetCachedSize(), target, stream);
  }

  // repeated string test_array = 11;
  for (int i = 0, n = this->_internal_test_array_size(); i < n; ++i) {
    const auto& s = this->_internal_test_array().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "role_cfg.test_array");
    target = stream->WriteString(11, s, target);
  }

  // string int_as_string = 12;
  if (!this->_internal_int_as_string().empty()) {
    const std::string& _s = this->_internal_int_as_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "role_cfg.int_as_string");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // repeated .cost_type test_plain_enum_array = 13;
  {
    std::size_t byte_size = _impl_._test_plain_enum_array_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(13, _internal_test_plain_enum_array(),
                                       byte_size, target);
    }
  }

  // .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, _Internal::convert_timepoint_one(this),
        _Internal::convert_timepoint_one(this).GetCachedSize(), target, stream);
  }

  // string origin_timepoint_one = 22;
  if (!this->_internal_origin_timepoint_one().empty()) {
    const std::string& _s = this->_internal_origin_timepoint_one();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "role_cfg.origin_timepoint_one");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        23, _Internal::convert_duration_one(this),
        _Internal::convert_duration_one(this).GetCachedSize(), target, stream);
  }

  // string origin_duration_one = 24;
  if (!this->_internal_origin_duration_one().empty()) {
    const std::string& _s = this->_internal_origin_duration_one();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "role_cfg.origin_duration_one");
    target = stream->WriteStringMaybeAliased(24, _s, target);
  }

  // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_convert_timepoint_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_convert_timepoint_arr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string origin_timepoint_arr = 26;
  for (int i = 0, n = this->_internal_origin_timepoint_arr_size(); i < n; ++i) {
    const auto& s = this->_internal_origin_timepoint_arr().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "role_cfg.origin_timepoint_arr");
    target = stream->WriteString(26, s, target);
  }

  // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_convert_duration_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_convert_duration_arr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string origin_duration_arr = 28;
  for (int i = 0, n = this->_internal_origin_duration_arr_size(); i < n; ++i) {
    const auto& s = this->_internal_origin_duration_arr().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "role_cfg.origin_duration_arr");
    target = stream->WriteString(28, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:role_cfg)
  return target;
}

::size_t role_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:role_cfg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string test_array = 11;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_test_array().size());
  for (int i = 0, n = _internal_test_array().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_test_array().Get(i));
  }
  // repeated .cost_type test_plain_enum_array = 13;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_test_plain_enum_array_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_test_plain_enum_array().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._test_plain_enum_array_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // repeated .google.protobuf.Timestamp convert_timepoint_arr = 25 [(.org.xresloader.field_origin_value) = "origin_timepoint_arr"];
  total_size += 2UL * this->_internal_convert_timepoint_arr_size();
  for (const auto& msg : this->_internal_convert_timepoint_arr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string origin_timepoint_arr = 26;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_origin_timepoint_arr().size());
  for (int i = 0, n = _internal_origin_timepoint_arr().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_origin_timepoint_arr().Get(i));
  }
  // repeated .google.protobuf.Duration convert_duration_arr = 27 [(.org.xresloader.field_origin_value) = "origin_duration_arr"];
  total_size += 2UL * this->_internal_convert_duration_arr_size();
  for (const auto& msg : this->_internal_convert_duration_arr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string origin_duration_arr = 28;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_origin_duration_arr().size());
  for (int i = 0, n = _internal_origin_duration_arr().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_origin_duration_arr().Get(i));
  }
  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string int_as_string = 12;
  if (!this->_internal_int_as_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_int_as_string());
  }

  // string origin_timepoint_one = 22;
  if (!this->_internal_origin_timepoint_one().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_origin_timepoint_one());
  }

  // string origin_duration_one = 24;
  if (!this->_internal_origin_duration_one().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_origin_duration_one());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .dep_cfg dep_test = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.dep_test_);
    }

    // .google.protobuf.Timestamp convert_timepoint_one = 21 [(.org.xresloader.field_origin_value) = "origin_timepoint_one"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.convert_timepoint_one_);
    }

    // .google.protobuf.Duration convert_duration_one = 23 [(.org.xresloader.field_origin_value) = "origin_duration_one"];
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.convert_duration_one_);
    }

  }
  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 unlock_level = 2;
  if (this->_internal_unlock_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_unlock_level());
  }

  // uint32 cost_type = 3;
  if (this->_internal_cost_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_cost_type());
  }

  // int32 cost_value = 4;
  if (this->_internal_cost_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cost_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData role_cfg::_class_data_ = {
    role_cfg::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* role_cfg::GetClassData() const {
  return &_class_data_;
}

void role_cfg::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<role_cfg*>(&to_msg);
  auto& from = static_cast<const role_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:role_cfg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_test_array()->MergeFrom(from._internal_test_array());
  _this->_internal_mutable_test_plain_enum_array()->MergeFrom(from._internal_test_plain_enum_array());
  _this->_internal_mutable_convert_timepoint_arr()->MergeFrom(
      from._internal_convert_timepoint_arr());
  _this->_internal_mutable_origin_timepoint_arr()->MergeFrom(from._internal_origin_timepoint_arr());
  _this->_internal_mutable_convert_duration_arr()->MergeFrom(
      from._internal_convert_duration_arr());
  _this->_internal_mutable_origin_duration_arr()->MergeFrom(from._internal_origin_duration_arr());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_int_as_string().empty()) {
    _this->_internal_set_int_as_string(from._internal_int_as_string());
  }
  if (!from._internal_origin_timepoint_one().empty()) {
    _this->_internal_set_origin_timepoint_one(from._internal_origin_timepoint_one());
  }
  if (!from._internal_origin_duration_one().empty()) {
    _this->_internal_set_origin_duration_one(from._internal_origin_duration_one());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_dep_test()->::dep_cfg::MergeFrom(
          from._internal_dep_test());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_convert_timepoint_one()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_convert_timepoint_one());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_convert_duration_one()->::google::protobuf::Duration::MergeFrom(
          from._internal_convert_duration_one());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_unlock_level() != 0) {
    _this->_internal_set_unlock_level(from._internal_unlock_level());
  }
  if (from._internal_cost_type() != 0) {
    _this->_internal_set_cost_type(from._internal_cost_type());
  }
  if (from._internal_cost_value() != 0) {
    _this->_internal_set_cost_value(from._internal_cost_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void role_cfg::CopyFrom(const role_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:role_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool role_cfg::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* role_cfg::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void role_cfg::InternalSwap(role_cfg* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.test_array_.InternalSwap(&other->_impl_.test_array_);
  _impl_.test_plain_enum_array_.InternalSwap(&other->_impl_.test_plain_enum_array_);
  _impl_.convert_timepoint_arr_.InternalSwap(&other->_impl_.convert_timepoint_arr_);
  _impl_.origin_timepoint_arr_.InternalSwap(&other->_impl_.origin_timepoint_arr_);
  _impl_.convert_duration_arr_.InternalSwap(&other->_impl_.convert_duration_arr_);
  _impl_.origin_duration_arr_.InternalSwap(&other->_impl_.origin_duration_arr_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.int_as_string_, &other->_impl_.int_as_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.origin_timepoint_one_, &other->_impl_.origin_timepoint_one_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.origin_duration_one_, &other->_impl_.origin_duration_one_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.cost_value_)
      + sizeof(role_cfg::_impl_.cost_value_)
      - PROTOBUF_FIELD_OFFSET(role_cfg, _impl_.dep_test_)>(
          reinterpret_cast<char*>(&_impl_.dep_test_),
          reinterpret_cast<char*>(&other->_impl_.dep_test_));
}

::google::protobuf::Metadata role_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[0]);
}
// ===================================================================

class role_upgrade_cfg::_Internal {
 public:
};

role_upgrade_cfg::role_upgrade_cfg(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:role_upgrade_cfg)
}
role_upgrade_cfg::role_upgrade_cfg(
    ::google::protobuf::Arena* arena, const role_upgrade_cfg& from)
    : role_upgrade_cfg(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE role_upgrade_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void role_upgrade_cfg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, scoreadd_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::scoreadd_));
}
role_upgrade_cfg::~role_upgrade_cfg() {
  // @@protoc_insertion_point(destructor:role_upgrade_cfg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void role_upgrade_cfg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void role_upgrade_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:role_upgrade_cfg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.scoreadd_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.scoreadd_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* role_upgrade_cfg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> role_upgrade_cfg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_role_upgrade_cfg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 Id = 1 [(.org.xresloader.validator) = "custom_rule3", (.org.xresloader.ue.key_tag) = 1000];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_upgrade_cfg, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.id_)}},
    // uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_upgrade_cfg, _impl_.level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.level_)}},
    // uint32 CostType = 3 [(.org.xresloader.validator) = "custom_rule1", (.org.xresloader.field_description) = "Refer to cost_type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_upgrade_cfg, _impl_.costtype_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.costtype_)}},
    // int64 CostValue = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(role_upgrade_cfg, _impl_.costvalue_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.costvalue_)}},
    // int32 ScoreAdd = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(role_upgrade_cfg, _impl_.scoreadd_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.scoreadd_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 Id = 1 [(.org.xresloader.validator) = "custom_rule3", (.org.xresloader.ue.key_tag) = 1000];
    {PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
    {PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 CostType = 3 [(.org.xresloader.validator) = "custom_rule1", (.org.xresloader.field_description) = "Refer to cost_type"];
    {PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.costtype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int64 CostValue = 4;
    {PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.costvalue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 ScoreAdd = 5;
    {PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.scoreadd_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* role_upgrade_cfg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:role_upgrade_cfg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 Id = 1 [(.org.xresloader.validator) = "custom_rule3", (.org.xresloader.ue.key_tag) = 1000];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_level(), target);
  }

  // uint32 CostType = 3 [(.org.xresloader.validator) = "custom_rule1", (.org.xresloader.field_description) = "Refer to cost_type"];
  if (this->_internal_costtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_costtype(), target);
  }

  // int64 CostValue = 4;
  if (this->_internal_costvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_costvalue(), target);
  }

  // int32 ScoreAdd = 5;
  if (this->_internal_scoreadd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_scoreadd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:role_upgrade_cfg)
  return target;
}

::size_t role_upgrade_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:role_upgrade_cfg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1 [(.org.xresloader.validator) = "custom_rule3", (.org.xresloader.ue.key_tag) = 1000];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 Level = 2 [(.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_level());
  }

  // int64 CostValue = 4;
  if (this->_internal_costvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_costvalue());
  }

  // uint32 CostType = 3 [(.org.xresloader.validator) = "custom_rule1", (.org.xresloader.field_description) = "Refer to cost_type"];
  if (this->_internal_costtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_costtype());
  }

  // int32 ScoreAdd = 5;
  if (this->_internal_scoreadd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_scoreadd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData role_upgrade_cfg::_class_data_ = {
    role_upgrade_cfg::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* role_upgrade_cfg::GetClassData() const {
  return &_class_data_;
}

void role_upgrade_cfg::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<role_upgrade_cfg*>(&to_msg);
  auto& from = static_cast<const role_upgrade_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:role_upgrade_cfg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_costvalue() != 0) {
    _this->_internal_set_costvalue(from._internal_costvalue());
  }
  if (from._internal_costtype() != 0) {
    _this->_internal_set_costtype(from._internal_costtype());
  }
  if (from._internal_scoreadd() != 0) {
    _this->_internal_set_scoreadd(from._internal_scoreadd());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void role_upgrade_cfg::CopyFrom(const role_upgrade_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:role_upgrade_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool role_upgrade_cfg::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* role_upgrade_cfg::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void role_upgrade_cfg::InternalSwap(role_upgrade_cfg* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.scoreadd_)
      + sizeof(role_upgrade_cfg::_impl_.scoreadd_)
      - PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata role_upgrade_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[1]);
}
// ===================================================================

class arr_in_arr_test_nested_message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::arr_in_arr_test_nested_message, _impl_._oneof_case_);
  static const ::role_cfg& test_nested_message_info_role(const arr_in_arr_test_nested_message* msg);
  static const ::role_upgrade_cfg& test_nested_message_role_upgrade_cfg(const arr_in_arr_test_nested_message* msg);
};

const ::role_cfg& arr_in_arr_test_nested_message::_Internal::test_nested_message_info_role(const arr_in_arr_test_nested_message* msg) {
  return *msg->_impl_.test_onof_.test_nested_message_info_role_;
}
const ::role_upgrade_cfg& arr_in_arr_test_nested_message::_Internal::test_nested_message_role_upgrade_cfg(const arr_in_arr_test_nested_message* msg) {
  return *msg->_impl_.test_onof_.test_nested_message_role_upgrade_cfg_;
}
void arr_in_arr_test_nested_message::set_allocated_test_nested_message_info_role(::role_cfg* test_nested_message_info_role) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_test_onof();
  if (test_nested_message_info_role) {
    ::google::protobuf::Arena* submessage_arena = test_nested_message_info_role->GetArena();
    if (message_arena != submessage_arena) {
      test_nested_message_info_role = ::google::protobuf::internal::GetOwnedMessage(message_arena, test_nested_message_info_role, submessage_arena);
    }
    set_has_test_nested_message_info_role();
    _impl_.test_onof_.test_nested_message_info_role_ = test_nested_message_info_role;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_nested_message.test_nested_message_info_role)
}
void arr_in_arr_test_nested_message::set_allocated_test_nested_message_role_upgrade_cfg(::role_upgrade_cfg* test_nested_message_role_upgrade_cfg) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_test_onof();
  if (test_nested_message_role_upgrade_cfg) {
    ::google::protobuf::Arena* submessage_arena = test_nested_message_role_upgrade_cfg->GetArena();
    if (message_arena != submessage_arena) {
      test_nested_message_role_upgrade_cfg = ::google::protobuf::internal::GetOwnedMessage(message_arena, test_nested_message_role_upgrade_cfg, submessage_arena);
    }
    set_has_test_nested_message_role_upgrade_cfg();
    _impl_.test_onof_.test_nested_message_role_upgrade_cfg_ = test_nested_message_role_upgrade_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_nested_message.test_nested_message_role_upgrade_cfg)
}
arr_in_arr_test_nested_message::arr_in_arr_test_nested_message(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:arr_in_arr.test_nested_message)
}
inline PROTOBUF_NDEBUG_INLINE arr_in_arr_test_nested_message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : test_onof_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

arr_in_arr_test_nested_message::arr_in_arr_test_nested_message(
    ::google::protobuf::Arena* arena,
    const arr_in_arr_test_nested_message& from)
    : ::google::protobuf::Message(arena) {
  arr_in_arr_test_nested_message* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (test_onof_case()) {
    case TEST_ONOF_NOT_SET:
      break;
      case kTestNestedMessageInfoRole:
        _impl_.test_onof_.test_nested_message_info_role_ = CreateMaybeMessage<::role_cfg>(arena, *from._impl_.test_onof_.test_nested_message_info_role_);
        break;
      case kTestNestedMessageRoleUpgradeCfg:
        _impl_.test_onof_.test_nested_message_role_upgrade_cfg_ = CreateMaybeMessage<::role_upgrade_cfg>(arena, *from._impl_.test_onof_.test_nested_message_role_upgrade_cfg_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:arr_in_arr.test_nested_message)
}
inline PROTOBUF_NDEBUG_INLINE arr_in_arr_test_nested_message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : test_onof_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void arr_in_arr_test_nested_message::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
arr_in_arr_test_nested_message::~arr_in_arr_test_nested_message() {
  // @@protoc_insertion_point(destructor:arr_in_arr.test_nested_message)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void arr_in_arr_test_nested_message::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_test_onof()) {
    clear_test_onof();
  }
  _impl_.~Impl_();
}

void arr_in_arr_test_nested_message::clear_test_onof() {
// @@protoc_insertion_point(one_of_clear_start:arr_in_arr.test_nested_message)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (test_onof_case()) {
    case kTestNestedMessageInfoRole: {
      if (GetArena() == nullptr) {
        delete _impl_.test_onof_.test_nested_message_info_role_;
      }
      break;
    }
    case kTestNestedMessageRoleUpgradeCfg: {
      if (GetArena() == nullptr) {
        delete _impl_.test_onof_.test_nested_message_role_upgrade_cfg_;
      }
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TEST_ONOF_NOT_SET;
}


PROTOBUF_NOINLINE void arr_in_arr_test_nested_message::Clear() {
// @@protoc_insertion_point(message_clear_start:arr_in_arr.test_nested_message)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_test_onof();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* arr_in_arr_test_nested_message::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> arr_in_arr_test_nested_message::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294964223,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_arr_in_arr_test_nested_message_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .role_cfg test_nested_message_info_role = 11;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_test_nested_message, _impl_.test_onof_.test_nested_message_info_role_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .role_upgrade_cfg test_nested_message_role_upgrade_cfg = 12;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_test_nested_message, _impl_.test_onof_.test_nested_message_role_upgrade_cfg_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::role_cfg>()},
    {::_pbi::TcParser::GetTable<::role_upgrade_cfg>()},
  }}, {{
  }},
};

::uint8_t* arr_in_arr_test_nested_message::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr.test_nested_message)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (test_onof_case()) {
    case kTestNestedMessageInfoRole: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::test_nested_message_info_role(this),
          _Internal::test_nested_message_info_role(this).GetCachedSize(), target, stream);
      break;
    }
    case kTestNestedMessageRoleUpgradeCfg: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, _Internal::test_nested_message_role_upgrade_cfg(this),
          _Internal::test_nested_message_role_upgrade_cfg(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr.test_nested_message)
  return target;
}

::size_t arr_in_arr_test_nested_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arr_in_arr.test_nested_message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (test_onof_case()) {
    // .role_cfg test_nested_message_info_role = 11;
    case kTestNestedMessageInfoRole: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.test_onof_.test_nested_message_info_role_);
      break;
    }
    // .role_upgrade_cfg test_nested_message_role_upgrade_cfg = 12;
    case kTestNestedMessageRoleUpgradeCfg: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.test_onof_.test_nested_message_role_upgrade_cfg_);
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData arr_in_arr_test_nested_message::_class_data_ = {
    arr_in_arr_test_nested_message::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* arr_in_arr_test_nested_message::GetClassData() const {
  return &_class_data_;
}

void arr_in_arr_test_nested_message::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<arr_in_arr_test_nested_message*>(&to_msg);
  auto& from = static_cast<const arr_in_arr_test_nested_message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arr_in_arr.test_nested_message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.test_onof_case()) {
    case kTestNestedMessageInfoRole: {
      _this->_internal_mutable_test_nested_message_info_role()->::role_cfg::MergeFrom(
          from._internal_test_nested_message_info_role());
      break;
    }
    case kTestNestedMessageRoleUpgradeCfg: {
      _this->_internal_mutable_test_nested_message_role_upgrade_cfg()->::role_upgrade_cfg::MergeFrom(
          from._internal_test_nested_message_role_upgrade_cfg());
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void arr_in_arr_test_nested_message::CopyFrom(const arr_in_arr_test_nested_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arr_in_arr.test_nested_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool arr_in_arr_test_nested_message::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* arr_in_arr_test_nested_message::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void arr_in_arr_test_nested_message::InternalSwap(arr_in_arr_test_nested_message* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.test_onof_, other->_impl_.test_onof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata arr_in_arr_test_nested_message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[2]);
}
// ===================================================================

class arr_in_arr::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::arr_in_arr, _impl_._oneof_case_);
  static const ::role_cfg& test_info_role(const arr_in_arr* msg);
  static const ::role_upgrade_cfg& test_role_upgrade_cfg(const arr_in_arr* msg);
};

const ::role_cfg& arr_in_arr::_Internal::test_info_role(const arr_in_arr* msg) {
  return *msg->_impl_.test_onof_.test_info_role_;
}
const ::role_upgrade_cfg& arr_in_arr::_Internal::test_role_upgrade_cfg(const arr_in_arr* msg) {
  return *msg->_impl_.test_onof_.test_role_upgrade_cfg_;
}
void arr_in_arr::set_allocated_test_info_role(::role_cfg* test_info_role) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_test_onof();
  if (test_info_role) {
    ::google::protobuf::Arena* submessage_arena = test_info_role->GetArena();
    if (message_arena != submessage_arena) {
      test_info_role = ::google::protobuf::internal::GetOwnedMessage(message_arena, test_info_role, submessage_arena);
    }
    set_has_test_info_role();
    _impl_.test_onof_.test_info_role_ = test_info_role;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_info_role)
}
void arr_in_arr::set_allocated_test_role_upgrade_cfg(::role_upgrade_cfg* test_role_upgrade_cfg) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_test_onof();
  if (test_role_upgrade_cfg) {
    ::google::protobuf::Arena* submessage_arena = test_role_upgrade_cfg->GetArena();
    if (message_arena != submessage_arena) {
      test_role_upgrade_cfg = ::google::protobuf::internal::GetOwnedMessage(message_arena, test_role_upgrade_cfg, submessage_arena);
    }
    set_has_test_role_upgrade_cfg();
    _impl_.test_onof_.test_role_upgrade_cfg_ = test_role_upgrade_cfg;
  }
  // @@protoc_insertion_point(field_set_allocated:arr_in_arr.test_role_upgrade_cfg)
}
arr_in_arr::arr_in_arr(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:arr_in_arr)
}
inline PROTOBUF_NDEBUG_INLINE arr_in_arr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : int_arr_{visibility, arena, from.int_arr_},
        _int_arr_cached_byte_size_{0},
        str_arr_{visibility, arena, from.str_arr_},
        name_(arena, from.name_),
        test_onof_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

arr_in_arr::arr_in_arr(
    ::google::protobuf::Arena* arena,
    const arr_in_arr& from)
    : ::google::protobuf::Message(arena) {
  arr_in_arr* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (test_onof_case()) {
    case TEST_ONOF_NOT_SET:
      break;
      case kTestInfoRole:
        _impl_.test_onof_.test_info_role_ = CreateMaybeMessage<::role_cfg>(arena, *from._impl_.test_onof_.test_info_role_);
        break;
      case kTestRoleUpgradeCfg:
        _impl_.test_onof_.test_role_upgrade_cfg_ = CreateMaybeMessage<::role_upgrade_cfg>(arena, *from._impl_.test_onof_.test_role_upgrade_cfg_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:arr_in_arr)
}
inline PROTOBUF_NDEBUG_INLINE arr_in_arr::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : int_arr_{visibility, arena},
        _int_arr_cached_byte_size_{0},
        str_arr_{visibility, arena},
        name_(arena),
        test_onof_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void arr_in_arr::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
arr_in_arr::~arr_in_arr() {
  // @@protoc_insertion_point(destructor:arr_in_arr)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void arr_in_arr::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  if (has_test_onof()) {
    clear_test_onof();
  }
  _impl_.~Impl_();
}

void arr_in_arr::clear_test_onof() {
// @@protoc_insertion_point(one_of_clear_start:arr_in_arr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (test_onof_case()) {
    case kTestInfoRole: {
      if (GetArena() == nullptr) {
        delete _impl_.test_onof_.test_info_role_;
      }
      break;
    }
    case kTestRoleUpgradeCfg: {
      if (GetArena() == nullptr) {
        delete _impl_.test_onof_.test_role_upgrade_cfg_;
      }
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TEST_ONOF_NOT_SET;
}


PROTOBUF_NOINLINE void arr_in_arr::Clear() {
// @@protoc_insertion_point(message_clear_start:arr_in_arr)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int_arr_.Clear();
  _impl_.str_arr_.Clear();
  _impl_.name_.ClearToEmpty();
  clear_test_onof();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* arr_in_arr::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 2, 30, 2> arr_in_arr::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294964216,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_arr_in_arr_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.name_)}},
    // repeated int32 int_arr = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.int_arr_)}},
    // repeated string str_arr = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.str_arr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
    {PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated int32 int_arr = 2;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.int_arr_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated string str_arr = 3;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.str_arr_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .role_cfg test_info_role = 11;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.test_onof_.test_info_role_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .role_upgrade_cfg test_role_upgrade_cfg = 12;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr, _impl_.test_onof_.test_role_upgrade_cfg_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::role_cfg>()},
    {::_pbi::TcParser::GetTable<::role_upgrade_cfg>()},
  }}, {{
    "\12\4\0\7\0\0\0\0"
    "arr_in_arr"
    "name"
    "str_arr"
  }},
};

::uint8_t* arr_in_arr::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "arr_in_arr.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated int32 int_arr = 2;
  {
    int byte_size = _impl_._int_arr_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_int_arr(), byte_size, target);
    }
  }

  // repeated string str_arr = 3;
  for (int i = 0, n = this->_internal_str_arr_size(); i < n; ++i) {
    const auto& s = this->_internal_str_arr().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "arr_in_arr.str_arr");
    target = stream->WriteString(3, s, target);
  }

  switch (test_onof_case()) {
    case kTestInfoRole: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::test_info_role(this),
          _Internal::test_info_role(this).GetCachedSize(), target, stream);
      break;
    }
    case kTestRoleUpgradeCfg: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          12, _Internal::test_role_upgrade_cfg(this),
          _Internal::test_role_upgrade_cfg(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr)
  return target;
}

::size_t arr_in_arr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arr_in_arr)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int_arr = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_int_arr())
    ;
    _impl_._int_arr_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated string str_arr = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_str_arr().size());
  for (int i = 0, n = _internal_str_arr().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_str_arr().Get(i));
  }
  // string name = 1 [(.org.xresloader.field_description) = "This is a test name in array"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  switch (test_onof_case()) {
    // .role_cfg test_info_role = 11;
    case kTestInfoRole: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.test_onof_.test_info_role_);
      break;
    }
    // .role_upgrade_cfg test_role_upgrade_cfg = 12;
    case kTestRoleUpgradeCfg: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.test_onof_.test_role_upgrade_cfg_);
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData arr_in_arr::_class_data_ = {
    arr_in_arr::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* arr_in_arr::GetClassData() const {
  return &_class_data_;
}

void arr_in_arr::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<arr_in_arr*>(&to_msg);
  auto& from = static_cast<const arr_in_arr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arr_in_arr)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_int_arr()->MergeFrom(from._internal_int_arr());
  _this->_internal_mutable_str_arr()->MergeFrom(from._internal_str_arr());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.test_onof_case()) {
    case kTestInfoRole: {
      _this->_internal_mutable_test_info_role()->::role_cfg::MergeFrom(
          from._internal_test_info_role());
      break;
    }
    case kTestRoleUpgradeCfg: {
      _this->_internal_mutable_test_role_upgrade_cfg()->::role_upgrade_cfg::MergeFrom(
          from._internal_test_role_upgrade_cfg());
      break;
    }
    case TEST_ONOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void arr_in_arr::CopyFrom(const arr_in_arr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arr_in_arr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool arr_in_arr::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* arr_in_arr::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void arr_in_arr::InternalSwap(arr_in_arr* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.int_arr_.InternalSwap(&other->_impl_.int_arr_);
  _impl_.str_arr_.InternalSwap(&other->_impl_.str_arr_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.test_onof_, other->_impl_.test_onof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata arr_in_arr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[3]);
}
// ===================================================================

class test_msg_verifier::_Internal {
 public:
};

test_msg_verifier::test_msg_verifier(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:test_msg_verifier)
}
test_msg_verifier::test_msg_verifier(
    ::google::protobuf::Arena* arena, const test_msg_verifier& from)
    : test_msg_verifier(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE test_msg_verifier::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void test_msg_verifier::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, test_id_1_),
           0,
           offsetof(Impl_, test_id_2_) -
               offsetof(Impl_, test_id_1_) +
               sizeof(Impl_::test_id_2_));
}
test_msg_verifier::~test_msg_verifier() {
  // @@protoc_insertion_point(destructor:test_msg_verifier)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void test_msg_verifier::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void test_msg_verifier::Clear() {
// @@protoc_insertion_point(message_clear_start:test_msg_verifier)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.test_id_1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.test_id_2_) -
      reinterpret_cast<char*>(&_impl_.test_id_1_)) + sizeof(_impl_.test_id_2_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* test_msg_verifier::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 0, 7> test_msg_verifier::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10002, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_test_msg_verifier_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    10001, 0, 1,
    65532, 0,
    65535, 65535
  }}, {{
    // uint32 test_id_1 = 10001;
    {PROTOBUF_FIELD_OFFSET(test_msg_verifier, _impl_.test_id_1_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
    {PROTOBUF_FIELD_OFFSET(test_msg_verifier, _impl_.test_id_2_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* test_msg_verifier::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_msg_verifier)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 test_id_1 = 10001;
  if (this->_internal_test_id_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10001, this->_internal_test_id_1(), target);
  }

  // uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
  if (this->_internal_test_id_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10002, this->_internal_test_id_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_msg_verifier)
  return target;
}

::size_t test_msg_verifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_msg_verifier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 test_id_1 = 10001;
  if (this->_internal_test_id_1() != 0) {
    total_size += 3 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_test_id_1());
  }

  // uint32 test_id_2 = 10002 [(.org.xresloader.field_alias) = "\346\265\213\350\257\225ID\345\210\253\345\220\2152"];
  if (this->_internal_test_id_2() != 0) {
    total_size += 3 + ::_pbi::WireFormatLite::UInt32Size(
                                    this->_internal_test_id_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData test_msg_verifier::_class_data_ = {
    test_msg_verifier::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* test_msg_verifier::GetClassData() const {
  return &_class_data_;
}

void test_msg_verifier::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<test_msg_verifier*>(&to_msg);
  auto& from = static_cast<const test_msg_verifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test_msg_verifier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_test_id_1() != 0) {
    _this->_internal_set_test_id_1(from._internal_test_id_1());
  }
  if (from._internal_test_id_2() != 0) {
    _this->_internal_set_test_id_2(from._internal_test_id_2());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void test_msg_verifier::CopyFrom(const test_msg_verifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_msg_verifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool test_msg_verifier::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* test_msg_verifier::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void test_msg_verifier::InternalSwap(test_msg_verifier* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(test_msg_verifier, _impl_.test_id_2_)
      + sizeof(test_msg_verifier::_impl_.test_id_2_)
      - PROTOBUF_FIELD_OFFSET(test_msg_verifier, _impl_.test_id_1_)>(
          reinterpret_cast<char*>(&_impl_.test_id_1_),
          reinterpret_cast<char*>(&other->_impl_.test_id_1_));
}

::google::protobuf::Metadata test_msg_verifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[4]);
}
// ===================================================================

arr_in_arr_cfg_TestMapIsEntry_DoNotUse::arr_in_arr_cfg_TestMapIsEntry_DoNotUse() {}
arr_in_arr_cfg_TestMapIsEntry_DoNotUse::arr_in_arr_cfg_TestMapIsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata arr_in_arr_cfg_TestMapIsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[5]);
}
// ===================================================================

arr_in_arr_cfg_TestMapSmEntry_DoNotUse::arr_in_arr_cfg_TestMapSmEntry_DoNotUse() {}
arr_in_arr_cfg_TestMapSmEntry_DoNotUse::arr_in_arr_cfg_TestMapSmEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata arr_in_arr_cfg_TestMapSmEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[6]);
}
// ===================================================================

class arr_in_arr_cfg::_Internal {
 public:
  using HasBits = decltype(std::declval<arr_in_arr_cfg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_._has_bits_);
  static const ::test_msg_verifier& test_plain_msg(const arr_in_arr_cfg* msg);
  static void set_has_test_plain_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::test_msg_verifier& arr_in_arr_cfg::_Internal::test_plain_msg(const arr_in_arr_cfg* msg) {
  return *msg->_impl_.test_plain_msg_;
}
void arr_in_arr_cfg::clear_test_map_sm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_map_sm_.Clear();
}
arr_in_arr_cfg::arr_in_arr_cfg(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:arr_in_arr_cfg)
}
inline PROTOBUF_NDEBUG_INLINE arr_in_arr_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        arr_{visibility, arena, from.arr_},
        test_plain_int_arr_{visibility, arena, from.test_plain_int_arr_},
        _test_plain_int_arr_cached_byte_size_{0},
        test_plain_enum_arr_{visibility, arena, from.test_plain_enum_arr_},
        _test_plain_enum_arr_cached_byte_size_{0},
        test_plain_msg_arr_{visibility, arena, from.test_plain_msg_arr_},
        test_map_is_{visibility, arena, from.test_map_is_},
        test_map_sm_{visibility, arena, from.test_map_sm_} {}

arr_in_arr_cfg::arr_in_arr_cfg(
    ::google::protobuf::Arena* arena,
    const arr_in_arr_cfg& from)
    : ::google::protobuf::Message(arena) {
  arr_in_arr_cfg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.test_plain_msg_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::test_msg_verifier>(arena, *from._impl_.test_plain_msg_)
                : nullptr;
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:arr_in_arr_cfg)
}
inline PROTOBUF_NDEBUG_INLINE arr_in_arr_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        arr_{visibility, arena},
        test_plain_int_arr_{visibility, arena},
        _test_plain_int_arr_cached_byte_size_{0},
        test_plain_enum_arr_{visibility, arena},
        _test_plain_enum_arr_cached_byte_size_{0},
        test_plain_msg_arr_{visibility, arena},
        test_map_is_{visibility, arena},
        test_map_sm_{visibility, arena} {}

inline void arr_in_arr_cfg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, test_plain_msg_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, test_plain_msg_) +
               sizeof(Impl_::id_));
}
arr_in_arr_cfg::~arr_in_arr_cfg() {
  // @@protoc_insertion_point(destructor:arr_in_arr_cfg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void arr_in_arr_cfg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.test_plain_msg_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void arr_in_arr_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:arr_in_arr_cfg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arr_.Clear();
  _impl_.test_plain_int_arr_.Clear();
  _impl_.test_plain_enum_arr_.Clear();
  _impl_.test_plain_msg_arr_.Clear();
  _impl_.test_map_is_.Clear();
  _impl_.test_map_sm_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.test_plain_msg_ != nullptr);
    _impl_.test_plain_msg_->Clear();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* arr_in_arr_cfg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 6, 53, 2> arr_in_arr_cfg::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_arr_in_arr_cfg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(arr_in_arr_cfg, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.id_)}},
    // repeated .arr_in_arr arr = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.arr_)}},
    // repeated int32 test_plain_int_arr = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_int_arr_)}},
    // repeated .cost_type test_plain_enum_arr = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_enum_arr_)}},
    // .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 1, PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_msg_)}},
    // repeated .test_msg_verifier test_plain_msg_arr = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_msg_arr_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .arr_in_arr arr = 2;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.arr_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 test_plain_int_arr = 3;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_int_arr_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated .cost_type test_plain_enum_arr = 4;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_enum_arr_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_msg_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .test_msg_verifier test_plain_msg_arr = 6;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_msg_arr_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<int32, string> test_map_is = 7;
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_map_is_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
    {PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_map_sm_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::arr_in_arr>()},
    {::_pbi::TcParser::GetTable<::test_msg_verifier>()},
    {::_pbi::TcParser::GetTable<::test_msg_verifier>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(arr_in_arr_cfg()._impl_.test_map_is_)>(
        1, 0, 0, 5,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(arr_in_arr_cfg()._impl_.test_map_sm_)>(
        1, 0, 0, 9,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::dep2_cfg>},
  }}, {{
    "\16\0\0\0\0\0\0\13\13\0\0\0\0\0\0\0"
    "arr_in_arr_cfg"
    "test_map_is"
    "test_map_sm"
  }},
};

::uint8_t* arr_in_arr_cfg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arr_in_arr_cfg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // repeated .arr_in_arr arr = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_arr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 test_plain_int_arr = 3;
  {
    int byte_size = _impl_._test_plain_int_arr_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_test_plain_int_arr(), byte_size, target);
    }
  }

  // repeated .cost_type test_plain_enum_arr = 4;
  {
    std::size_t byte_size = _impl_._test_plain_enum_arr_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(4, _internal_test_plain_enum_arr(),
                                       byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::test_plain_msg(this),
        _Internal::test_plain_msg(this).GetCachedSize(), target, stream);
  }

  // repeated .test_msg_verifier test_plain_msg_arr = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_plain_msg_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_plain_msg_arr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int32, string> test_map_is = 7;
  if (!_internal_test_map_is().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_test_map_is();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "arr_in_arr_cfg.test_map_is");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "arr_in_arr_cfg.test_map_is");
      }
    }
  }

  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  if (!_internal_test_map_sm().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::dep2_cfg>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::dep2_cfg,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_test_map_sm();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "arr_in_arr_cfg.test_map_sm");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "arr_in_arr_cfg.test_map_sm");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arr_in_arr_cfg)
  return target;
}

::size_t arr_in_arr_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arr_in_arr_cfg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arr_in_arr arr = 2;
  total_size += 1UL * this->_internal_arr_size();
  for (const auto& msg : this->_internal_arr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated int32 test_plain_int_arr = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_test_plain_int_arr())
    ;
    _impl_._test_plain_int_arr_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .cost_type test_plain_enum_arr = 4;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_test_plain_enum_arr_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_test_plain_enum_arr().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 1;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._test_plain_enum_arr_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // repeated .test_msg_verifier test_plain_msg_arr = 6;
  total_size += 1UL * this->_internal_test_plain_msg_arr_size();
  for (const auto& msg : this->_internal_test_plain_msg_arr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // map<int32, string> test_map_is = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_test_map_is_size());
  for (const auto& entry : _internal_test_map_is()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_test_map_sm_size());
  for (const auto& entry : _internal_test_map_sm()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::dep2_cfg,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // .test_msg_verifier test_plain_msg = 5 [(.org.xresloader.field_separator) = "&"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.test_plain_msg_);
  }

  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData arr_in_arr_cfg::_class_data_ = {
    arr_in_arr_cfg::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* arr_in_arr_cfg::GetClassData() const {
  return &_class_data_;
}

void arr_in_arr_cfg::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<arr_in_arr_cfg*>(&to_msg);
  auto& from = static_cast<const arr_in_arr_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arr_in_arr_cfg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_arr()->MergeFrom(
      from._internal_arr());
  _this->_internal_mutable_test_plain_int_arr()->MergeFrom(from._internal_test_plain_int_arr());
  _this->_internal_mutable_test_plain_enum_arr()->MergeFrom(from._internal_test_plain_enum_arr());
  _this->_internal_mutable_test_plain_msg_arr()->MergeFrom(
      from._internal_test_plain_msg_arr());
  _this->_impl_.test_map_is_.MergeFrom(from._impl_.test_map_is_);
  _this->_impl_.test_map_sm_.MergeFrom(from._impl_.test_map_sm_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_test_plain_msg()->::test_msg_verifier::MergeFrom(
        from._internal_test_plain_msg());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void arr_in_arr_cfg::CopyFrom(const arr_in_arr_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arr_in_arr_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool arr_in_arr_cfg::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* arr_in_arr_cfg::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void arr_in_arr_cfg::InternalSwap(arr_in_arr_cfg* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.arr_.InternalSwap(&other->_impl_.arr_);
  _impl_.test_plain_int_arr_.InternalSwap(&other->_impl_.test_plain_int_arr_);
  _impl_.test_plain_enum_arr_.InternalSwap(&other->_impl_.test_plain_enum_arr_);
  _impl_.test_plain_msg_arr_.InternalSwap(&other->_impl_.test_plain_msg_arr_);
  _impl_.test_map_is_.InternalSwap(&other->_impl_.test_map_is_);
  _impl_.test_map_sm_.InternalSwap(&other->_impl_.test_map_sm_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.id_)
      + sizeof(arr_in_arr_cfg::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(arr_in_arr_cfg, _impl_.test_plain_msg_)>(
          reinterpret_cast<char*>(&_impl_.test_plain_msg_),
          reinterpret_cast<char*>(&other->_impl_.test_plain_msg_));
}

::google::protobuf::Metadata arr_in_arr_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[7]);
}
// ===================================================================

class event_reward_item::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::event_reward_item, _impl_._oneof_case_);
};

event_reward_item::event_reward_item(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_reward_item)
}
inline PROTOBUF_NDEBUG_INLINE event_reward_item::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nested_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

event_reward_item::event_reward_item(
    ::google::protobuf::Arena* arena,
    const event_reward_item& from)
    : ::google::protobuf::Message(arena) {
  event_reward_item* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, item_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, item_id_),
           offsetof(Impl_, item_count_) -
               offsetof(Impl_, item_id_) +
               sizeof(Impl_::item_count_));
  switch (nested_case()) {
    case NESTED_NOT_SET:
      break;
      case kNestedNote:
        new (&_impl_.nested_.nested_note_) decltype(_impl_.nested_.nested_note_){arena, from._impl_.nested_.nested_note_};
        break;
      case kNestedEnumType:
        _impl_.nested_.nested_enum_type_ = from._impl_.nested_.nested_enum_type_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:event_reward_item)
}
inline PROTOBUF_NDEBUG_INLINE event_reward_item::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nested_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void event_reward_item::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, item_id_),
           0,
           offsetof(Impl_, item_count_) -
               offsetof(Impl_, item_id_) +
               sizeof(Impl_::item_count_));
}
event_reward_item::~event_reward_item() {
  // @@protoc_insertion_point(destructor:event_reward_item)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void event_reward_item::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_nested()) {
    clear_nested();
  }
  _impl_.~Impl_();
}

void event_reward_item::clear_nested() {
// @@protoc_insertion_point(one_of_clear_start:event_reward_item)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (nested_case()) {
    case kNestedNote: {
      _impl_.nested_.nested_note_.Destroy();
      break;
    }
    case kNestedEnumType: {
      // No need to clear
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}


PROTOBUF_NOINLINE void event_reward_item::Clear() {
// @@protoc_insertion_point(message_clear_start:event_reward_item)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.item_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.item_count_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.item_count_));
  clear_nested();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* event_reward_item::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 0, 37, 2> event_reward_item::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294964220,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_event_reward_item_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 item_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(event_reward_item, _impl_.item_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_count_)}},
    // uint32 item_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(event_reward_item, _impl_.item_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 item_id = 1;
    {PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 item_count = 2;
    {PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    {PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.nested_.nested_note_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    {PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.nested_.nested_enum_type_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\21\0\0\13\0\0\0\0"
    "event_reward_item"
    "nested_note"
  }},
};

::uint8_t* event_reward_item::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_reward_item)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_item_id(), target);
  }

  // uint32 item_count = 2;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_item_count(), target);
  }

  switch (nested_case()) {
    case kNestedNote: {
      const std::string& _s = this->_internal_nested_note();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "event_reward_item.nested_note");
      target = stream->WriteStringMaybeAliased(11, _s, target);
      break;
    }
    case kNestedEnumType: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          12, this->_internal_nested_enum_type(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_reward_item)
  return target;
}

::size_t event_reward_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_reward_item)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_item_id());
  }

  // uint32 item_count = 2;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_item_count());
  }

  switch (nested_case()) {
    // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    case kNestedNote: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_nested_note());
      break;
    }
    // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    case kNestedEnumType: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData event_reward_item::_class_data_ = {
    event_reward_item::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* event_reward_item::GetClassData() const {
  return &_class_data_;
}

void event_reward_item::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<event_reward_item*>(&to_msg);
  auto& from = static_cast<const event_reward_item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:event_reward_item)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  switch (from.nested_case()) {
    case kNestedNote: {
      _this->_internal_set_nested_note(from._internal_nested_note());
      break;
    }
    case kNestedEnumType: {
      _this->_internal_set_nested_enum_type(from._internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void event_reward_item::CopyFrom(const event_reward_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_reward_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool event_reward_item::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* event_reward_item::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void event_reward_item::InternalSwap(event_reward_item* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_count_)
      + sizeof(event_reward_item::_impl_.item_count_)
      - PROTOBUF_FIELD_OFFSET(event_reward_item, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
  swap(_impl_.nested_, other->_impl_.nested_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata event_reward_item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[8]);
}
// ===================================================================

class event_rule_item::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::event_rule_item, _impl_._oneof_case_);
};

event_rule_item::event_rule_item(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_rule_item)
}
inline PROTOBUF_NDEBUG_INLINE event_rule_item::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : nested_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

event_rule_item::event_rule_item(
    ::google::protobuf::Arena* arena,
    const event_rule_item& from)
    : ::google::protobuf::Message(arena) {
  event_rule_item* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rule_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, rule_id_),
           offsetof(Impl_, rule_param_) -
               offsetof(Impl_, rule_id_) +
               sizeof(Impl_::rule_param_));
  switch (nested_case()) {
    case NESTED_NOT_SET:
      break;
      case kNestedNote:
        new (&_impl_.nested_.nested_note_) decltype(_impl_.nested_.nested_note_){arena, from._impl_.nested_.nested_note_};
        break;
      case kNestedEnumType:
        _impl_.nested_.nested_enum_type_ = from._impl_.nested_.nested_enum_type_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:event_rule_item)
}
inline PROTOBUF_NDEBUG_INLINE event_rule_item::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nested_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void event_rule_item::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rule_id_),
           0,
           offsetof(Impl_, rule_param_) -
               offsetof(Impl_, rule_id_) +
               sizeof(Impl_::rule_param_));
}
event_rule_item::~event_rule_item() {
  // @@protoc_insertion_point(destructor:event_rule_item)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void event_rule_item::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_nested()) {
    clear_nested();
  }
  _impl_.~Impl_();
}

void event_rule_item::clear_nested() {
// @@protoc_insertion_point(one_of_clear_start:event_rule_item)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (nested_case()) {
    case kNestedNote: {
      _impl_.nested_.nested_note_.Destroy();
      break;
    }
    case kNestedEnumType: {
      // No need to clear
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = NESTED_NOT_SET;
}


PROTOBUF_NOINLINE void event_rule_item::Clear() {
// @@protoc_insertion_point(message_clear_start:event_rule_item)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rule_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rule_param_) -
      reinterpret_cast<char*>(&_impl_.rule_id_)) + sizeof(_impl_.rule_param_));
  clear_nested();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* event_rule_item::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 4, 0, 35, 2> event_rule_item::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294964220,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_event_rule_item_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 rule_param = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(event_rule_item, _impl_.rule_param_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_param_)}},
    // uint32 rule_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(event_rule_item, _impl_.rule_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 rule_id = 1;
    {PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 rule_param = 2;
    {PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_param_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    {PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.nested_.nested_note_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    {PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.nested_.nested_enum_type_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\17\0\0\13\0\0\0\0"
    "event_rule_item"
    "nested_note"
  }},
};

::uint8_t* event_rule_item::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_rule_item)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 rule_id = 1;
  if (this->_internal_rule_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_rule_id(), target);
  }

  // uint32 rule_param = 2;
  if (this->_internal_rule_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_rule_param(), target);
  }

  switch (nested_case()) {
    case kNestedNote: {
      const std::string& _s = this->_internal_nested_note();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "event_rule_item.nested_note");
      target = stream->WriteStringMaybeAliased(11, _s, target);
      break;
    }
    case kNestedEnumType: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          12, this->_internal_nested_enum_type(), target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_rule_item)
  return target;
}

::size_t event_rule_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_rule_item)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rule_id = 1;
  if (this->_internal_rule_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_rule_id());
  }

  // uint32 rule_param = 2;
  if (this->_internal_rule_param() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_rule_param());
  }

  switch (nested_case()) {
    // string nested_note = 11 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    case kNestedNote: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_nested_note());
      break;
    }
    // .cost_type nested_enum_type = 12 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    case kNestedEnumType: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData event_rule_item::_class_data_ = {
    event_rule_item::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* event_rule_item::GetClassData() const {
  return &_class_data_;
}

void event_rule_item::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<event_rule_item*>(&to_msg);
  auto& from = static_cast<const event_rule_item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:event_rule_item)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rule_id() != 0) {
    _this->_internal_set_rule_id(from._internal_rule_id());
  }
  if (from._internal_rule_param() != 0) {
    _this->_internal_set_rule_param(from._internal_rule_param());
  }
  switch (from.nested_case()) {
    case kNestedNote: {
      _this->_internal_set_nested_note(from._internal_nested_note());
      break;
    }
    case kNestedEnumType: {
      _this->_internal_set_nested_enum_type(from._internal_nested_enum_type());
      break;
    }
    case NESTED_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void event_rule_item::CopyFrom(const event_rule_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_rule_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool event_rule_item::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* event_rule_item::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void event_rule_item::InternalSwap(event_rule_item* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_param_)
      + sizeof(event_rule_item::_impl_.rule_param_)
      - PROTOBUF_FIELD_OFFSET(event_rule_item, _impl_.rule_id_)>(
          reinterpret_cast<char*>(&_impl_.rule_id_),
          reinterpret_cast<char*>(&other->_impl_.rule_id_));
  swap(_impl_.nested_, other->_impl_.nested_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata event_rule_item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[9]);
}
// ===================================================================

class event_cfg::_Internal {
 public:
  using HasBits = decltype(std::declval<event_cfg>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(event_cfg, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::event_cfg, _impl_._oneof_case_);
  static const ::event_rule_item& rule(const event_cfg* msg);
  static void set_has_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::event_rule_item& specify_field(const event_cfg* msg);
  static void set_has_specify_field(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::event_reward_item& item(const event_cfg* msg);
};

const ::event_rule_item& event_cfg::_Internal::rule(const event_cfg* msg) {
  return *msg->_impl_.rule_;
}
const ::event_rule_item& event_cfg::_Internal::specify_field(const event_cfg* msg) {
  return *msg->_impl_.specify_field_;
}
const ::event_reward_item& event_cfg::_Internal::item(const event_cfg* msg) {
  return *msg->_impl_.reward_.item_;
}
void event_cfg::set_allocated_item(::event_reward_item* item) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_reward();
  if (item) {
    ::google::protobuf::Arena* submessage_arena = item->GetArena();
    if (message_arena != submessage_arena) {
      item = ::google::protobuf::internal::GetOwnedMessage(message_arena, item, submessage_arena);
    }
    set_has_item();
    _impl_.reward_.item_ = item;
  }
  // @@protoc_insertion_point(field_set_allocated:event_cfg.item)
}
event_cfg::event_cfg(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:event_cfg)
}
inline PROTOBUF_NDEBUG_INLINE event_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        test_arr_{visibility, arena, from.test_arr_},
        test_empty_arr_{visibility, arena, from.test_empty_arr_},
        reward_{},
        unlock_type_{},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

event_cfg::event_cfg(
    ::google::protobuf::Arena* arena,
    const event_cfg& from)
    : ::google::protobuf::Message(arena) {
  event_cfg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.rule_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::event_rule_item>(arena, *from._impl_.rule_)
                : nullptr;
  _impl_.specify_field_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::event_rule_item>(arena, *from._impl_.specify_field_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, process_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::process_));
  switch (reward_case()) {
    case REWARD_NOT_SET:
      break;
      case kItem:
        _impl_.reward_.item_ = CreateMaybeMessage<::event_reward_item>(arena, *from._impl_.reward_.item_);
        break;
      case kUserExp:
        _impl_.reward_.user_exp_ = from._impl_.reward_.user_exp_;
        break;
      case kNote:
        new (&_impl_.reward_.note_) decltype(_impl_.reward_.note_){arena, from._impl_.reward_.note_};
        break;
      case kEnumType:
        _impl_.reward_.enum_type_ = from._impl_.reward_.enum_type_;
        break;
  }
  switch (unlock_type_case()) {
    case UNLOCK_TYPE_NOT_SET:
      break;
      case kUserLevel:
        _impl_.unlock_type_.user_level_ = from._impl_.unlock_type_.user_level_;
        break;
  }

  // @@protoc_insertion_point(copy_constructor:event_cfg)
}
inline PROTOBUF_NDEBUG_INLINE event_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        test_arr_{visibility, arena},
        test_empty_arr_{visibility, arena},
        reward_{},
        unlock_type_{},
        _oneof_case_{} {}

inline void event_cfg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rule_),
           0,
           offsetof(Impl_, process_) -
               offsetof(Impl_, rule_) +
               sizeof(Impl_::process_));
}
event_cfg::~event_cfg() {
  // @@protoc_insertion_point(destructor:event_cfg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void event_cfg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.rule_;
  delete _impl_.specify_field_;
  if (has_reward()) {
    clear_reward();
  }
  if (has_unlock_type()) {
    clear_unlock_type();
  }
  _impl_.~Impl_();
}

void event_cfg::clear_reward() {
// @@protoc_insertion_point(one_of_clear_start:event_cfg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (reward_case()) {
    case kItem: {
      if (GetArena() == nullptr) {
        delete _impl_.reward_.item_;
      }
      break;
    }
    case kUserExp: {
      // No need to clear
      break;
    }
    case kNote: {
      _impl_.reward_.note_.Destroy();
      break;
    }
    case kEnumType: {
      // No need to clear
      break;
    }
    case REWARD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REWARD_NOT_SET;
}

void event_cfg::clear_unlock_type() {
// @@protoc_insertion_point(one_of_clear_start:event_cfg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (unlock_type_case()) {
    case kUserLevel: {
      // No need to clear
      break;
    }
    case UNLOCK_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = UNLOCK_TYPE_NOT_SET;
}


PROTOBUF_NOINLINE void event_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:event_cfg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.test_arr_.Clear();
  _impl_.test_empty_arr_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.rule_ != nullptr);
      _impl_.rule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.specify_field_ != nullptr);
      _impl_.specify_field_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.process_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.process_));
  clear_reward();
  clear_unlock_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* event_cfg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 11, 5, 30, 11> event_cfg::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(event_cfg, _impl_._has_bits_),
    0, // no _extensions_
    92, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294951836,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_event_cfg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 id = 1 [(.org.xresloader.validator) = "custom_rule4", (.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 100];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(event_cfg, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.id_)}},
    // uint32 process = 2 [(.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(event_cfg, _impl_.process_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.process_)}},
    // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
    {::_pbi::TcParser::FastMtR2,
     {1498, 63, 3, PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.test_arr_)}},
    // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
    {::_pbi::TcParser::FastMtR2,
     {1506, 63, 4, PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.test_empty_arr_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .event_rule_item rule = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.rule_)}},
    // .event_rule_item specify_field = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.specify_field_)}},
  }}, {{
    51, 0, 3,
    65534, 8, 65535, 9, 64767, 9,
    65535, 65535
  }}, {{
    // uint32 id = 1 [(.org.xresloader.validator) = "custom_rule4", (.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 100];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 process = 2 [(.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 1];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.process_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .event_rule_item rule = 6;
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.rule_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .event_rule_item specify_field = 7;
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.specify_field_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.reward_.item_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.reward_.user_exp_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.reward_.note_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.reward_.enum_type_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kOpenEnum)},
    // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.unlock_type_.user_level_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUInt32)},
    // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.test_arr_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
    {PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.test_empty_arr_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::event_rule_item>()},
    {::_pbi::TcParser::GetTable<::event_rule_item>()},
    {::_pbi::TcParser::GetTable<::event_reward_item>()},
    {::_pbi::TcParser::GetTable<::event_rule_item>()},
    {::_pbi::TcParser::GetTable<::event_rule_item>()},
  }}, {{
    "\11\0\0\0\0\0\0\4\0\0\0\0\0\0\0\0"
    "event_cfg"
    "note"
  }},
};

::uint8_t* event_cfg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:event_cfg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1 [(.org.xresloader.validator) = "custom_rule4", (.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 100];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // uint32 process = 2 [(.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_process() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_process(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .event_rule_item rule = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::rule(this),
        _Internal::rule(this).GetCachedSize(), target, stream);
  }

  // .event_rule_item specify_field = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::specify_field(this),
        _Internal::specify_field(this).GetCachedSize(), target, stream);
  }

  switch (reward_case()) {
    case kItem: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::item(this),
          _Internal::item(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserExp: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<12>(
              stream, this->_internal_user_exp(), target);
      break;
    }
    case kNote: {
      const std::string& _s = this->_internal_note();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "event_cfg.note");
      target = stream->WriteStringMaybeAliased(13, _s, target);
      break;
    }
    case kEnumType: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          14, this->_internal_enum_type(), target);
      break;
    }
    default:
      break;
  }
  // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
  if (unlock_type_case() == kUserLevel) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        51, this->_internal_user_level(), target);
  }

  // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_arr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(91, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_test_empty_arr_size()); i < n; i++) {
    const auto& repfield = this->_internal_test_empty_arr().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(92, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:event_cfg)
  return target;
}

::size_t event_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:event_cfg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .event_rule_item test_arr = 91 [(.org.xresloader.field_separator) = ";"];
  total_size += 2UL * this->_internal_test_arr_size();
  for (const auto& msg : this->_internal_test_arr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .event_rule_item test_empty_arr = 92 [(.org.xresloader.field_separator) = ";"];
  total_size += 2UL * this->_internal_test_empty_arr_size();
  for (const auto& msg : this->_internal_test_empty_arr()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .event_rule_item rule = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rule_);
    }

    // .event_rule_item specify_field = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.specify_field_);
    }

  }
  // uint32 id = 1 [(.org.xresloader.validator) = "custom_rule4", (.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 100];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 process = 2 [(.org.xresloader.field_unique_tag) = "unique_tag", (.org.xresloader.field_not_null) = true, (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_process() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_process());
  }

  switch (reward_case()) {
    // .event_reward_item item = 11 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\351\201\223\345\205\267"];
    case kItem: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.reward_.item_);
      break;
    }
    // int64 user_exp = 12 [(.org.xresloader.field_alias) = "\345\245\226\345\212\261\347\273\217\351\252\214"];
    case kUserExp: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_user_exp());
      break;
    }
    // string note = 13 [(.org.xresloader.field_alias) = "\346\217\217\350\277\260\346\226\207\346\234\254"];
    case kNote: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_note());
      break;
    }
    // .cost_type enum_type = 14 [(.org.xresloader.field_alias) = "\350\264\247\345\270\201\347\261\273\345\236\213"];
    case kEnumType: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_enum_type());
      break;
    }
    case REWARD_NOT_SET: {
      break;
    }
  }
  switch (unlock_type_case()) {
    // uint32 user_level = 51 [(.org.xresloader.field_alias) = "\347\216\251\345\256\266\347\255\211\347\272\247"];
    case kUserLevel: {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_user_level());
      break;
    }
    case UNLOCK_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData event_cfg::_class_data_ = {
    event_cfg::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* event_cfg::GetClassData() const {
  return &_class_data_;
}

void event_cfg::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<event_cfg*>(&to_msg);
  auto& from = static_cast<const event_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:event_cfg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_test_arr()->MergeFrom(
      from._internal_test_arr());
  _this->_internal_mutable_test_empty_arr()->MergeFrom(
      from._internal_test_empty_arr());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_rule()->::event_rule_item::MergeFrom(
          from._internal_rule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_specify_field()->::event_rule_item::MergeFrom(
          from._internal_specify_field());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_process() != 0) {
    _this->_internal_set_process(from._internal_process());
  }
  switch (from.reward_case()) {
    case kItem: {
      _this->_internal_mutable_item()->::event_reward_item::MergeFrom(
          from._internal_item());
      break;
    }
    case kUserExp: {
      _this->_internal_set_user_exp(from._internal_user_exp());
      break;
    }
    case kNote: {
      _this->_internal_set_note(from._internal_note());
      break;
    }
    case kEnumType: {
      _this->_internal_set_enum_type(from._internal_enum_type());
      break;
    }
    case REWARD_NOT_SET: {
      break;
    }
  }
  switch (from.unlock_type_case()) {
    case kUserLevel: {
      _this->_internal_set_user_level(from._internal_user_level());
      break;
    }
    case UNLOCK_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void event_cfg::CopyFrom(const event_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:event_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool event_cfg::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* event_cfg::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void event_cfg::InternalSwap(event_cfg* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.test_arr_.InternalSwap(&other->_impl_.test_arr_);
  _impl_.test_empty_arr_.InternalSwap(&other->_impl_.test_empty_arr_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.process_)
      + sizeof(event_cfg::_impl_.process_)
      - PROTOBUF_FIELD_OFFSET(event_cfg, _impl_.rule_)>(
          reinterpret_cast<char*>(&_impl_.rule_),
          reinterpret_cast<char*>(&other->_impl_.rule_));
  swap(_impl_.reward_, other->_impl_.reward_);
  swap(_impl_.unlock_type_, other->_impl_.unlock_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata event_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[10]);
}
// ===================================================================

class keep_or_strip_empty_list_cfg::_Internal {
 public:
};

void keep_or_strip_empty_list_cfg::clear_array_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.array_msg_.Clear();
}
void keep_or_strip_empty_list_cfg::clear_array_plain_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.array_plain_msg_.Clear();
}
keep_or_strip_empty_list_cfg::keep_or_strip_empty_list_cfg(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:keep_or_strip_empty_list_cfg)
}
inline PROTOBUF_NDEBUG_INLINE keep_or_strip_empty_list_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : array_msg_{visibility, arena, from.array_msg_},
        array_plain_msg_{visibility, arena, from.array_plain_msg_},
        array_int32_{visibility, arena, from.array_int32_},
        _array_int32_cached_byte_size_{0},
        array_int64_{visibility, arena, from.array_int64_},
        _array_int64_cached_byte_size_{0},
        _cached_size_{0} {}

keep_or_strip_empty_list_cfg::keep_or_strip_empty_list_cfg(
    ::google::protobuf::Arena* arena,
    const keep_or_strip_empty_list_cfg& from)
    : ::google::protobuf::Message(arena) {
  keep_or_strip_empty_list_cfg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:keep_or_strip_empty_list_cfg)
}
inline PROTOBUF_NDEBUG_INLINE keep_or_strip_empty_list_cfg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : array_msg_{visibility, arena},
        array_plain_msg_{visibility, arena},
        array_int32_{visibility, arena},
        _array_int32_cached_byte_size_{0},
        array_int64_{visibility, arena},
        _array_int64_cached_byte_size_{0},
        _cached_size_{0} {}

inline void keep_or_strip_empty_list_cfg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
keep_or_strip_empty_list_cfg::~keep_or_strip_empty_list_cfg() {
  // @@protoc_insertion_point(destructor:keep_or_strip_empty_list_cfg)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void keep_or_strip_empty_list_cfg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void keep_or_strip_empty_list_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:keep_or_strip_empty_list_cfg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.array_msg_.Clear();
  _impl_.array_plain_msg_.Clear();
  _impl_.array_int32_.Clear();
  _impl_.array_int64_.Clear();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* keep_or_strip_empty_list_cfg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 0, 2> keep_or_strip_empty_list_cfg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_keep_or_strip_empty_list_cfg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(keep_or_strip_empty_list_cfg, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.id_)}},
    // repeated .dep2_cfg array_msg = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_msg_)}},
    // repeated .dep2_cfg array_plain_msg = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_plain_msg_)}},
    // repeated int32 array_int32 = 4;
    {::_pbi::TcParser::FastV32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_int32_)}},
    // repeated int64 array_int64 = 5;
    {::_pbi::TcParser::FastV64P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_int64_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
    {PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated .dep2_cfg array_msg = 2;
    {PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_msg_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .dep2_cfg array_plain_msg = 3;
    {PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_plain_msg_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int32 array_int32 = 4;
    {PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_int32_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated int64 array_int64 = 5;
    {PROTOBUF_FIELD_OFFSET(keep_or_strip_empty_list_cfg, _impl_.array_int64_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dep2_cfg>()},
    {::_pbi::TcParser::GetTable<::dep2_cfg>()},
  }}, {{
  }},
};

::uint8_t* keep_or_strip_empty_list_cfg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:keep_or_strip_empty_list_cfg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // repeated .dep2_cfg array_msg = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_msg().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dep2_cfg array_plain_msg = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_array_plain_msg_size()); i < n; i++) {
    const auto& repfield = this->_internal_array_plain_msg().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 array_int32 = 4;
  {
    int byte_size = _impl_._array_int32_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_array_int32(), byte_size, target);
    }
  }

  // repeated int64 array_int64 = 5;
  {
    int byte_size = _impl_._array_int64_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_array_int64(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:keep_or_strip_empty_list_cfg)
  return target;
}

::size_t keep_or_strip_empty_list_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:keep_or_strip_empty_list_cfg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dep2_cfg array_msg = 2;
  total_size += 1UL * this->_internal_array_msg_size();
  for (const auto& msg : this->_internal_array_msg()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .dep2_cfg array_plain_msg = 3;
  total_size += 1UL * this->_internal_array_plain_msg_size();
  for (const auto& msg : this->_internal_array_plain_msg()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated int32 array_int32 = 4;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_array_int32())
    ;
    _impl_._array_int32_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 array_int64 = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_array_int64())
    ;
    _impl_._array_int64_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // uint32 id = 1 [(.org.xresloader.field_description) = "This is a Key", (.org.xresloader.ue.key_tag) = 1];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData keep_or_strip_empty_list_cfg::_class_data_ = {
    keep_or_strip_empty_list_cfg::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* keep_or_strip_empty_list_cfg::GetClassData() const {
  return &_class_data_;
}

void keep_or_strip_empty_list_cfg::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<keep_or_strip_empty_list_cfg*>(&to_msg);
  auto& from = static_cast<const keep_or_strip_empty_list_cfg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:keep_or_strip_empty_list_cfg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_array_msg()->MergeFrom(
      from._internal_array_msg());
  _this->_internal_mutable_array_plain_msg()->MergeFrom(
      from._internal_array_plain_msg());
  _this->_internal_mutable_array_int32()->MergeFrom(from._internal_array_int32());
  _this->_internal_mutable_array_int64()->MergeFrom(from._internal_array_int64());
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void keep_or_strip_empty_list_cfg::CopyFrom(const keep_or_strip_empty_list_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:keep_or_strip_empty_list_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool keep_or_strip_empty_list_cfg::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* keep_or_strip_empty_list_cfg::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void keep_or_strip_empty_list_cfg::InternalSwap(keep_or_strip_empty_list_cfg* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.array_msg_.InternalSwap(&other->_impl_.array_msg_);
  _impl_.array_plain_msg_.InternalSwap(&other->_impl_.array_plain_msg_);
  _impl_.array_int32_.InternalSwap(&other->_impl_.array_int32_);
  _impl_.array_int64_.InternalSwap(&other->_impl_.array_int64_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata keep_or_strip_empty_list_cfg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[11]);
}
// ===================================================================

class combine_id::_Internal {
 public:
};

combine_id::combine_id(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:combine_id)
}
combine_id::combine_id(
    ::google::protobuf::Arena* arena, const combine_id& from)
    : combine_id(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE combine_id::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void combine_id::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, prefix_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, prefix_) +
               sizeof(Impl_::id_));
}
combine_id::~combine_id() {
  // @@protoc_insertion_point(destructor:combine_id)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void combine_id::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void combine_id::Clear() {
// @@protoc_insertion_point(message_clear_start:combine_id)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.prefix_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.prefix_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* combine_id::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> combine_id::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_combine_id_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 id = 2 [(.org.xresloader.validator) = "0-99999"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(combine_id, _impl_.id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(combine_id, _impl_.id_)}},
    // uint32 prefix = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(combine_id, _impl_.prefix_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(combine_id, _impl_.prefix_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 prefix = 1;
    {PROTOBUF_FIELD_OFFSET(combine_id, _impl_.prefix_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 id = 2 [(.org.xresloader.validator) = "0-99999"];
    {PROTOBUF_FIELD_OFFSET(combine_id, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* combine_id::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:combine_id)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 prefix = 1;
  if (this->_internal_prefix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_prefix(), target);
  }

  // uint32 id = 2 [(.org.xresloader.validator) = "0-99999"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:combine_id)
  return target;
}

::size_t combine_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:combine_id)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 prefix = 1;
  if (this->_internal_prefix() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_prefix());
  }

  // uint32 id = 2 [(.org.xresloader.validator) = "0-99999"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData combine_id::_class_data_ = {
    combine_id::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* combine_id::GetClassData() const {
  return &_class_data_;
}

void combine_id::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<combine_id*>(&to_msg);
  auto& from = static_cast<const combine_id&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:combine_id)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_prefix() != 0) {
    _this->_internal_set_prefix(from._internal_prefix());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void combine_id::CopyFrom(const combine_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:combine_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool combine_id::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* combine_id::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void combine_id::InternalSwap(combine_id* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(combine_id, _impl_.id_)
      + sizeof(combine_id::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(combine_id, _impl_.prefix_)>(
          reinterpret_cast<char*>(&_impl_.prefix_),
          reinterpret_cast<char*>(&other->_impl_.prefix_));
}

::google::protobuf::Metadata combine_id::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[12]);
}
// ===================================================================

process_by_script_MapU32StringEntry_DoNotUse::process_by_script_MapU32StringEntry_DoNotUse() {}
process_by_script_MapU32StringEntry_DoNotUse::process_by_script_MapU32StringEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata process_by_script_MapU32StringEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[13]);
}
// ===================================================================

process_by_script_TestMapIsEntry_DoNotUse::process_by_script_TestMapIsEntry_DoNotUse() {}
process_by_script_TestMapIsEntry_DoNotUse::process_by_script_TestMapIsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata process_by_script_TestMapIsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[14]);
}
// ===================================================================

process_by_script_TestMapSmEntry_DoNotUse::process_by_script_TestMapSmEntry_DoNotUse() {}
process_by_script_TestMapSmEntry_DoNotUse::process_by_script_TestMapSmEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata process_by_script_TestMapSmEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[15]);
}
// ===================================================================

class process_by_script::_Internal {
 public:
  using HasBits = decltype(std::declval<process_by_script>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(process_by_script, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& date(const process_by_script* msg);
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::combine_id& id_id(const process_by_script* msg);
  static void set_has_id_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& process_by_script::_Internal::date(const process_by_script* msg) {
  return *msg->_impl_.date_;
}
const ::combine_id& process_by_script::_Internal::id_id(const process_by_script* msg) {
  return *msg->_impl_.id_id_;
}
void process_by_script::clear_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void process_by_script::clear_test_map_sm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.test_map_sm_.Clear();
}
process_by_script::process_by_script(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:process_by_script)
}
inline PROTOBUF_NDEBUG_INLINE process_by_script::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        map_u32_string_{visibility, arena, from.map_u32_string_},
        test_map_is_{visibility, arena, from.test_map_is_},
        test_map_sm_{visibility, arena, from.test_map_sm_},
        human_readable_date_(arena, from.human_readable_date_) {}

process_by_script::process_by_script(
    ::google::protobuf::Arena* arena,
    const process_by_script& from)
    : ::google::protobuf::Message(arena) {
  process_by_script* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.date_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.date_)
                : nullptr;
  _impl_.id_id_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::combine_id>(arena, *from._impl_.id_id_)
                : nullptr;
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:process_by_script)
}
inline PROTOBUF_NDEBUG_INLINE process_by_script::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        map_u32_string_{visibility, arena},
        test_map_is_{visibility, arena},
        test_map_sm_{visibility, arena},
        human_readable_date_(arena) {}

inline void process_by_script::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, date_) +
               sizeof(Impl_::id_));
}
process_by_script::~process_by_script() {
  // @@protoc_insertion_point(destructor:process_by_script)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void process_by_script::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.human_readable_date_.Destroy();
  delete _impl_.date_;
  delete _impl_.id_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void process_by_script::Clear() {
// @@protoc_insertion_point(message_clear_start:process_by_script)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_u32_string_.Clear();
  _impl_.test_map_is_.Clear();
  _impl_.test_map_sm_.Clear();
  _impl_.human_readable_date_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.id_id_ != nullptr);
      _impl_.id_id_->Clear();
    }
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* process_by_script::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 7, 6, 81, 7> process_by_script::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(process_by_script, _impl_._has_bits_),
    0, // no _extensions_
    1001, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967088,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_process_by_script_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp date = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 1, PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.date_)}},
    // uint32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(process_by_script, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string human_readable_date = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.human_readable_date_)}},
  }}, {{
    1001, 0, 1,
    65534, 6,
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // map<uint32, string> map_u32_string = 2;
    {PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.map_u32_string_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string human_readable_date = 3;
    {PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.human_readable_date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp date = 4;
    {PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.date_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<int32, string> test_map_is = 7;
    {PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.test_map_is_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
    {PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.test_map_sm_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .combine_id id_id = 1001;
    {PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.id_id_), _Internal::kHasBitsOffset + 1, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(process_by_script()._impl_.map_u32_string_)>(
        1, 0, 0, 13,
        9)},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(process_by_script()._impl_.test_map_is_)>(
        1, 0, 0, 5,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(process_by_script()._impl_.test_map_sm_)>(
        1, 0, 0, 9,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::dep2_cfg>},
    {::_pbi::TcParser::GetTable<::combine_id>()},
  }}, {{
    "\21\0\16\23\0\13\13\0"
    "process_by_script"
    "map_u32_string"
    "human_readable_date"
    "test_map_is"
    "test_map_sm"
  }},
};

::uint8_t* process_by_script::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:process_by_script)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // map<uint32, string> map_u32_string = 2;
  if (!_internal_map_u32_string().empty()) {
    using MapType = ::google::protobuf::Map<::uint32_t, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<::uint32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_map_u32_string();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "process_by_script.map_u32_string");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "process_by_script.map_u32_string");
      }
    }
  }

  // string human_readable_date = 3;
  if (!this->_internal_human_readable_date().empty()) {
    const std::string& _s = this->_internal_human_readable_date();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "process_by_script.human_readable_date");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp date = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::date(this),
        _Internal::date(this).GetCachedSize(), target, stream);
  }

  // map<int32, string> test_map_is = 7;
  if (!_internal_test_map_is().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_test_map_is();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "process_by_script.test_map_is");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "process_by_script.test_map_is");
      }
    }
  }

  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  if (!_internal_test_map_sm().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::dep2_cfg>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::dep2_cfg,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_test_map_sm();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "process_by_script.test_map_sm");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "process_by_script.test_map_sm");
      }
    }
  }

  // .combine_id id_id = 1001;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1001, _Internal::id_id(this),
        _Internal::id_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:process_by_script)
  return target;
}

::size_t process_by_script::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:process_by_script)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> map_u32_string = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_map_u32_string_size());
  for (const auto& entry : _internal_map_u32_string()) {
    total_size += _pbi::MapEntryFuncs<::uint32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_UINT32,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // map<int32, string> test_map_is = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_test_map_is_size());
  for (const auto& entry : _internal_test_map_is()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // map<string, .dep2_cfg> test_map_sm = 8 [(.org.xresloader.field_separator) = "|"];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_test_map_sm_size());
  for (const auto& entry : _internal_test_map_sm()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::dep2_cfg,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // string human_readable_date = 3;
  if (!this->_internal_human_readable_date().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_human_readable_date());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp date = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.date_);
    }

    // .combine_id id_id = 1001;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.id_id_);
    }

  }
  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData process_by_script::_class_data_ = {
    process_by_script::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* process_by_script::GetClassData() const {
  return &_class_data_;
}

void process_by_script::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<process_by_script*>(&to_msg);
  auto& from = static_cast<const process_by_script&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:process_by_script)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_u32_string_.MergeFrom(from._impl_.map_u32_string_);
  _this->_impl_.test_map_is_.MergeFrom(from._impl_.test_map_is_);
  _this->_impl_.test_map_sm_.MergeFrom(from._impl_.test_map_sm_);
  if (!from._internal_human_readable_date().empty()) {
    _this->_internal_set_human_readable_date(from._internal_human_readable_date());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_date()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_date());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_id_id()->::combine_id::MergeFrom(
          from._internal_id_id());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void process_by_script::CopyFrom(const process_by_script& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:process_by_script)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool process_by_script::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* process_by_script::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void process_by_script::InternalSwap(process_by_script* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.map_u32_string_.InternalSwap(&other->_impl_.map_u32_string_);
  _impl_.test_map_is_.InternalSwap(&other->_impl_.test_map_is_);
  _impl_.test_map_sm_.InternalSwap(&other->_impl_.test_map_sm_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.human_readable_date_, &other->_impl_.human_readable_date_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.id_)
      + sizeof(process_by_script::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(process_by_script, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::google::protobuf::Metadata process_by_script::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[16]);
}
// ===================================================================

class large_file_test::_Internal {
 public:
  using HasBits = decltype(std::declval<large_file_test>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(large_file_test, _impl_._has_bits_);
  static const ::combine_id& id_id(const large_file_test* msg);
  static void set_has_id_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::combine_id& large_file_test::_Internal::id_id(const large_file_test* msg) {
  return *msg->_impl_.id_id_;
}
large_file_test::large_file_test(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:large_file_test)
}
inline PROTOBUF_NDEBUG_INLINE large_file_test::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        szvalue_(arena, from.szvalue_) {}

large_file_test::large_file_test(
    ::google::protobuf::Arena* arena,
    const large_file_test& from)
    : ::google::protobuf::Message(arena) {
  large_file_test* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.id_id_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::combine_id>(arena, *from._impl_.id_id_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, f32value_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::f32value_));

  // @@protoc_insertion_point(copy_constructor:large_file_test)
}
inline PROTOBUF_NDEBUG_INLINE large_file_test::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        szvalue_(arena) {}

inline void large_file_test::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_id_),
           0,
           offsetof(Impl_, f32value_) -
               offsetof(Impl_, id_id_) +
               sizeof(Impl_::f32value_));
}
large_file_test::~large_file_test() {
  // @@protoc_insertion_point(destructor:large_file_test)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void large_file_test::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.szvalue_.Destroy();
  delete _impl_.id_id_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void large_file_test::Clear() {
// @@protoc_insertion_point(message_clear_start:large_file_test)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.szvalue_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.id_id_ != nullptr);
    _impl_.id_id_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.f32value_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.f32value_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* large_file_test::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 31, 2> large_file_test::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(large_file_test, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_large_file_test_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(large_file_test, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.id_)}},
    // int32 i32value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(large_file_test, _impl_.i32value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.i32value_)}},
    // uint64 u64value = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(large_file_test, _impl_.u64value_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.u64value_)}},
    // double f64value = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.f64value_)}},
    // float f32value = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.f32value_)}},
    // string szvalue = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.szvalue_)}},
    // .combine_id id_id = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.id_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1;
    {PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 i32value = 2;
    {PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.i32value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint64 u64value = 3;
    {PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.u64value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // double f64value = 4;
    {PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.f64value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float f32value = 5;
    {PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.f32value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string szvalue = 6;
    {PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.szvalue_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .combine_id id_id = 7;
    {PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.id_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::combine_id>()},
  }}, {{
    "\17\0\0\0\0\0\7\0"
    "large_file_test"
    "szvalue"
  }},
};

::uint8_t* large_file_test::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:large_file_test)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // int32 i32value = 2;
  if (this->_internal_i32value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_i32value(), target);
  }

  // uint64 u64value = 3;
  if (this->_internal_u64value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_u64value(), target);
  }

  // double f64value = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_f64value = this->_internal_f64value();
  ::uint64_t raw_f64value;
  memcpy(&raw_f64value, &tmp_f64value, sizeof(tmp_f64value));
  if (raw_f64value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_f64value(), target);
  }

  // float f32value = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_f32value = this->_internal_f32value();
  ::uint32_t raw_f32value;
  memcpy(&raw_f32value, &tmp_f32value, sizeof(tmp_f32value));
  if (raw_f32value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_f32value(), target);
  }

  // string szvalue = 6;
  if (!this->_internal_szvalue().empty()) {
    const std::string& _s = this->_internal_szvalue();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "large_file_test.szvalue");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .combine_id id_id = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::id_id(this),
        _Internal::id_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:large_file_test)
  return target;
}

::size_t large_file_test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:large_file_test)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szvalue = 6;
  if (!this->_internal_szvalue().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_szvalue());
  }

  // .combine_id id_id = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.id_id_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // int32 i32value = 2;
  if (this->_internal_i32value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_i32value());
  }

  // uint64 u64value = 3;
  if (this->_internal_u64value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_u64value());
  }

  // double f64value = 4;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_f64value = this->_internal_f64value();
  ::uint64_t raw_f64value;
  memcpy(&raw_f64value, &tmp_f64value, sizeof(tmp_f64value));
  if (raw_f64value != 0) {
    total_size += 9;
  }

  // float f32value = 5;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_f32value = this->_internal_f32value();
  ::uint32_t raw_f32value;
  memcpy(&raw_f32value, &tmp_f32value, sizeof(tmp_f32value));
  if (raw_f32value != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData large_file_test::_class_data_ = {
    large_file_test::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* large_file_test::GetClassData() const {
  return &_class_data_;
}

void large_file_test::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<large_file_test*>(&to_msg);
  auto& from = static_cast<const large_file_test&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:large_file_test)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_szvalue().empty()) {
    _this->_internal_set_szvalue(from._internal_szvalue());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_id_id()->::combine_id::MergeFrom(
        from._internal_id_id());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_i32value() != 0) {
    _this->_internal_set_i32value(from._internal_i32value());
  }
  if (from._internal_u64value() != 0) {
    _this->_internal_set_u64value(from._internal_u64value());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_f64value = from._internal_f64value();
  ::uint64_t raw_f64value;
  memcpy(&raw_f64value, &tmp_f64value, sizeof(tmp_f64value));
  if (raw_f64value != 0) {
    _this->_internal_set_f64value(from._internal_f64value());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_f32value = from._internal_f32value();
  ::uint32_t raw_f32value;
  memcpy(&raw_f32value, &tmp_f32value, sizeof(tmp_f32value));
  if (raw_f32value != 0) {
    _this->_internal_set_f32value(from._internal_f32value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void large_file_test::CopyFrom(const large_file_test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:large_file_test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool large_file_test::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* large_file_test::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void large_file_test::InternalSwap(large_file_test* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.szvalue_, &other->_impl_.szvalue_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.f32value_)
      + sizeof(large_file_test::_impl_.f32value_)
      - PROTOBUF_FIELD_OFFSET(large_file_test, _impl_.id_id_)>(
          reinterpret_cast<char*>(&_impl_.id_id_),
          reinterpret_cast<char*>(&other->_impl_.id_id_));
}

::google::protobuf::Metadata large_file_test::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_kind_2eproto_getter, &descriptor_table_kind_2eproto_once,
      file_level_metadata_kind_2eproto[17]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
